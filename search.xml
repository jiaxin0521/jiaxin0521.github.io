<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>beijingzhedie</title>
    <url>/2022/02/08/beijingzhedie/index.html</url>
    <content><![CDATA[<center>北京折叠</center>

<br>


<div class="pdf-container" data-target="D:\hexo\blog\source\\_posts\beijingzhedie\beijingzhedie.pdf" data-height="500px"></div>

<br>

]]></content>
      <tags>
        <tag>life</tag>
        <tag>rending-note</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇先来个碎碎念</title>
    <url>/2022/02/02/hello/index.html</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Welcome to my blog, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      <tags>
        <tag>碎碎念</tag>
      </tags>
  </entry>
  <entry>
    <title>Some life tips</title>
    <url>/2022/02/04/matepad%E8%BF%9E%E6%8E%A5%E5%8F%8C%E5%B1%8F/index.html</url>
    <content><![CDATA[<h1 id="matepad连接双屏"><a href="#matepad连接双屏" class="headerlink" title="matepad连接双屏"></a>matepad连接双屏</h1><a id="more"></a>



<p><img src="/2022/02/04/matepad%E8%BF%9E%E6%8E%A5%E5%8F%8C%E5%B1%8F/index/image-20220204200831866.png" alt="image-20220204200831866"></p>
<p>双击打开最后一个</p>
<p><img src="/2022/02/04/matepad%E8%BF%9E%E6%8E%A5%E5%8F%8C%E5%B1%8F/index/image-20220204200947542.png" alt="image-20220204200947542"></p>
<p>建议把spacedesk 和Videowall全部打开</p>
<p>然后win+P设为扩展</p>
<p>然后把要在副屏看的界面拖到主屏幕的右边就可以了</p>
<p>理论上这样也可以实现对电脑的远程控制，但是实在是太慢了！！！！</p>
]]></content>
      <categories>
        <category>生活的技巧</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>next数学方程的解析</title>
    <url>/2022/02/05/next%E6%95%B0%E5%AD%A6%E6%96%B9%E7%A8%8B%E7%9A%84%E8%A7%A3%E6%9E%90/index.html</url>
    <content><![CDATA[<h1 id="Math-Equations-数学方程"><a href="#Math-Equations-数学方程" class="headerlink" title="Math Equations(数学方程)"></a>Math Equations(数学方程)</h1><p>Math Formulas Render Support.</p>
<p>可以使数学公式变得好看点。</p>
<a id="more"></a>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Math Formulas Render Support</span><br><span class="line">math:</span><br><span class="line">  # Default (false) will load mathjax / katex script on demand.</span><br><span class="line">  # That is it only render those page which has `mathjax: true` in front-matter.</span><br><span class="line">  # If you set it to true, it will load mathjax / katex script EVERY PAGE.</span><br><span class="line">  every_page: false</span><br><span class="line"></span><br><span class="line">  mathjax:</span><br><span class="line">    enable: true</span><br><span class="line">    # Available values: none | ams | all</span><br><span class="line">    tags: none</span><br><span class="line"></span><br><span class="line">  katex:</span><br><span class="line">    enable: false</span><br><span class="line">    # See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span><br><span class="line">    copy_tex: false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>默认 (false) 将按需加载 mathjax / katex 脚本。</p>
<p>那就是它只渲染那些在 front-matter 中有 <code>mathjax: true</code> 的页面。</p>
<p>如果你将它设置为 true，它将在每一页加载 mathjax / katex 脚本。</p>
<h4 id="简单方程"><a href="#简单方程" class="headerlink" title="简单方程"></a>简单方程</h4><p>对于简单的方程，使用以下形式给出一个标签，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$\begin&#123;方程&#125; \label&#123;eq1&#125; </span><br><span class="line">e=mc^2 </span><br><span class="line">\end&#123;方程&#125;$$</span><br></pre></td></tr></table></figure>

<p>e =mc^2</p>
<p>然后，您可以使用以下内容轻松地在文本中引用此等式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">爱因斯坦提出的著名物质能量方程$\eqref&#123;eq1&#125;$...</span><br></pre></td></tr></table></figure>

<p>著名的物质能量方程(1)爱因斯坦提出…</p>
<h4 id="多线方程"><a href="#多线方程" class="headerlink" title="多线方程"></a>多线方程</h4><p>对于多行方程，在<code>equation</code>环境内部，您可以使用<code>aligned</code>环境将其拆分为多行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$\begin&#123;方程&#125; \label&#123;eq2&#125; </span><br><span class="line">\begin&#123;aligned&#125; </span><br><span class="line">a &amp;= b + c \\ </span><br><span class="line">  &amp;= d + e + f + g \\ </span><br><span class="line">  &amp;= h + i </span><br><span class="line">\end&#123;aligned&#125; </span><br><span class="line">\end&#123;方程&#125;$$</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方程 $\eqref&#123;eq2&#125;$ 是一个多线方程。</span><br></pre></td></tr></table></figure>

<h4 id="多个对齐方程"><a href="#多个对齐方程" class="headerlink" title="多个对齐方程"></a>多个对齐方程</h4><p>我们可以使用<code>align</code>环境来对齐多个方程。这些方程中的每一个都会得到自己的数字。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$\begin&#123;align&#125; </span><br><span class="line">a &amp;= b + c \label&#123;eq3&#125; \\ </span><br><span class="line">x &amp;= yz \label&#123;eq4&#125; \\ </span><br><span class="line">l &amp;= m - n \label&#123;eq5&#125; </span><br><span class="line">\end&#123;align&#125;$$</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有三个对齐的方程：方程$\eqref&#123;eq3&#125;$、方程$\eqref&#123;eq4&#125;$和方程$\eqref&#123;eq5&#125;$。</span><br></pre></td></tr></table></figure>



<p>因为<code>align</code>它本身就是一个完整的方程环境（阅读<a href="https://tex.stackexchange.com/questions/95402/what-is-the-difference-between-aligned-in-displayed-mode-and-starred-align">这里</a><code>aligned</code>关于 LaTeX和LaTeX之间的区别<code>align</code>）。你不需要用<code>equation</code>环境包装它。</p>
<h4 id="从编号中排除方程式"><a href="#从编号中排除方程式" class="headerlink" title="从编号中排除方程式"></a>从编号中排除方程式</h4><p>在<code>align</code>环境中，如果您不想对一个或一些方程式进行编号，只需<code>\nonumber</code>在这些方程式后面使用即可。如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$\begin&#123;align&#125; </span><br><span class="line">-4 + 5x &amp;= 2 + y \nonumber \\ </span><br><span class="line">w + 2 &amp;= -1 + w \\ </span><br><span class="line">ab &amp;= cb </span><br><span class="line">\end&#123;align&#125;$$</span><br></pre></td></tr></table></figure>



<h4 id="用于-tag标记方程"><a href="#用于-tag标记方程" class="headerlink" title="用于\tag标记方程"></a>用于<code>\tag</code>标记方程</h4><p>有时，您想使用更“异国情调”的风格来引用您的方程式。您可以使用<code>\tag&#123;&#125;</code>来实现这一点。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$x+1\over\sqrt&#123;1-x^2&#125; \tag&#123;i&#125;\label&#123;eq_tag&#125;$$</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方程 $\eqref&#123;eq_tag&#125;$ 使用 `\tag&#123;&#125;` 代替自动编号。</span><br></pre></td></tr></table></figure>

<p>）使用<code>\tag&#123;&#125;</code>而不是自动编号。</p>
<p>参考文献：</p>
<p><a href="https://theme-next.js.org/docs/third-party-services/math-equations.html">https://theme-next.js.org/docs/third-party-services/math-equations.html</a></p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>maths</tag>
      </tags>
  </entry>
  <entry>
    <title>write before</title>
    <url>/2022/02/03/write%20before/index.html</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Welcome to my blog, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>python learning</title>
    <url>/2022/02/06/python-learning/index.html</url>
    <content><![CDATA[<p>人生苦短，我用 Python —— Life is short, you need Python（但是python执行时间特别长）</p>
<a id="more"></a>

<h1 id="python初识"><a href="#python初识" class="headerlink" title="python初识"></a>python初识</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>Python 的起源</li>
<li>为什么要用 Python？</li>
<li>Python 的特点</li>
<li>Python 的优缺点</li>
</ul>
<h2 id="01-Python-的起源"><a href="#01-Python-的起源" class="headerlink" title="01. Python 的起源"></a>01. Python 的起源</h2><blockquote>
<p>Python 的创始人为吉多·范罗苏姆（Guido van Rossum）</p>
</blockquote>
<p>![002_吉多-w256](E:/Python/课件和代码/课件/day01_markdown/markdown/media/14950329208518/002_吉多.jpg</p>
<ol>
<li>1989 年的圣诞节期间，吉多·范罗苏姆为了在阿姆斯特丹打发时间，决心开发一个新的<strong>解释程序</strong>，作为 ABC 语言的一种继承（<strong>感觉下什么叫牛人</strong>）</li>
<li>ABC 是由吉多参加设计的一种教学语言，就吉多本人看来，ABC 这种语言非常优美和强大，是<strong>专门为非专业程序员设计的</strong>。但是 ABC 语言并没有成功，究其原因，吉多认为是<strong>非开放</strong>造成的。吉多决心在 Python 中避免这一错误，并获取了非常好的效果</li>
<li>之所以选中 Python（蟒蛇） 作为程序的名字，是因为他是 BBC 电视剧——蒙提·派森的飞行马戏团（Monty Python’s Flying Circus）的爱好者</li>
<li>1991 年，第一个 Python <strong>解释器</strong> 诞生，它是用 C 语言实现的，并能够调用 C 语言的库文件</li>
</ol>
<h3 id="1-1-解释器（科普）"><a href="#1-1-解释器（科普）" class="headerlink" title="1.1 解释器（科普）"></a>1.1 解释器（科普）</h3><p><strong>计算机不能直接理解任何除机器语言以外的语言</strong>，所以必须要把程序员所写的程序语言翻译成机器语言，计算机才能执行程序。<strong>将其他语言翻译成机器语言的工具，被称为编译器</strong></p>
<p>编译器翻译的方式有两种：一个是<strong>编译</strong>，另外一个是<strong>解释</strong>。两种方式之间的区别在于<strong>翻译时间点的不同</strong>。当编译器<strong>以解释方式运行的时候</strong>，也称之为<strong>解释器</strong></p>
<p><a href="https://imgchr.com/i/3ytslF"><img src="/2022/02/06/python-learning/index/3ytslF.md.png" alt="3ytslF.md.png"></a></p>
<ul>
<li><strong>编译型语言</strong>：程序在执行之前需要一个专门的编译过程，把程序编译成为机器语言的文件，运行时不需要重新翻译，直接使用编译的结果就行了。程序执行效率高，依赖编译器，跨平台性差些。如 C、C++</li>
<li><strong>解释型语言</strong>：解释型语言编写的程序不进行预先编译，以文本方式存储程序代码，会将代码一句一句直接运行。在发布程序时，看起来省了道编译工序，但是在运行程序的时候，必须先解释再运行</li>
</ul>
<h4 id="编译型语言和解释型语言对比"><a href="#编译型语言和解释型语言对比" class="headerlink" title="编译型语言和解释型语言对比"></a>编译型语言和解释型语言对比</h4><ul>
<li><strong>速度</strong> —— 编译型语言比解释型语言执行速度快</li>
<li><strong>跨平台性</strong> —— 解释型语言比编译型语言跨平台性好</li>
</ul>
<h3 id="1-2-Python-的设计目标"><a href="#1-2-Python-的设计目标" class="headerlink" title="1.2 Python 的设计目标"></a>1.2 Python 的设计目标</h3><p>1999 年，吉多·范罗苏姆向 DARPA 提交了一条名为 “Computer Programming for Everybody” 的资金申请，并在后来说明了他对 Python 的目标：</p>
<ul>
<li>一门<strong>简单直观的语言</strong>并与主要竞争者一样强大</li>
<li><strong>开源</strong>，以便任何人都可以为它做贡献</li>
<li>代码<strong>像纯英语那样容易理解</strong></li>
<li>适用于<strong>短期</strong>开发的日常任务</li>
</ul>
<p>这些想法中的基本都已经成为现实，Python 已经成为一门流行的编程语言</p>
<h3 id="1-3-Python-的设计哲学"><a href="#1-3-Python-的设计哲学" class="headerlink" title="1.3 Python 的设计哲学"></a>1.3 Python 的设计哲学</h3><ol>
<li>优雅</li>
<li>明确</li>
<li>简单</li>
</ol>
<ul>
<li>Python 开发者的哲学是：<strong>用一种方法，最好是只有一种方法来做一件事</strong></li>
<li>如果面临多种选择，Python 开发者一般会拒绝花俏的语法，而选择<strong>明确没有或者很少有歧义的语法</strong></li>
</ul>
<blockquote>
<p>在 Python 社区，吉多被称为“仁慈的独裁者”</p>
</blockquote>
<h2 id="02-为什么选择-Python？"><a href="#02-为什么选择-Python？" class="headerlink" title="02. 为什么选择 Python？"></a>02. 为什么选择 Python？</h2><ul>
<li>代码量少</li>
<li>……</li>
</ul>
<blockquote>
<p>同一样问题，用不同的语言解决，代码量差距还是很多的，一般情况下 <code>Python</code> 是 <code>Java</code> 的 <strong>1/5</strong>，所以说 <strong>人生苦短，我用 Python</strong></p>
</blockquote>
<h2 id="03-Python-特点"><a href="#03-Python-特点" class="headerlink" title="03. Python 特点"></a>03. Python 特点</h2><ul>
<li><p>Python 是</p>
<p>完全面向对象的语言</p>
<ul>
<li><strong>函数</strong>、<strong>模块</strong>、<strong>数字</strong>、<strong>字符串</strong>都是对象，<strong>在 Python 中一切皆对象</strong></li>
<li>完全支持继承、重载、多重继承</li>
<li>支持重载运算符，也支持泛型设计</li>
</ul>
</li>
<li><p>Python <strong>拥有一个强大的标准库</strong>，Python 语言的核心只包含 <strong>数字</strong>、<strong>字符串</strong>、<strong>列表</strong>、<strong>字典</strong>、<strong>文件</strong> 等常见类型和函数，而由 Python 标准库提供了 <strong>系统管理</strong>、<strong>网络通信</strong>、<strong>文本处理</strong>、<strong>数据库接口</strong>、<strong>图形系统</strong>、<strong>XML 处理</strong> 等额外的功能</p>
</li>
<li><p>Python 社区提供了<strong>大量的第三方模块</strong>，使用方式与标准库类似。它们的功能覆盖 <strong>科学计算</strong>、<strong>人工智能</strong>、<strong>机器学习</strong>、<strong>Web 开发</strong>、<strong>数据库接口</strong>、<strong>图形系统</strong> 多个领域</p>
</li>
<li><p>请务必注意，Python程序是大小写敏感的，如果写错了大小写，程序会报错。</p>
</li>
</ul>
<h3 id="面向对象的思维方式"><a href="#面向对象的思维方式" class="headerlink" title="面向对象的思维方式"></a>面向对象的思维方式</h3><ul>
<li><strong>面向对象</strong> 是一种 <strong>思维方式</strong>，也是一门 <strong>程序设计技术</strong></li>
<li>要解决一个问题前，首先考虑由<strong>谁</strong>来做，怎么做事情是<strong>谁</strong>的职责，最后把事情做好就行！<ul>
<li><strong>对象</strong> 就是 <strong>谁</strong></li>
</ul>
</li>
<li>要解决复杂的问题，就可以找<strong>多个不同的对象</strong>，<strong>各司其职</strong>，共同实现，最终完成需求</li>
</ul>
<h2 id="04-Python-的优缺点"><a href="#04-Python-的优缺点" class="headerlink" title="04. Python 的优缺点"></a>04. Python 的优缺点</h2><h3 id="4-1-优点"><a href="#4-1-优点" class="headerlink" title="4.1 优点"></a>4.1 优点</h3><ul>
<li>简单、易学</li>
<li>免费、开源</li>
<li><strong>面向对象</strong></li>
<li>丰富的库</li>
<li>可扩展性<ul>
<li>如果需要一段关键代码运行得更快或者希望某些算法不公开，可以把这部分程序用 <code>C</code> 或 <code>C++</code> 编写，然后在 <code>Python</code> 程序中使用它们</li>
</ul>
</li>
<li>……</li>
</ul>
<h3 id="4-2-缺点"><a href="#4-2-缺点" class="headerlink" title="4.2 缺点"></a>4.2 缺点</h3><ul>
<li><p>运行速度</p>
</li>
<li><p>国内市场较小</p>
</li>
<li><p>中文资料匮乏</p>
<h1 id="python注释"><a href="#python注释" class="headerlink" title="python注释"></a>python注释</h1></li>
</ul>
<h2 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h2><ul>
<li>注释的作用</li>
<li>单行注释（行注释）</li>
<li>多行注释（块注释）</li>
</ul>
<h2 id="01-注释的作用"><a href="#01-注释的作用" class="headerlink" title="01. 注释的作用"></a>01. 注释的作用</h2><blockquote>
<p>使用用自己熟悉的语言，在程序中对某些代码进行标注说明，增强程序的可读性</p>
</blockquote>
<h2 id="02-单行注释-行注释"><a href="#02-单行注释-行注释" class="headerlink" title="02. 单行注释(行注释)"></a>02. 单行注释(行注释)</h2><ul>
<li>以 <code>#</code> 开头，<code>#</code> 右边的所有东西都被当做说明文字，而不是真正要执行的程序，只起到辅助说明作用</li>
<li>示例代码如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 这是第一个单行注释</span><br><span class="line">print(&quot;hello python&quot;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>为了保证代码的可读性，<code>#</code> 后面建议先添加一个空格，然后再编写相应的说明文字</p>
</blockquote>
<h3 id="在代码后面增加的单行注释"><a href="#在代码后面增加的单行注释" class="headerlink" title="在代码后面增加的单行注释"></a>在代码后面增加的单行注释</h3><ul>
<li>在程序开发时，同样可以使用 <code>#</code> 在代码的后面（旁边）增加说明性的文字</li>
<li>但是，需要注意的是，<strong>为了保证代码的可读性</strong>，<strong>注释和代码之间</strong> 至少要有 <strong>两个空格</strong></li>
<li>示例代码如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&quot;hello python&quot;)  # 输出 `hello python`</span><br></pre></td></tr></table></figure>

<h2 id="03-多行注释（块注释）"><a href="#03-多行注释（块注释）" class="headerlink" title="03. 多行注释（块注释）"></a>03. 多行注释（块注释）</h2><ul>
<li>如果希望编写的 <strong>注释信息很多，一行无法显示</strong>，就可以使用多行注释</li>
<li>要在 Python 程序中使用多行注释，可以用 <strong>一对 连续的 三个 引号</strong>(单引号和双引号都可以)</li>
<li>示例代码如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">这是一个多行注释</span><br><span class="line"></span><br><span class="line">在多行注释之间，可以写很多很多的内容……</span><br><span class="line">&quot;&quot;&quot; </span><br><span class="line">print(&quot;hello python&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="什么时候需要使用注释？"><a href="#什么时候需要使用注释？" class="headerlink" title="什么时候需要使用注释？"></a>什么时候需要使用注释？</h3><ol>
<li><strong>注释不是越多越好</strong>，对于一目了然的代码，不需要添加注释</li>
<li>对于 <strong>复杂的操作</strong>，应该在操作开始前写上若干行注释</li>
<li>对于 <strong>不是一目了然的代码</strong>，应在其行尾添加注释（为了提高可读性，注释应该至少离开代码 2 个空格）</li>
<li>绝不要描述代码，假设阅读代码的人比你更懂 Python，他只是不知道你的代码要做什么</li>
</ol>
<blockquote>
<p>在一些正规的开发团队，通常会有 <strong>代码审核</strong> 的惯例，就是一个团队中彼此阅读对方的代码</p>
</blockquote>
<h3 id="关于代码规范"><a href="#关于代码规范" class="headerlink" title="关于代码规范"></a>关于代码规范</h3><ul>
<li><code>Python</code> 官方提供有一系列 PEP（Python Enhancement Proposals） 文档</li>
<li>其中第 8 篇文档专门针对 <strong>Python 的代码格式</strong> 给出了建议，也就是俗称的 <strong>PEP 8</strong></li>
<li>文档地址：<a href="https://www.python.org/dev/peps/pep-0008/">https://www.python.org/dev/peps/pep-0008/</a></li>
<li>谷歌有对应的中文文档：<a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/">http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/</a></li>
</ul>
<blockquote>
<p>任何语言的程序员，编写出符合规范的代码，是开始程序生涯的第一步</p>
</blockquote>
<h1 id="第一个python程序"><a href="#第一个python程序" class="headerlink" title="第一个python程序"></a>第一个python程序</h1><h4 id="第一个Python程序"><a href="#第一个Python程序" class="headerlink" title="第一个Python程序"></a>第一个Python程序</h4><p>阅读: 2474073230</p>
<hr>
<p>在正式编写第一个Python程序前，我们先复习一下什么是命令行模式和Python交互模式。</p>
<h3 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h3><p>在Windows开始菜单选择“命令提示符”，就进入到命令行模式，它的提示符类似<code>C:\&gt;</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌────────────────────────────────────────────────────────┐</span><br><span class="line">│Command Prompt                                    - □ x │</span><br><span class="line">├────────────────────────────────────────────────────────┤</span><br><span class="line">│Microsoft Windows [Version 10.0.0]                      │</span><br><span class="line">│(c) 2015 Microsoft Corporation. All rights reserved.    │</span><br><span class="line">│                                                        │</span><br><span class="line">│C:\&gt; _                                                  │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>

<h3 id="Python交互模式"><a href="#Python交互模式" class="headerlink" title="Python交互模式"></a>Python交互模式</h3><p>在命令行模式下敲命令<code>python</code>，就看到类似如下的一堆文本输出，然后就进入到Python交互模式，它的提示符是<code>&gt;&gt;&gt;</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌────────────────────────────────────────────────────────┐</span><br><span class="line">│Command Prompt - python                           - □ x │</span><br><span class="line">├────────────────────────────────────────────────────────┤</span><br><span class="line">│Microsoft Windows [Version 10.0.0]                      │</span><br><span class="line">│(c) 2015 Microsoft Corporation. All rights reserved.    │</span><br><span class="line">│                                                        │</span><br><span class="line">│C:\&gt; python                                             │</span><br><span class="line">│Python 3.7 ... on win32                                 │</span><br><span class="line">│Type &quot;help&quot;, ... for more information.                  │</span><br><span class="line">│&gt;&gt;&gt; _                                                   │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>

<p>在Python交互模式下输入<code>exit()</code>并回车，就退出了Python交互模式，并回到命令行模式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌────────────────────────────────────────────────────────┐</span><br><span class="line">│Command Prompt                                    - □ x │</span><br><span class="line">├────────────────────────────────────────────────────────┤</span><br><span class="line">│Microsoft Windows [Version 10.0.0]                      │</span><br><span class="line">│(c) 2015 Microsoft Corporation. All rights reserved.    │</span><br><span class="line">│                                                        │</span><br><span class="line">│C:\&gt; python                                             │</span><br><span class="line">│Python 3.7 ... on win32                                 │</span><br><span class="line">│Type &quot;help&quot;, ... for more information.                  │</span><br><span class="line">│&gt;&gt;&gt; exit()                                              │</span><br><span class="line">│                                                        │</span><br><span class="line">│C:\&gt; _                                                  │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>

<p>也可以直接通过开始菜单选择<code>Python (command line)</code>菜单项，<em>直接进入</em>Python交互模式，但是输入<code>exit()</code>后窗口会直接关闭，不会回到命令行模式。</p>
<p>了解了如何启动和退出Python的交互模式，我们就可以正式开始编写Python代码了。</p>
<p>在写代码之前，请<em>千万不要</em>用“复制”-“粘贴”把代码从页面粘贴到你自己的电脑上。写程序也讲究一个感觉，你需要一个字母一个字母地把代码自己敲进去，在敲代码的过程中，初学者经常会敲错代码：拼写不对，大小写不对，混用中英文标点，混用空格和Tab键，所以，你需要仔细地检查、对照，才能以最快的速度掌握如何写程序。</p>
<p>在Python的交互式命令行写程序，好处是一下就能得到结果，坏处是没法保存，下次还想运行的时候，还得再敲一遍。</p>
<p>所以，实际开发的时候，我们总是使用一个文本编辑器来写代码，写完了，保存为一个文件，这样，程序就可以反复运行了。</p>
<p>现在，我们就把上次的<code>&#39;hello, world&#39;</code>程序用文本编辑器写出来，保存下来。</p>
<p>那么问题来了：文本编辑器到底哪家强？</p>
<p><strong>Visual Studio Code!</strong></p>
<p>我们推荐微软出品的<a href="https://code.visualstudio.com/">Visual Studio Code</a>，它不是那个大块头的Visual Studio，它是一个精简版的迷你Visual Studio，并且，Visual Studio Code可以跨！平！台！Windows、Mac和Linux通用。</p>
<p>请注意，<em>不要用Word和Windows自带的记事本</em>。Word保存的不是纯文本文件，而记事本会自作聪明地在文件开始的地方加上几个特殊字符（UTF-8 BOM），结果会导致程序运行出现莫名其妙的错误。</p>
<p>安装好文本编辑器后，输入以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&#x27;hello, world&#x27;)</span><br></pre></td></tr></table></figure>

<p>注意<code>print</code>前面不要有任何空格。然后，选择一个目录，例如<code>C:\work</code>，把文件保存为<code>hello.py</code>，就可以打开命令行窗口，把当前目录切换到<code>hello.py</code>所在目录，就可以运行这个程序了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\work&gt; python hello.py</span><br><span class="line">hello, world</span><br></pre></td></tr></table></figure>

<p>也可以保存为别的名字，比如<code>first.py</code>，但是必须要以<code>.py</code>结尾，其他的都不行。此外，文件名只能是英文字母、数字和下划线的组合。</p>
<p>如果当前目录下没有<code>hello.py</code>这个文件，运行<code>python hello.py</code>就会报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\IEUser&gt; python hello.py</span><br><span class="line">python: can&#x27;t open file &#x27;hello.py&#x27;: [Errno 2] No such file or directory</span><br></pre></td></tr></table></figure>

<h1 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h1><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>用<code>print()</code>在括号中加上字符串，就可以向屏幕上输出指定的文字。比如输出<code>&#39;hello, world&#39;</code>，用代码实现如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&#x27;hello, world&#x27;)</span><br></pre></td></tr></table></figure>

<p><code>print()</code>函数也可以接受多个字符串，用逗号“,”隔开，就可以连成一串输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&#x27;The quick brown fox&#x27;, &#x27;jumps over&#x27;, &#x27;the lazy dog&#x27;)</span><br><span class="line">The quick brown fox jumps over the lazy dog</span><br></pre></td></tr></table></figure>

<p><code>print()</code>会依次打印每个字符串，遇到逗号“,”会输出一个空格，因此，输出的字符串是这样拼起来的：</p>
<p><img src="/2022/02/06/python-learning/index/l.png" alt="print-explain"></p>
<p><code>print()</code>也可以打印整数，或者计算结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(300)</span><br><span class="line">300</span><br><span class="line">&gt;&gt;&gt; print(100 + 200)</span><br><span class="line">300</span><br></pre></td></tr></table></figure>

<p>因此，我们可以把计算<code>100 + 200</code>的结果打印得更漂亮一点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&#x27;100 + 200 =&#x27;, 100 + 200)</span><br><span class="line">100 + 200 = 300</span><br></pre></td></tr></table></figure>

<p>注意，对于<code>100 + 200</code>，Python解释器自动计算出结果<code>300</code>，但是，<code>&#39;100 + 200 =&#39;</code>是字符串而非数学公式，Python把它视为字符串，请自行解释上述打印结果。</p>
<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>现在，你已经可以用<code>print()</code>输出你想要的结果了。但是，如果要让用户从电脑输入一些字符怎么办？Python提供了一个<code>input()</code>，可以让用户输入字符串，并存放到一个变量里。比如输入用户的名字：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; name = input()</span><br><span class="line">Michael</span><br></pre></td></tr></table></figure>

<p>当你输入<code>name = input()</code>并按下回车后，Python交互式命令行就在等待你的输入了。这时，你可以输入任意字符，然后按回车后完成输入。</p>
<p>输入完成后，不会有任何提示，Python交互式命令行又回到<code>&gt;&gt;&gt;</code>状态了。那我们刚才输入的内容到哪去了？答案是存放到<code>name</code>变量里了。可以直接输入<code>name</code>查看变量内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; name</span><br><span class="line">&#x27;Michael&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>什么是变量？</strong>请回忆初中数学所学的代数基础知识：</p>
<p>设正方形的边长为<code>a</code>，则正方形的面积为<code>a x a</code>。把边长<code>a</code>看做一个变量，我们就可以根据<code>a</code>的值计算正方形的面积，比如：</p>
<p>若a=2，则面积为a x a = 2 x 2 = 4；</p>
<p>若a=3.5，则面积为a x a = 3.5 x 3.5 = 12.25。</p>
<p>在计算机程序中，变量不仅可以为整数或浮点数，还可以是字符串，因此，<code>name</code>作为一个变量就是一个字符串。</p>
<p>要打印出<code>name</code>变量的内容，除了直接写<code>name</code>然后按回车外，还可以用<code>print()</code>函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(name)</span><br><span class="line">Michael</span><br></pre></td></tr></table></figure>

<p>有了输入和输出，我们就可以把上次打印<code>&#39;hello, world&#39;</code>的程序改成有点意义的程序了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name = input()</span><br><span class="line">print(&#x27;hello,&#x27;, name)</span><br></pre></td></tr></table></figure>

<p>运行上面的程序，第一行代码会让用户输入任意字符作为自己的名字，然后存入<code>name</code>变量中；第二行代码会根据用户的名字向用户说<code>hello</code>，比如输入<code>Michael</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Workspace&gt; python hello.py</span><br><span class="line">Michael</span><br><span class="line">hello, Michael</span><br></pre></td></tr></table></figure>

<p>但是程序运行的时候，没有任何提示信息告诉用户：“嘿，赶紧输入你的名字”，这样显得很不友好。幸好，<code>input()</code>可以让你显示一个字符串来提示用户，于是我们把代码改成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name = input(&#x27;please enter your name: &#x27;)</span><br><span class="line">print(&#x27;hello,&#x27;, name)</span><br></pre></td></tr></table></figure>

<p>再次运行这个程序，你会发现，程序一运行，会首先打印出<code>please enter your name:</code>，这样，用户就可以根据提示，输入名字后，得到<code>hello, xxx</code>的输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Workspace&gt; python hello.py</span><br><span class="line">please enter your name: Michael</span><br><span class="line">hello, Michael</span><br></pre></td></tr></table></figure>

<p>每次运行该程序，根据用户输入的不同，输出结果也会不同。</p>
<p>在命令行下，输入和输出就是这么简单。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>任何计算机程序都是为了执行一个特定的任务，有了输入，用户才能告诉计算机程序所需的信息，有了输出，程序运行后才能告诉用户任务的结果。</p>
<p>输入是Input，输出是Output，因此，我们把输入输出统称为Input/Output，或者简写为IO。</p>
<p><code>input()</code>和<code>print()</code>是在命令行下面最基本的输入和输出，但是，用户也可以通过其他更高级的图形界面完成输入和输出，比如，在网页上的一个文本框输入自己的名字，点击“确定”后在网页上看到输出信息。</p>
<h1 id="数据类型和变量"><a href="#数据类型和变量" class="headerlink" title="数据类型和变量"></a>数据类型和变量</h1><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>计算机顾名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。但是，计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在Python中，能够直接处理的数据类型有以下几种：</p>
<h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><p>Python可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：<code>1</code>，<code>100</code>，<code>-8080</code>，<code>0</code>，等等。</p>
<p>计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用<code>0x</code>前缀和0-9，a-f表示，例如：<code>0xff00</code>，<code>0xa5b4c3d2</code>，等等。</p>
<p>对于很大的数，例如<code>10000000000</code>，很难数清楚0的个数。Python允许在数字中间以<code>_</code>分隔，因此，写成<code>10_000_000_000</code>和<code>10000000000</code>是完全一样的。十六进制数也可以写成<code>0xa1b2_c3d4</code>。</p>
<h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x109和12.3x108是完全相等的。浮点数可以用数学写法，如<code>1.23</code>，<code>3.14</code>，<code>-9.01</code>，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x109就是<code>1.23e9</code>，或者<code>12.3e8</code>，0.000012可以写成<code>1.2e-5</code>，等等。</p>
<p>整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。</p>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>字符串是以单引号<code>&#39;</code>或双引号<code>&quot;</code>括起来的任意文本，比如<code>&#39;abc&#39;</code>，<code>&quot;xyz&quot;</code>等等。请注意，<code>&#39;&#39;</code>或<code>&quot;&quot;</code>本身只是一种表示方式，不是字符串的一部分，因此，字符串<code>&#39;abc&#39;</code>只有<code>a</code>，<code>b</code>，<code>c</code>这3个字符。如果<code>&#39;</code>本身也是一个字符，那就可以用<code>&quot;&quot;</code>括起来，比如<code>&quot;I&#39;m OK&quot;</code>包含的字符是<code>I</code>，<code>&#39;</code>，<code>m</code>，空格，<code>O</code>，<code>K</code>这6个字符。</p>
<p>如果字符串内部既包含<code>&#39;</code>又包含<code>&quot;</code>怎么办？可以用**转义字符<code>\</code>**来标识，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;I\&#x27;m \&quot;OK\&quot;!&#x27;</span><br></pre></td></tr></table></figure>

<p>表示的字符串内容是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I&#x27;m &quot;OK&quot;!</span><br></pre></td></tr></table></figure>

<p>转义字符<code>\</code>可以转义很多字符，比如<code>\n</code>表示换行，<code>\t</code>表示制表符，字符<code>\</code>本身也要转义，所以<code>\\</code>表示的字符就是<code>\</code>，可以在Python的交互式命令行用<code>print()</code>打印字符串看看：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&#x27;I\&#x27;m ok.&#x27;)</span><br><span class="line">I&#x27;m ok.</span><br><span class="line">&gt;&gt;&gt; print(&#x27;I\&#x27;m learning\nPython.&#x27;)</span><br><span class="line">I&#x27;m learning</span><br><span class="line">Python.</span><br><span class="line">&gt;&gt;&gt; print(&#x27;\\\n\\&#x27;)</span><br><span class="line">\</span><br><span class="line">\</span><br></pre></td></tr></table></figure>

<p>如果字符串里面有很多字符都需要转义，就需要加很多<code>\</code>，为了简化，<strong>Python还允许用<code>r&#39;&#39;</code>表示<code>&#39;&#39;</code>内部的字符串默认不转义</strong>，可以自己试试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&#x27;\\\t\\&#x27;)</span><br><span class="line">\       \</span><br><span class="line">&gt;&gt;&gt; print(r&#x27;\\\t\\&#x27;)</span><br><span class="line">\\\t\\</span><br></pre></td></tr></table></figure>

<p>如果字符串内部有很多换行，用<code>\n</code>写在一行里不好阅读，为了简化，Python允许用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>的格式表示多行内容，可以自己试试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&#x27;&#x27;&#x27;line1</span><br><span class="line">... line2</span><br><span class="line">... line3&#x27;&#x27;&#x27;)</span><br><span class="line">line1</span><br><span class="line">line2</span><br><span class="line">line3</span><br></pre></td></tr></table></figure>

<p>上面是在交互式命令行内输入，注意在输入多行内容时，提示符由<code>&gt;&gt;&gt;</code>变为<code>...</code>，提示你可以接着上一行输入，注意<code>...</code>是提示符，不是代码的一部分：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌────────────────────────────────────────────────────────┐</span><br><span class="line">│Command Prompt - python                           _ □ x │</span><br><span class="line">├────────────────────────────────────────────────────────┤</span><br><span class="line">│&gt;&gt;&gt; print(&#x27;&#x27;&#x27;line1                                      │</span><br><span class="line">│... line2                                               │</span><br><span class="line">│... line3&#x27;&#x27;&#x27;)                                           │</span><br><span class="line">│line1                                                   │</span><br><span class="line">│line2                                                   │</span><br><span class="line">│line3                                                   │</span><br><span class="line">│                                                        │</span><br><span class="line">│&gt;&gt;&gt; _                                                   │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>

<p>当输入完结束符`````和括号<code>)</code>后，执行该语句并打印结果。</p>
<p>如果写成程序并存为<code>.py</code>文件，就是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&#x27;&#x27;&#x27;line1</span><br><span class="line">line2</span><br><span class="line">line3&#x27;&#x27;&#x27;)</span><br></pre></td></tr></table></figure>

<p><img src="/2022/02/06/python-learning/index/image-20220206114546466.png" alt="image-20220206114546466"></p>
<h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h4><p>布尔值和布尔代数的表示完全一致，<strong>一个布尔值只有<code>True</code>、<code>False</code>两种值</strong>，要么是<code>True</code>，要么是<code>False</code>，在Python中，可以直接用<code>True</code>、<code>False</code>表示布尔值（请注意大小写），也可以通过布尔运算计算出来：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; True</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; False</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; 3 &gt; 2</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; 3 &gt; 5</span><br><span class="line">False</span><br></pre></td></tr></table></figure>

<p>布尔值可以用<code>and</code>、<code>or</code>和<code>not</code>运算。</p>
<p><code>and</code>运算是与运算，只有所有都为<code>True</code>，<code>and</code>运算结果才是<code>True</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; True and True</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; True and False</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; False and False</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; 5 &gt; 3 and 3 &gt; 1</span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<p><code>or</code>运算是或运算，只要其中有一个为<code>True</code>，<code>or</code>运算结果就是<code>True</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; True or True</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; True or False</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; False or False</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; 5 &gt; 3 or 1 &gt; 3</span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<p><code>not</code>运算是非运算，它是一个单目运算符，把<code>True</code>变成<code>False</code>，<code>False</code>变成<code>True</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; not True</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; not False</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; not 1 &gt; 2</span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<p>布尔值经常用在条件判断中，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if age &gt;= 18:</span><br><span class="line">    print(&#x27;adult&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;teenager&#x27;)</span><br></pre></td></tr></table></figure>

<h4 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h4><p>空值是Python里一个特殊的值，用<code>None</code>表示。<code>None</code>不能理解为<code>0</code>，因为<code>0</code>是有意义的，而<code>None</code>是一个特殊的空值。</p>
<p>此外，Python还提供了列表、字典等多种数据类型，还允许创建自定义数据类型，我们后面会继续讲到。</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量的概念基本上和初中代数的方程变量是一致的，只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。</p>
<p>变量在程序中就是用一个变量名表示了，变量名必须是大小写英文、数字和<code>_</code>的组合，且不能用数字开头，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = 1</span><br></pre></td></tr></table></figure>

<p>变量<code>a</code>是一个整数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t_007 = &#x27;T007&#x27;</span><br></pre></td></tr></table></figure>

<p>变量<code>t_007</code>是一个字符串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Answer = True</span><br></pre></td></tr></table></figure>

<p>变量<code>Answer</code>是一个布尔值<code>True</code>。</p>
<p>在Python中，等号<code>=</code>是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，<strong>而且可以是不同类型的变量</strong></p>
<p>这种变量本身类型不固定的语言称之为<em>动态语言</em>，与之对应的是<em>静态语言</em>。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下（// 表示注释）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a = 123; // a是整数类型变量</span><br><span class="line">a = &quot;ABC&quot;; // 错误：不能把字符串赋给整型变量</span><br></pre></td></tr></table></figure>

<p>和静态语言相比，动态语言更灵活，就是这个原因。</p>
<p>最后，理解变量在计算机内存中的表示也非常重要。当我们写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = &#x27;ABC&#x27;</span><br></pre></td></tr></table></figure>

<p>时，Python解释器干了两件事情：</p>
<ol>
<li>在内存中创建了一个<code>&#39;ABC&#39;</code>的字符串；</li>
<li>在内存中创建了一个名为<code>a</code>的变量，并把它指向<code>&#39;ABC&#39;</code>。</li>
</ol>
<p>也可以把一个变量<code>a</code>赋值给另一个变量<code>b</code>，这个操作实际上是<strong>把变量<code>b</code>指向变量<code>a</code>所指向的数据</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = &#x27;ABC&#x27;</span><br><span class="line">b = a</span><br><span class="line">a = &#x27;XYZ&#x27;</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>

<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，通常用全部大写的变量名表示常量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PI = 3.14159265359</span><br></pre></td></tr></table></figure>

<p>但事实上<code>PI</code>仍然是一个变量，Python根本没有任何机制保证<code>PI</code>不会被改变，所以，<strong>用全部大写的变量名表示常量只是一个习惯上的用法</strong>，如果你一定要改变变量<code>PI</code>的值，也没人能拦住你。</p>
<p>最后解释一下整数的除法为什么也是精确的。在Python中，有两种除法，一种除法是<code>/</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; 10 / 3</span><br><span class="line">3.3333333333333335</span><br></pre></td></tr></table></figure>

<p><code>/</code>除法计算结果是<strong>浮点数</strong>，即使是<strong>两个整数恰好整除，结果也是浮点数</strong>：（后面.0）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; 9 / 3</span><br><span class="line">3.0</span><br></pre></td></tr></table></figure>

<p>还有一种除法是<code>//</code>，称为<strong>地板除</strong>，<strong>两个整数的除法仍然是整数</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; 10 // 3</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<p>你没有看错，整数的地板除<code>//</code>永远是整数，即使除不尽。要做精确的除法，使用<code>/</code>就可以。</p>
<p>因为<code>//</code>除法只取结果的整数部分，所以Python还提供一个余数运算，可以得到两个整数相除的余数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; 10 % 3</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<p>无论整数做<code>//</code>除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的。</p>
<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>Python支持多种数据类型，在计算机内部，可以把任何数据都看成一个“对象”，而变量就是在程序中用来指向这些数据对象的，对变量赋值就是把数据和变量给关联起来。</p>
<p>对变量赋值<code>x = y</code>是把变量<code>x</code>指向真正的对象，该对象是变量<code>y</code>所指向的。随后对变量<code>y</code>的赋值<em>不影响</em>变量<code>x</code>的指向。</p>
<p>注意：<strong>Python的整数没有大小限制</strong>，而某些语言的整数根据其存储长度是有大小限制的，例如Java对32位整数的范围限制在<code>-2147483648</code>-<code>2147483647</code>。</p>
<p><strong>Python的浮点数也没有大小限制</strong>，但是超出一定范围就直接表示为**<code>inf</code>（无限大）**。</p>
<h1 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h1><p>我们已经讲过了，字符串也是一种数据类型，但是，字符串比较特殊的是还有一个编码问题。</p>
<p>因为<strong>计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理</strong>。最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是255（二进制11111111=十进制255），如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是<code>65535</code>，4个字节可以表示的最大整数是<code>4294967295</code>。</p>
<p>由于计算机是美国人发明的，因此，<strong>最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号</strong>，这个编码表被称为<strong>ASCII</strong><code>编码，比如大写字母</code>A<code>的编码是</code>65<code>，小写字母</code>z<code>的编码是</code>122`。</p>
<p>但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，<strong>中国制定了<code>GB2312</code>编码，用来把中文编进去</strong>。</p>
<p>你可以想得到的是，全世界有上百种语言，日本把日文编到<code>Shift_JIS</code>里，韩国把韩文编到<code>Euc-kr</code>里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在<strong>多语言混合的文本中，显示出来会有乱码</strong>。</p>
<p><img src="/2022/02/06/python-learning/index/0.png" alt="char-encoding-problem"></p>
<p>因此，Unicode字符集应运而生。<strong>Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了</strong>。</p>
<p>Unicode标准也在不断发展，但最常用的是UCS-16编码，用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。</p>
<p>现在，捋一捋ASCII编码和Unicode编码的区别：ASCII编码是1个字节，而Unicode编码通常是2个字节。</p>
<p>字母<code>A</code>用ASCII编码是十进制的<code>65</code>，二进制的<code>01000001</code>；</p>
<p>字符<code>0</code>用ASCII编码是十进制的<code>48</code>，二进制的<code>00110000</code>，注意字符<code>&#39;0&#39;</code>和整数<code>0</code>是不同的；</p>
<p>汉字<code>中</code>已经超出了ASCII编码的范围，用Unicode编码是十进制的<code>20013</code>，二进制的<code>01001110 00101101</code>。</p>
<p>你可以猜测，如果把ASCII编码的<code>A</code>用Unicode编码，只需要在前面补0就可以，因此，<code>A</code>的Unicode编码是<code>00000000 01000001</code>。</p>
<p>新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。</p>
<p>所以，本着节约的精神，又出现了把Unicode编码转化为“<strong>可变长编码”的<code>UTF-8</code>编码</strong>。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。<strong>如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间</strong>：</p>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">ASCII</th>
<th align="left">Unicode</th>
<th align="left">UTF-8</th>
</tr>
</thead>
<tbody><tr>
<td align="left">A</td>
<td align="left">01000001</td>
<td align="left">00000000 01000001</td>
<td align="left">01000001</td>
</tr>
<tr>
<td align="left">中</td>
<td align="left">x</td>
<td align="left">01001110 00101101</td>
<td align="left">11100100 10111000 10101101</td>
</tr>
</tbody></table>
<p>从上面的表格还可以发现，UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。</p>
<p>搞清楚了ASCII、Unicode和UTF-8的关系，我们就可以总结一下现在计算机系统通用的字符编码工作方式：</p>
<p><strong>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码</strong>。</p>
<p>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件。</p>
<p>浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器。</p>
<p>所以你看到很多网页的源码上会有类似<code>&lt;meta charset=&quot;UTF-8&quot; /&gt;</code>的信息，表示该网页正是用的UTF-8编码。</p>
<h3 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h3><p>搞清楚了令人头疼的字符编码问题后，我们再来研究Python的字符串。</p>
<p>在最新的Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&#x27;包含中文的str&#x27;)</span><br><span class="line">包含中文的str</span><br></pre></td></tr></table></figure>

<p>对于单个字符的编码，Python提供了**<code>ord()</code>函数获取字符的整数表示<strong>，</strong><code>chr()</code>函数把编码转换为对应的字符**：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; ord(&#x27;A&#x27;)</span><br><span class="line">65</span><br><span class="line">&gt;&gt;&gt; ord(&#x27;中&#x27;)</span><br><span class="line">20013</span><br><span class="line">&gt;&gt;&gt; chr(66)</span><br><span class="line">&#x27;B&#x27;</span><br><span class="line">&gt;&gt;&gt; chr(25991)</span><br><span class="line">&#x27;文&#x27;</span><br></pre></td></tr></table></figure>

<p>如果知道字符的整数编码，还可以用十六进制这么写<code>str</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; &#x27;\u4e2d\u6587&#x27;</span><br><span class="line">&#x27;中文&#x27;</span><br></pre></td></tr></table></figure>

<p>两种写法完全是等价的。</p>
<p>由于Python的字符串类型是<code>str</code>，在内存中以Unicode表示，<strong>一个字符对应若干个字节</strong>。如果要在网络上传输，或者保存到磁盘上，**就需要把<code>str</code>变为以字节为单位的<code>bytes</code>**。</p>
<p>Python对<code>bytes</code>类型的数据用带<code>b</code>前缀的单引号或双引号表示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x = b&#x27;ABC&#x27;</span><br></pre></td></tr></table></figure>

<p>要注意区分<code>&#39;ABC&#39;</code>和<code>b&#39;ABC&#39;</code>，前者是<code>str</code>，<strong>后者虽然内容显示得和前者一样，但<code>bytes</code>的每个字符都只占用一个字节</strong>。(也就是ASCII码)</p>
<p>以Unicode表示的<code>str</code>通过**<code>encode()</code>方法可以编码为指定的<code>bytes</code>**，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; &#x27;ABC&#x27;.encode(&#x27;ascii&#x27;)</span><br><span class="line">b&#x27;ABC&#x27;</span><br><span class="line">&gt;&gt;&gt; &#x27;中文&#x27;.encode(&#x27;utf-8&#x27;)</span><br><span class="line">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span><br><span class="line">&gt;&gt;&gt; &#x27;中文&#x27;.encode(&#x27;ascii&#x27;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">UnicodeEncodeError: &#x27;ascii&#x27; codec can&#x27;t encode characters in position 0-1: ordinal not in range(128)</span><br></pre></td></tr></table></figure>

<p>纯英文的<code>str</code>可以用<code>ASCII</code>编码为<code>bytes</code>，内容是一样的，含有中文的<code>str</code>可以用<code>UTF-8</code>编码为<code>bytes</code>。含有中文的<code>str</code>无法用<code>ASCII</code>编码，因为中文编码的范围超过了<code>ASCII</code>编码的范围，Python会报错。</p>
<p><strong>在<code>bytes</code>中，无法显示为ASCII字符的字节，用<code>\x##</code>显示</strong>。</p>
<p>反过来，如果我们从<strong>网络或磁盘</strong>上读取了字节流，那么**读到的数据就是<code>bytes</code>**。要把<code>bytes</code>变为<code>str</code>，就需要用<code>decode()</code>方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; b&#x27;ABC&#x27;.decode(&#x27;ascii&#x27;)</span><br><span class="line">&#x27;ABC&#x27;</span><br><span class="line">&gt;&gt;&gt; b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;.decode(&#x27;utf-8&#x27;)</span><br><span class="line">&#x27;中文&#x27;</span><br></pre></td></tr></table></figure>

<p>如果<code>bytes</code>中包含无法解码的字节，<code>decode()</code>方法会报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; b&#x27;\xe4\xb8\xad\xff&#x27;.decode(&#x27;utf-8&#x27;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">UnicodeDecodeError: &#x27;utf-8&#x27; codec can&#x27;t decode byte 0xff in position 3: invalid start byte</span><br></pre></td></tr></table></figure>

<p>如果<code>bytes</code>中只有一小部分无效的字节，可以传入<code>errors=&#39;ignore&#39;</code>忽略错误的字节：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; b&#x27;\xe4\xb8\xad\xff&#x27;.decode(&#x27;utf-8&#x27;, errors=&#x27;ignore&#x27;)</span><br><span class="line">&#x27;中&#x27;</span><br></pre></td></tr></table></figure>

<p>要计算<code>str</code>包含多少个字符，可以用<code>len()</code>函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; len(&#x27;ABC&#x27;)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; len(&#x27;中文&#x27;)</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<p><code>len()</code>函数计算的是<code>str</code>的字符数，如果换成<code>bytes</code>，<code>len()</code>函数就计算字节数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; len(b&#x27;ABC&#x27;)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; len(b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;)</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; len(&#x27;中文&#x27;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">6</span><br></pre></td></tr></table></figure>

<p>可见，1个中文字符经过UTF-8编码后通常会占用3个字节，而1个英文字符只占用1个字节。</p>
<p>在操作字符串时，我们经常遇到<code>str</code>和<code>bytes</code>的互相转换。为了避免乱码问题，应当始终坚持使用UTF-8编码对<code>str</code>和<code>bytes</code>进行转换。</p>
<p>由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：</p>
<p>参考文献：</p>
<p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017063413904832">廖雪峰的python教程</a></p>
<p><a href="https://jomeswang.github.io/posts/4c8d96c5/">旺旺学长的博客</a></p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>《白帽子讲web安全》reading note</title>
    <url>/2022/02/06/%E3%80%8A%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8%E3%80%8Breading-note/index.html</url>
    <content><![CDATA[<p>闲来无事扰看看书</p>
<a id="more"></a>

<h1 id="世界观安全-安全基础知识"><a href="#世界观安全-安全基础知识" class="headerlink" title="世界观安全 安全基础知识"></a>世界观安全 安全基础知识</h1><p>吴澜清的安全世界观就是：互联网本来是安全的，自从有了研究安全的人之后，互联网就变得不安全了。</p>
<p>对现代计算机系统来说，在用户态的最高权限是root（administrator）就是黑客们渴望获取的系统最高权限。</p>
<p>黑客们使用的漏洞利用代码，被称为“exploit”。有的黑客精通计算机技术，能自己挖掘漏洞，并编写exploit;而有的黑客，则只对攻击本身感兴趣，对计算机原理和编程技术的了解比较粗浅，只懂得编译别人代码，自己并没有动手能力，称为“脚本小子”。主要搞破坏的，还是这些脚本小子。</p>
<p>PHP语言至今仍然只能靠较好的代码规范来保证没有文件包含漏洞，无法从语言本身杜绝此类安全问题的发生。</p>
<p>SQL注入时web安全史上的一个里程碑。通过SQL注入，可以获取很多重要的、敏感的数据，甚至能够通过数据库获取系统访问权限，这种效果并不比直接攻击系统软件差。</p>
<p>xss（跨站脚本攻击）</p>
<p>安全三要素是安全的基本组成元素，分别是机密性、完整性、可用性。</p>
<p>机密性要求保护数据内容不能泄露，加密是实现机密性要求的常见手段。完整性则要求保护数据内容是完整。没有被篡改的。</p>
<p>完整性则要求保护数据内容是完整的、没有被篡改的。常见的保证一致性的技术手段是数字签名。</p>
<p>可用性要求保护资源是“随需而得”。</p>
<h1 id="威胁分析"><a href="#威胁分析" class="headerlink" title="威胁分析"></a>威胁分析</h1><p>威胁分析就是把所有威胁都找出来，使用一个模型，帮助我们去想，如STRIDE模型，</p>
<p><img src="/2022/02/06/%E3%80%8A%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8%E3%80%8Breading-note/index/image-20220206104750237.png" alt="image-20220206104750237"></p>
<p>但是在维护系统安全时，最让安全工程师沮丧的事情就是花费很多时间与精力实施安全方案，但是攻击者却利用了事先完全没有想到的漏洞（漏洞的定义：系统中可能被威胁利用以造成危害的地方。）完成入侵。</p>
]]></content>
      <categories>
        <category>web安全入门</category>
      </categories>
      <tags>
        <tag>reading-notes</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>人文社科读书笔记</title>
    <url>/2022/02/05/%E4%BA%BA%E6%96%87%E7%A4%BE%E7%A7%91%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/index.html</url>
    <content><![CDATA[<p>虽然我是工科生，可又怎么能割舍掉内心对人文的热爱呢？</p>
<a id="more"></a>

<h1 id="《乡土中国》"><a href="#《乡土中国》" class="headerlink" title="《乡土中国》"></a>《乡土中国》</h1><p>我们的民族是和泥土分不开的。“乡下人离不了泥土，因为在乡下住，种地是最普通的谋生方法。”就算是到了适宜游牧生活的美国大草原，中原人也依然会一家划一方地，种植起来；真像是往土里一钻，看不到其他利用这块地的方法了。写到这里，费孝通先生很有一些恨铁不成钢地写道“现在很有些飞不上天地样子”。</p>
<p>但更多的时候，他是在客观地分析为何中国人（尤其是乡下人）土气：农业和游牧或工业不同，它是直接取资于土地的。游牧的人可以逐水草而居，飘忽无定；做工业的人可以择地而居，迁移无碍；而种地的人却搬不动地，长在土里的庄稼行动不得，侍候庄稼的老农也像是半截身子插入了泥土里，土气是因为不流动而发生的。</p>
<p>因为土地，所以显得扎根于泥土中；因为土地，更解释了为什么中国人选择带着地球一起去流浪，而不是像一些美国史诗一样，只顾自己的逃亡。</p>
<p>但是，更加有趣的是，人口必然会增加，一块地上只要几代人的繁殖，人口就到了饱和点，过剩的人口要养活，就必须拿起锄头去开辟新地。然后他们又形成一个小小的家族殖民地，找不到土地的就在各式各样的命运中被淘汰了，或是“发迹了”，去到城镇，然后开启一种新的生活。</p>
<p>乡土社会在地方性的限制下成了生于斯、死于斯的社会。就像我们所说的落叶归根。这是一个熟悉的社会，没有陌生人的社会。</p>
<p>在社会学里，我们常分出两种不同性质的社会，一种并没有具体目的，只是因为在一起生长而发生的社会，一种是为了要完成一件任务而结合的社会、用涂尔干的话说，前者是“有机的团结”，后者是“机械的团结”，前者是礼俗社会，后者是法理社会。乡民们平素所接触的是生而与俱的人物，正像我们的父母兄弟一般，并不是由于我们选择得来的关系，而是先我们而在的一个环境。</p>
<p>乡土社会从熟悉里得到了信任。“我们大家是熟人，打个招呼就是了，还用得着多说吗？”现代社会是陌生人的社会，各人不知道各人的底细，所以要说得明明白白，还怕赖账，所以签个字，画个押，这样就发生了法律了。熟人社会是不需要法律得，大家都互相信任，欺骗了，他得名声就臭了，以后再也不能在这篇土地上立足，只能蝇营狗苟地生活下去，代价其实是很大的。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>life</tag>
        <tag>碎碎念</tag>
      </tags>
  </entry>
  <entry>
    <title>life trivia</title>
    <url>/2022/02/05/%E5%94%87%E9%87%89%E5%92%8C%E5%8F%A3%E7%BA%A2%E7%9A%84%E5%8C%BA%E5%88%AB/index.html</url>
    <content><![CDATA[<h1 id="唇釉和口红的区别"><a href="#唇釉和口红的区别" class="headerlink" title="唇釉和口红的区别"></a>唇釉和口红的区别</h1><p>给直男（指我自己）讲一下有什么区别</p>
<a id="more"></a>

<p>什么？居然有直男觉得唇釉和口红是一个东西？</p>
<p><img src="/2022/02/05/%E5%94%87%E9%87%89%E5%92%8C%E5%8F%A3%E7%BA%A2%E7%9A%84%E5%8C%BA%E5%88%AB/index/image-20220204235559464.png" alt="image-20220204235559464"></p>
<p><img src="/2022/02/05/%E5%94%87%E9%87%89%E5%92%8C%E5%8F%A3%E7%BA%A2%E7%9A%84%E5%8C%BA%E5%88%AB/index/image-20220204235619899.png" alt="image-20220204235619899"></p>
<p>首先，唇釉相当于是液体的口红。</p>
<p>其次，效果当然是不一样的。</p>
<p><img src="/2022/02/05/%E5%94%87%E9%87%89%E5%92%8C%E5%8F%A3%E7%BA%A2%E7%9A%84%E5%8C%BA%E5%88%AB/index/image-20220204235753733.png" alt="image-20220204235753733"></p>
<p>看这张图他哪里一样了？</p>
<p>唇釉可以晕染，口红，你说怎么晕染？</p>
<p>晕染了会变血红大口的。</p>
<p>但是口红需要经常补，唇釉不用，因为唇釉是直接成膜然后覆在嘴唇上面。</p>
<p>看看知乎的分析：</p>
<p>作者：骆先森<br>链接：<a href="https://zhuanlan.zhihu.com/p/388778829">https://zhuanlan.zhihu.com/p/388778829</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<p><strong>唇釉与口红有什么区别</strong></p>
<p>　　<strong>1.质地</strong></p>
<p>　　口红属于固体膏状，采用圆管的包装，看起来就像一只粗短的蜡笔；</p>
<p>　　唇釉属于液体状，它的液体并不清澈，显得有点粘稠。采用灌装包装，自带唇刷。</p>
<p>　　<strong>2.滋润度</strong></p>
<p>　　口红的滋润度各有不同，有偏干、也有较为滋润的，但是唇釉的滋润度是一定高于口红的。</p>
<p>　　即便是滋润型口红的滋润度也不及唇釉。</p>
<p>　　<strong>3.显色度</strong></p>
<p>　　专业性的口红显色度比较好，滋润型口红显色度差；</p>
<p>　　唇釉的显色度则普遍不错，尤其是欧美的唇釉。</p>
<p>　　<strong>4.上妆/补妆</strong></p>
<p>　　口红在上妆时比较麻烦，但后续补妆非常方便，用纸巾擦拭掉之前的口红再重新上一层即可；</p>
<p>　　唇釉在上妆时十分方便，但脱落后就很难擦拭掉再涂一层，涂太厚也容易起皮。</p>
<p>　　<strong>5.使用方法</strong></p>
<p>　　口红使用时先用润唇膏进行打底，再将口红膏体旋转出来，根据自己想要的效果进行涂抹；</p>
<p>　　唇釉主要靠唇刷涂抹，借助唇刷这个载体将液体涂抹在唇部上。</p>
<p>　　<strong>6.使用感受</strong></p>
<p>　　口红质地较为干硬，使用时不容易涂抹开，涂抹后唇部皮肤也容易干燥，更容易脱妆；</p>
<p>　　唇釉属于液体口红，使用时比较容易涂抹，质地也会水润许多。</p>
<p> 　<strong>建议买口红还是买唇釉</strong></p>
<p>　　买口红还是买唇釉主要根据个人喜好、妆感等来决定。</p>
<p>　　如果想要上嘴舒服、补妆方便、质地滋润，那可以选择口红；如果想要持久度高、颜色鲜艳饱满，那就选择唇釉。</p>
<p>　　新手如果要购买的话建议买口红，口红是固态的质地，方便涂抹且上色均匀，而唇釉为液体状，不容易掌握取用的度， 容易导致涂抹过多。</p>
<p>镜面唇釉，个人不太喜欢，像抹了油似的</p>
<p><img src="/2022/02/05/%E5%94%87%E9%87%89%E5%92%8C%E5%8F%A3%E7%BA%A2%E7%9A%84%E5%8C%BA%E5%88%AB/index/image-20220205000723575.png" alt="image-20220205000723575"></p>
<p>丝绒唇釉就真的是yyds了！很戳我审美点！</p>
<p>就是说，一般是建议口红，涂抹方便易于携带，可以随时补妆；但如果你喜欢唇釉的雾感，那就再买一支唇釉吧。</p>
<p>直女建议一支口红一支唇釉就够了，买太多是浪费钱。</p>
<h1 id="直男行为图鉴"><a href="#直男行为图鉴" class="headerlink" title="直男行为图鉴"></a>直男行为图鉴</h1><p><img src="/2022/02/05/%E5%94%87%E9%87%89%E5%92%8C%E5%8F%A3%E7%BA%A2%E7%9A%84%E5%8C%BA%E5%88%AB/index/image-20220206123730775.png" alt="image-20220206123730775"></p>
<p><img src="/2022/02/05/%E5%94%87%E9%87%89%E5%92%8C%E5%8F%A3%E7%BA%A2%E7%9A%84%E5%8C%BA%E5%88%AB/index/image-20220206124714144.png" alt="image-20220206124714144"></p>
]]></content>
      <tags>
        <tag>life</tag>
        <tag>girls</tag>
      </tags>
  </entry>
  <entry>
    <title>用hexo+github搭建博客</title>
    <url>/2022/02/03/%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/index.html</url>
    <content><![CDATA[<p>用hexo+github搭个人博客看这篇就够啦</p>
<a id="more"></a>

<p>近些年来很多用户都喜欢使用 GitHub Pages 来搭建 Hexo 静态博客网站，其最吸引人的莫过于完全免费使用，并且非常稳定。</p>
<p>虽然搭建时比较麻烦，有点折腾，但是配置完成后，基本不需要操心维护的事，甚至放了几年都忘记了，打开来看文章依然还在。</p>
<p>本文就详细介绍下如何使用 Hexo + GitHub 搭建免费个人博客网站的教程。</p>
<p>为了照顾小白用户（第一次使用 GitHub 和 Hexo），尽可能详细，包括常见的坑和问题都有提示说明。下面目录中<strong>第 3~5 步为最重要的步骤</strong>，其他内容如果已经会的可以选择性跳过。</p>
<p>看起来有点繁杂，捋顺了倒也简单，认真跟教程走，完整操作一遍大概需要 30 分钟。（事实上本人搭这个博客至少花了一天时间，花的时间多少主要看个人还有您看的教程是否对应最新版本，否则可能出现版本不兼容问题，然后这些问题因为我没有及时记录，所以就没有啦！解决了就行呜呜呜。）</p>
<p>o(￣▽￣)ｄ</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h3 id="GitHub-Pages-是什么？"><a href="#GitHub-Pages-是什么？" class="headerlink" title="GitHub Pages 是什么？"></a><strong>GitHub Pages 是什么？</strong></h3><ul>
<li><a href="https://link.zhihu.com/?target=https://help.github.com/en/articles/what-is-github-pages">What is GitHub Pages? - GitHub Help</a></li>
</ul>
<p>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</p>
<h3 id="Hexo-是什么？"><a href="#Hexo-是什么？" class="headerlink" title="Hexo 是什么？"></a><strong>Hexo 是什么？</strong></h3><ul>
<li>官网：<a href="https://link.zhihu.com/?target=https://hexo.io/zh-cn/">hexo.io</a></li>
</ul>
<p>Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p>
<h3 id="Hexo-GitHub-文章发布原理"><a href="#Hexo-GitHub-文章发布原理" class="headerlink" title="Hexo + GitHub 文章发布原理"></a><strong>Hexo + GitHub 文章发布原理</strong></h3><p>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。</p>
<p>差不多就是下面这张图这样：（hexo g&amp;&amp;hexo d两个命令可以简化成一个命令hexo g -d，但是我建议每次部署之前都要先清理一下缓存，不然可能会出现奇奇怪怪的问题）</p>
<p><img src="/2022/02/03/%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/index/image-20220203093820562.png" alt="image-20220203093820562"></p>
<h3 id="优点和不足"><a href="#优点和不足" class="headerlink" title="优点和不足"></a><strong>优点和不足</strong></h3><p><strong>优点：</strong>完全免费；静态站点，轻量快速；可按需求自由定制改造；托管在 GitHub，安全省心；迁移方便……</p>
<p><strong>不足：</strong>发文不便，依赖于本地环境；更适合个人博客使用；GitHub 在国内访问速度有点慢。</p>
<p>（通俗的说，就是敲hexo g -d敲到手软，每次因为github pages有延迟而只能hexo s 先预览文章）</p>
<p>并且延迟很久，明明把代码删了却好像没删一样，所以本地出现什么效果就是什么效果了。</p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h3><ul>
<li>输入代码时，核对准确，最好切换成英文输入法；</li>
<li>将文中的 “用户名” 和 “邮箱” 替换为自己的 GitHub 账户名和绑定的邮箱；</li>
<li>统一使用 Git Bash 进行操作（支持 Win、Mac）；</li>
<li>小白请严格按步骤进行，不要跳！</li>
</ul>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a><strong>环境搭建</strong></h3><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p>
<ul>
<li>Node.js：<a href="https://link.zhihu.com/?target=https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></li>
<li>Git：<a href="https://link.zhihu.com/?target=https://git-scm.com/downloads">https://git-scm.com/downloads</a></li>
</ul>
<p>下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。</p>
<p>安装完成后，Win+R 输入 cmd 并打开，依次输入 <code>node -v</code>、<code>npm -v</code> 和 <code>git --version</code> 并回车，如下图出现程序版本号即可。</p>
<p><img src="/2022/02/03/%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/index/image-20220203094412675.png"></p>
<h2 id="连接-Github"><a href="#连接-Github" class="headerlink" title="连接 Github"></a>连接 Github</h2><p>使用邮箱注册 <a href="https://link.zhihu.com/?target=https://github.com/">GitHub</a> 账户，选择免费账户（Free），并完成邮件验证。</p>
<p>建一个空的文件夹（建议命名为hexo放在D盘目录下，以后每次都要先进入这个目录然后在地址栏敲cmd把本地文件push到github上去）</p>
<p>右键-&gt;Git bash here,设置用户名和邮箱</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub 用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure>

<p><strong>创建 SSH 密钥</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure>

<p><strong>添加密匙：</strong></p>
<p>进入 [C:\Users\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p>
<p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p>
<p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p>
<p><strong>验证连接：</strong></p>
<p>打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。</p>
<p>显示 “Hi xxx! You’ve successfully……” 即连接成功。</p>
<h2 id="创建-Github-Pages-仓库"><a href="#创建-Github-Pages-仓库" class="headerlink" title="创建 Github Pages 仓库"></a>创建 Github Pages 仓库</h2><p>GitHub 主页右上角加号 -&gt; New repository：</p>
<ul>
<li>Repository name 中输入 <code>用户名.github.io</code></li>
<li>勾选 “Initialize this repository with a README”</li>
<li>Description 选填</li>
</ul>
<p>填好后点击 Create repository 创建。</p>
<p>创建后默认自动启用 HTTPS，博客地址为：<code>https://用户名.github.io</code></p>
<h2 id="本地安装-Hexo-博客程序"><a href="#本地安装-Hexo-博客程序" class="headerlink" title="本地安装 Hexo 博客程序"></a>本地安装 Hexo 博客程序</h2><p>新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。</p>
<p>在这个文件夹地址栏敲cmd回车，进入这个目录下的命令行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli        # npm 安装 hexo</span><br></pre></td></tr></table></figure>

<p><strong>blog</strong> 是 hexo 初始化的文件夹，是<strong>博客根目录</strong>，可以更换成自己喜欢的文件夹名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /d D:\hexo\blog</span><br></pre></td></tr></table></figure>

<h2 id="hexo-生成静态网页文件"><a href="#hexo-生成静态网页文件" class="headerlink" title="hexo 生成静态网页文件"></a>hexo 生成静态网页文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g    </span><br></pre></td></tr></table></figure>

<h2 id="hexo-服务"><a href="#hexo-服务" class="headerlink" title="hexo 服务"></a>hexo 服务</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>开启hexo服务后，即可通过本地访问 blog 页面（默认为**<code>localhost:4000</code>**）预览博客页面。</p>
<p>(因为用网址访问的有延迟，所以localhost有变化那就是更改成功了)</p>
<p>有时遇到端口被占用的情况我们需要更改端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s -p &quot;端口号&quot;    </span><br></pre></td></tr></table></figure>

<p>比如端口号改为4001</p>
<p><img src="/2022/02/03/%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/index/image-20220203100030826.png"></p>
<h2 id="部署-Hexo-到-GitHub-Pages"><a href="#部署-Hexo-到-GitHub-Pages" class="headerlink" title="部署 Hexo 到 GitHub Pages"></a>部署 Hexo 到 GitHub Pages</h2><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p>
<p>首先<strong>安装 hexo-deployer-git</strong>：（默认进入blog根目录进行操作）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后修改blog根目录下的 <strong>_config.yml</strong> 文件末尾的 Deployment 部分，修改成如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line"></span><br><span class="line"> type: git</span><br><span class="line"></span><br><span class="line"> repo: #这一行把ssh密钥的链接复制到这里</span><br></pre></td></tr></table></figure>

<p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p>
<p>访问我们的 GitHub 域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p>
<h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a><strong>发布文章</strong></h3><p>进入博客所在目录，右键打开 Git Bash Here，创建博文：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n &quot;hello&quot; #hello可以自由更改对应生成的文件名</span><br></pre></td></tr></table></figure>

<p>然后在 D:\hexo\blog\source_posts 目录下会出现一个hello.md文件</p>
<p>其他指令：(~/表示博客根目录)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n hello                # 简化指令</span><br><span class="line">hexo n post hello            # 新编博文并立即发布。默认 ~/source/_posts/hello.md</span><br><span class="line">hexo n draft hello            # 新编博文但暂不发布。默认 ~/source/_drafts/hello.md</span><br><span class="line">hexo n page hello            # 新建页面（标签页，分类页等）。默认 ~/source/hello</span><br></pre></td></tr></table></figure>

<p>然后进入 D:\hexo\blog\source_posts 找到 <code>hello.md</code> ，打开文件，内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: hello</span><br><span class="line">date: 1970-1-1 8:00:00</span><br><span class="line">tags: [hello, demo]</span><br></pre></td></tr></table></figure>

<p>这些是格式头 Front-matter 每次写博客都要写这个的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World # 标题</span><br><span class="line">date: 2019/3/26 hh:mm:ss # 时间</span><br><span class="line">categories: # 分类</span><br><span class="line">- Diary</span><br><span class="line">tags: # 标签</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">摘要</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">正文</span><br></pre></td></tr></table></figure>

<p>写完hexo g -d部署到github pages上就可以了</p>
<h3 id="hexo-博文插入图片"><a href="#hexo-博文插入图片" class="headerlink" title="hexo 博文插入图片"></a>hexo 博文插入图片</h3><p>更改hexo配置文件 (D:\hexo\blog\node_modules\hexo-theme-next/_config.yml`) 中的Writing配置项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>

<p>在<strong>博客根目录</strong>下安装**<code>hexo-asset-image</code>**插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<p>如果用Typora写博文的话，可以把偏好设置改一下，具体做法为文件-&gt;偏好设置-&gt;图像:</p>
<p>改成完全和下图一样的就可以了</p>
<p><img src="/2022/02/03/%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/index/image-20220203140416121.png" alt="image-20220203140416121"></p>
<p>这样你在复制粘贴图片时会typora会自动帮你放到_post目录下的同名文件夹</p>
<h3 id="hexo-添加标签页"><a href="#hexo-添加标签页" class="headerlink" title="hexo 添加标签页"></a>hexo 添加标签页</h3><p>在博客根目录下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>

<p>在 Front-matter 中添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type: tags</span><br></pre></td></tr></table></figure>

<p>完成后 hexo 便会自动生成标签页</p>
<blockquote>
<p>记得添加进入方式</p>
</blockquote>
<h3 id="hexo-添加关于页"><a href="#hexo-添加关于页" class="headerlink" title="hexo 添加关于页"></a>hexo 添加关于页</h3><p>在博客根目录下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure>

<p>在 Front-matter 中添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type: about</span><br></pre></td></tr></table></figure>

<p>在正文中输入关于页内容即可</p>
<p>记得添加进入方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: 诗酒趁年华</span><br><span class="line">subtitle: &quot;尚未佩妥剑，转眼即江湖。 &quot;</span><br><span class="line">description: &quot;&quot;</span><br><span class="line">keywords: 生活 技术 life technology</span><br><span class="line">author: jiaxin</span><br><span class="line">language: zh-CN  #选择中文作为语言</span><br><span class="line">timezone: &quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="Hexo-设置显示文章摘要，首页不显示全文"><a href="#Hexo-设置显示文章摘要，首页不显示全文" class="headerlink" title="Hexo 设置显示文章摘要，首页不显示全文"></a><strong>Hexo 设置显示文章摘要，首页不显示全文</strong></h3><p>Hexo 主页文章列表默认会显示文章全文，浏览时很不方便，可以在文章中插入 <code>&lt;!--more--&gt;</code> 进行分段。</p>
<p>该代码前面的内容会作为摘要显示，而后面的内容会替换为 “阅读全文” 隐藏起来。</p>
<p>如下图：</p>
<p><img src="/2022/02/03/%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/index/image-20220203140815732.png" alt="image-20220203140815732"></p>
<h3 id="统计访问数量"><a href="#统计访问数量" class="headerlink" title="统计访问数量"></a>统计访问数量</h3><p>效果如下：</p>
<p><img src="/2022/02/03/%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/index/image-20220203145053979.png" alt="image-20220203145053979"></p>
<p>（不过这个访问量好像有点问题，等我想想啊）</p>
<p>（后面补充：访问量在localhost形式下是有问题的没办法，在yourname\github.io\网址访问下是没有问题的。）</p>
<p>1、先在hexo-theme-next目录下的_config.yml文件的末尾加上下面的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">busuanzi:</span><br><span class="line"> enable: true</span><br></pre></td></tr></table></figure>

<p>2、打开D:\hexo\blog\node_modules\hexo-theme-next\layout\partials的footer.njk文件（这个文件相当于html文件）在最后另起一行加入如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;footer&gt;</span><br><span class="line">        &lt;!-- 不蒜子统计 --&gt;</span><br><span class="line">        &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;</span><br><span class="line">                本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">        &lt;span id=&quot;busuanzi_container_site_uv&quot; style=&#x27;display:none&#x27;&gt;</span><br><span class="line">                本站访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure>

<p>3、打开D:\hexo\blog\node_modules\hexo-theme-next\layout\partials\post的post-footer.njk文件在最后另起一行加入如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable &amp;&amp; !index)&#123; %&gt;</span><br><span class="line">        &lt;!-- 不蒜子统计 --&gt;</span><br><span class="line">        &lt;span id=&quot;busuanzi_container_page_pv&quot; style=&#x27;display:none&#x27; class=&quot;&lt;%= class_name %&gt;&quot;&gt;</span><br><span class="line">              &lt;i class=&quot;icon-smile icon&quot;&gt;&lt;/i&gt; 阅读数：&lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;次</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>

<h3 id="对一些细节"><a href="#对一些细节" class="headerlink" title="对一些细节"></a>对一些细节</h3><p>1、每次对细节修改之后都要在blog根目录下hexo g -d</p>
<p>然后hexo s本地预览一下</p>
<p>2、layout.njk文件相当于是博客的前端html文件</p>
<p>3、对新手小白的建议：</p>
<p>备份！备份！备份！！！！非常重要！</p>
<p>当时就是因为没备份然后再csdn上看了很多乱七八糟的东西，然后就错误地删掉了很多</p>
<p>然后我不得不建了一个hexo副本文件夹再下载了一次这些文件代码然后再复制上去。</p>
<p>乱改没关系，只要记得备份，不然一切都重来。</p>
<p>4、看报错信息！</p>
<p>当出现如图所示的报错信息时说明</p>
<p><img src="/2022/02/03/%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/index/image-20220205145142254.png" alt="image-20220205145142254"></p>
<p><img src="/2022/02/03/%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/index/image-20220205145235139.png" alt="image-20220205145235139"></p>
<p>说明是在这个文件的更改导致的错误</p>
<p>5、看注释，看官方文档，别一不会就百度！</p>
<p><img src="/2022/02/03/%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/index/image-20220205145835846.png" alt="image-20220205145835846"></p>
<p>这个侧边栏头像以及指针的旋转我百度了好久，原来在新版的站点配置文件里面就有！！！啊啊啊啊啊啊！</p>
<p>参考文献：</p>
<p><a href="https://jomeswang.github.io/posts/fd1e545c/#more">https://jomeswang.github.io/posts/fd1e545c/#more</a></p>
<p><a href="https://hasegawaazusa.github.io/hexo-note.html">https://hasegawaazusa.github.io/hexo-note.html</a></p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>博客运用hexo-next主题的设置及美化</title>
    <url>/2022/02/03/%E5%8D%9A%E5%AE%A2%E8%BF%90%E7%94%A8hexo-next%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AE%BE%E7%BD%AE%E5%8F%8A%E7%BE%8E%E5%8C%96/index.html</url>
    <content><![CDATA[<p>上篇文章已经在Windows上将个人博客个搭建好了，使用的是默认主题landscape，不过有点不太符合我们的审美，这里使用最为常见的hexo-next主题为例。</p>
<a id="more"></a>

<h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><h3 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h3><p>在blog根目录下进入命令行，输入下面的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-next --save</span><br></pre></td></tr></table></figure>

<p>这样就安装完了，不过不要以为这样就可以了哦，我们还需要启用Next主题，所以需要到<strong>站点配置文件</strong>里去设置一把，找到 theme 字段，并将其值更改为 next。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<h2 id="Hexo-主题配置文件"><a href="#Hexo-主题配置文件" class="headerlink" title="Hexo 主题配置文件"></a>Hexo 主题配置文件</h2><p>其实这个文件的配置才是重点，因为你们想要的吊炸天的效果差不多都与这个文件有关。<br>打开<strong>Hexo目录/themes/next/_config.yml</strong>文件,</p>
<h3 id="开启侧边栏社交链接"><a href="#开启侧边栏社交链接" class="headerlink" title="开启侧边栏社交链接"></a>开启侧边栏社交链接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy# Social links</span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/hydcoder</span><br><span class="line">  Weibo: https://weibo.com/3180967953/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo</span><br><span class="line">  # 等等</span><br><span class="line"></span><br><span class="line">social_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  # Icon Mappings.</span><br><span class="line">  GitHub: github</span><br><span class="line">  Weibo: weibo</span><br></pre></td></tr></table></figure>

<h3 id="选择-Scheme"><a href="#选择-Scheme" class="headerlink" title="选择 Scheme"></a>选择 Scheme</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy# Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure>

<h3 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h3><p> 打开站点配置文件，搜索 <code>language</code>，找到如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copyCopyauthor:</span><br><span class="line">language:</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure>

<p>在 <code>language</code> 后面输入 <code>zh-CN</code>。</p>
<p>注意：冒号后面必须有一个空格。</p>
<h3 id="设置侧边栏设置圆形可旋转头像"><a href="#设置侧边栏设置圆形可旋转头像" class="headerlink" title="设置侧边栏设置圆形可旋转头像"></a>设置侧边栏设置圆形可旋转头像</h3><p>D:\hexo\blog\node_modules\hexo-theme-next\source\css_common\outline\sidebar</p>
<p>在D:\hexo\blog\node_modules\hexo-theme-next\source\css_common\components目录下新建一个<strong>sidebar-author.styl</strong>文件，在里面输入以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  -webkit-border-radius: 50%;</span><br><span class="line">  -moz-border-radius: 50%;</span><br><span class="line">  transition: 1.4s all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.site-author-image:hover &#123;</span><br><span class="line">    -webkit-transform: rotate(360deg);</span><br><span class="line">    -moz-transform: rotate(360deg);</span><br><span class="line">    -ms-transform: rotate(360deg);</span><br><span class="line">    -transform: rotate(360deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.site-author-name &#123;</span><br><span class="line">  margin: $site-author-name-margin;</span><br><span class="line">  text-align: $site-author-name-align;</span><br><span class="line">  color: $site-author-name-color;</span><br><span class="line">  font-weight: $site-author-name-weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.site-description &#123;</span><br><span class="line">  margin-top: $site-description-margin-top;</span><br><span class="line">  text-align: $site-description-align;</span><br><span class="line">  font-size: $site-description-font-size;</span><br><span class="line">  color: $site-description-color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="添加动态背景"><a href="#添加动态背景" class="headerlink" title="添加动态背景"></a>添加动态背景</h2><p>先上张图</p>
<p><a href="https://s2.ax1x.com/2020/01/02/lt3FO0.gif"><img src="/2022/02/03/%E5%8D%9A%E5%AE%A2%E8%BF%90%E7%94%A8hexo-next%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AE%BE%E7%BD%AE%E5%8F%8A%E7%BE%8E%E5%8C%96/index/lt3FO0.gif" alt="img"></a></p>
<p>网站动态背景(非常占Cpu不是特别推荐，这个背景直接导致了学长在访问我的博客的时候手机死机了hhh)</p>
<p>打开D:\hexo\blog\node_modules\hexo-theme-next\layout里面的layout .njk文件然后在<body>里面输入如下代码：</body></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.canvas_nest %&#125;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot;</span><br><span class="line">  color=&quot;0,0,255&quot; opacity=&#x27;0.7&#x27; zIndex=&quot;-2&quot; count=&quot;200&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>配置项说明<br>color ：线条颜色, 默认: ‘0,0,0’；三个数字分别为(R,G,B)<br>opacity: 线条透明度（0~1）, 默认: 0.5<br>count: 线条的总数量, 默认: 150<br>zIndex: 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1</p>
<h3 id="标签列表初始化"><a href="#标签列表初始化" class="headerlink" title="标签列表初始化"></a>标签列表初始化</h3><p> 首先打开主题下的配置文件_config.yml，然后搜索menu找到如下配置项，将about、tags、categories前的#号去掉，就开启了关于、标签和分类标签，当然还有其他菜单项也可以开启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copymenu:(注意空格即/之后的空格，标准如about其他像这样改)</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/|| user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure>

<p>重新生成部署后，可以看到新增的菜单项，但是单击后会报如下错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copyCannot GET /about/</span><br><span class="line">Cannot GET /tags/</span><br><span class="line">Cannot GET /categories/</span><br></pre></td></tr></table></figure>

<p>这是因为你还需运行如下命令新建相关页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copyhexo new page &quot;about&quot;</span><br><span class="line">hexo new page &quot;tags&quot;</span><br><span class="line">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure>

<p>运行结果如下，会再source文件下创建about、tags、categories文件夹，每个文件夹下还会创建一个index.md文件表示关于、标签页分类页面，编辑这三个MarkDown文件可以自定义这三个页面的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copyD:\hexo\blog&gt;hexo new page &quot;about&quot;`</span><br><span class="line">`INFO  Created: D:\hexo\blog\source\about\index.md`</span><br><span class="line"></span><br><span class="line">`D:\hexo\blog&gt;hexo new page &quot;tags&quot;`</span><br><span class="line">`INFO  Created: D:\hexo\blog\source\tags\index.md`</span><br><span class="line"></span><br><span class="line">`D:\hexo\blog&gt;hexo new page &quot;categories&quot;`</span><br><span class="line">`INFO  Created: D:\hexo\blog\source\categories\index.md`</span><br></pre></td></tr></table></figure>

<h2 id="添加看板娘"><a href="#添加看板娘" class="headerlink" title="添加看板娘"></a>添加看板娘</h2><p>把这段代码添加到layout.njk文件中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var jsonModel = [</span><br><span class="line">    &quot;https://unpkg.com/live2d-widget-model-miku@1.0.5/assets/miku.model.json&quot;,</span><br><span class="line">    &quot;https://unpkg.com/live2d-widget-model-miku@1.0.5/assets/miku.model.json&quot;,</span><br><span class="line">    &quot;https://unpkg.com/live2d-widget-model-miku@1.0.5/assets/miku.model.json&quot;,</span><br><span class="line">    &quot;https://unpkg.com/live2d-widget-model-miku@1.0.5/assets/miku.model.json&quot;,</span><br><span class="line">    &quot;https://unpkg.com/live2d-widget-model-miku@1.0.5/assets/miku.model.json&quot;,</span><br><span class="line">    ];</span><br><span class="line">    L2Dwidget.init(&#123; </span><br><span class="line">        &quot;model&quot;: &#123; </span><br><span class="line">            &quot;jsonPath&quot;: jsonModel[Math.floor(Math.random()*(jsonModel.length-1))],</span><br><span class="line">            &quot;scale&quot;: 1 </span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;display&quot;: &#123; </span><br><span class="line">            &quot;position&quot;: &quot;right&quot;, // 位置left、right</span><br><span class="line">            &quot;width&quot;: 180, // 宽度</span><br><span class="line">            &quot;height&quot;: 240, // 高度</span><br><span class="line">            &quot;hOffset&quot;: 0, // 横向边距</span><br><span class="line">            &quot;vOffset&quot;: 0 // 众向边距</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;mobile&quot;: &#123; </span><br><span class="line">            &quot;show&quot;: true // 手机是否显示</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="/2022/02/03/%E5%8D%9A%E5%AE%A2%E8%BF%90%E7%94%A8hexo-next%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AE%BE%E7%BD%AE%E5%8F%8A%E7%BE%8E%E5%8C%96/index/image-20220205141336428.png" alt="image-20220205141336428"></p>
<h3 id="部分文章需要密码才能查看"><a href="#部分文章需要密码才能查看" class="headerlink" title="部分文章需要密码才能查看"></a>部分文章需要密码才能查看</h3><p>效果如下：</p>
<p><img src="/2022/02/03/%E5%8D%9A%E5%AE%A2%E8%BF%90%E7%94%A8hexo-next%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AE%BE%E7%BD%AE%E5%8F%8A%E7%BE%8E%E5%8C%96/index/image-20220205191804966.png" alt="image-20220205191804966"></p>
<p><img src="/2022/02/03/%E5%8D%9A%E5%AE%A2%E8%BF%90%E7%94%A8hexo-next%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AE%BE%E7%BD%AE%E5%8F%8A%E7%BE%8E%E5%8C%96/index/image-20220205191650821.png" alt="image-20220205191650821"></p>
<p>安装插件Hexo-Blog-Encrypt</p>
<p>在 hexo 根目录的 package.json 中添加 <code>&quot;hexo-blog-encrypt&quot;: &quot;1.1.*&quot;</code> 依赖。<br>然后执行<code>npm install</code> 命令。<br>该插件会自动安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-blog-encrypt</span><br></pre></td></tr></table></figure>

<p>在站点配置文件中添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Security</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line">encrypt:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>在需要加密的文章头部添加对应字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hello world</span><br><span class="line">date: 2016-03-30 21:18:02</span><br><span class="line">tags:</span><br><span class="line">    - fdsafsdaf</span><br><span class="line">password: Mike</span><br><span class="line">abstract: Welcome to my blog, enter password to read.</span><br><span class="line">message: Welcome to my blog, enter password to read.</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>如下面这篇：</p>
<p><img src="/2022/02/03/%E5%8D%9A%E5%AE%A2%E8%BF%90%E7%94%A8hexo-next%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AE%BE%E7%BD%AE%E5%8F%8A%E7%BE%8E%E5%8C%96/index/image-20220205143635827.png" alt="image-20220205143635827"></p>
<h3 id="结尾添加“本文结束”标记"><a href="#结尾添加“本文结束”标记" class="headerlink" title="结尾添加“本文结束”标记"></a>结尾添加“本文结束”标记</h3><p> 设置方法：<br>在路径<code>themes/next/layout/_macro</code>中新建<code>passage-end-tag.swig</code>文件,并添加以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy&lt;div&gt;    </span><br><span class="line">    &#123;% if not is_index %&#125;        </span><br><span class="line">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;            </span><br><span class="line">        -------------本文结束           </span><br><span class="line">        &lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;           </span><br><span class="line">        感谢您的阅读-------------        </span><br><span class="line">        &lt;/div&gt;   </span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>接着打开<code>themes/next/layout/_macro/post.njk</code>文件，在<code>post-body</code>之后，<code>post-footer</code>之前添加如下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;  </span><br><span class="line">    &#123;% if not is_index %&#125;    </span><br><span class="line">        &#123;% include &#x27;passage-end-tag.swig&#x27; %&#125;  </span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>然后打开主题配置文件<code>_config.yml</code>,在末尾添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:  </span><br><span class="line">    enabled: true</span><br></pre></td></tr></table></figure>

<h3 id="显示丝带："><a href="#显示丝带：" class="headerlink" title="显示丝带："></a>显示丝带：</h3><p><img src="/2022/02/03/%E5%8D%9A%E5%AE%A2%E8%BF%90%E7%94%A8hexo-next%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AE%BE%E7%BD%AE%E5%8F%8A%E7%BE%8E%E5%8C%96/index/image-20220205181914733.png" alt="image-20220205181914733"></p>
<p>在主题配置文件中把相关的信息修改成这个样子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">canvas_ribbon:</span><br><span class="line"></span><br><span class="line"> enable: true </span><br></pre></td></tr></table></figure>

<p>并且是可变的丝带哦</p>
<h3 id="加上结尾的标签"><a href="#加上结尾的标签" class="headerlink" title="加上结尾的标签"></a>加上结尾的标签</h3><p><img src="/2022/02/03/%E5%8D%9A%E5%AE%A2%E8%BF%90%E7%94%A8hexo-next%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AE%BE%E7%BD%AE%E5%8F%8A%E7%BE%8E%E5%8C%96/index/image-20220205182536396.png" alt="image-20220205182536396"></p>
<p>修改D:\hexo\blog\node_modules\hexo-theme-next\layout_macro的post.njk文件，找到这一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;&#123;&#123; tag_indicate &#125;&#125; &#123;&#123; tag.name &#125;&#125;&lt;/i&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;&#123;&#123; tag_indicate &#125;&#125; &#123;&#123; tag.name &#125;&#125;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>就可以了。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
</search>

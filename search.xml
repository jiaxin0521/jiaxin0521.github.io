<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MD5？</title>
    <url>/2022/02/21/MD5%EF%BC%9F%E2%80%9C/index.html</url>
    <content><![CDATA[<p>md的代码实现为主</p>
<a id="more"></a>

<h2 id="百度百科"><a href="#百度百科" class="headerlink" title="百度百科"></a>百度百科</h2><p><strong>MD5信息摘要算法</strong>（英语：MD5 Message-Digest Algorithm），一种被广泛使用的<a href="https://baike.baidu.com/item/%E5%AF%86%E7%A0%81%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0/14937715">密码散列函数</a>，可以产生出一个128位（16<a href="https://baike.baidu.com/item/%E5%AD%97%E8%8A%82/1096318">字节</a>）的散列值（hash value），用于确保信息传输完整一致。MD5由美国密码学家<a href="https://baike.baidu.com/item/%E7%BD%97%E7%BA%B3%E5%BE%B7%C2%B7%E6%9D%8E%E7%BB%B4%E6%96%AF%E7%89%B9/700199">罗纳德·李维斯特</a>（Ronald Linn Rivest）设计，于1992年公开，用以取代<a href="https://baike.baidu.com/item/MD4/8090275">MD4</a>算法。这套算法的程序在 RFC 1321 标准中被加以规范。1996年后该算法被证实存在弱点，可以被加以破解，对于需要高度安全性的数据，专家一般建议改用其他算法，如<a href="https://baike.baidu.com/item/SHA-2/22718180">SHA-2</a>。2004年，证实MD5算法无法防止碰撞（collision），因此不适用于安全性认证，如<a href="https://baike.baidu.com/item/SSL/320778">SSL</a>公开密钥认证或是<a href="https://baike.baidu.com/item/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/212550">数字签名</a>等用途。</p>
<h2 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h2><p><a href="javascript:;"> 播报</a></p>
<p>1992年8月，罗纳德·李维斯特向互联网工程任务组（IETF）提交了一份重要文件，描述了这种算法的原理。由于这种算法的公开性和安全性，在90年代被广泛使用在各种程序语言中，用以确保资料传递无误等 [1] 。</p>
<p>MD5由<a href="https://baike.baidu.com/item/MD4/8090275">MD4</a>、<a href="https://baike.baidu.com/item/MD3/6677051">MD3</a>、MD2改进而来，主要增强算法复杂度和不可逆性。MD5算法因其普遍、稳定、快速的特点，仍广泛应用于普通数据的加密保护领域 [2] 。</p>
<h3 id="MD2"><a href="#MD2" class="headerlink" title="MD2"></a>MD2</h3><p>Rivest在1989年开发出MD2算法 [3] 。在这个算法中，首先对信息进行数据补位，使信息的字节长度是16的倍数。然后，以一个16位的校验和追加到信息末尾，并且根据这个新产生的信息计算出散列值。后来，Rogier和Chauvaud发现如果忽略了校验和MD2将产生冲突。MD2算法<a href="https://baike.baidu.com/item/%E5%8A%A0%E5%AF%86">加密</a>后结果是唯一的（即不同信息加密后的结果不同） [4] 。</p>
<h3 id="MD4"><a href="#MD4" class="headerlink" title="MD4"></a>MD4</h3><p>为了加强算法的安全性，Rivest在1990年又开发出MD4算法 [3] 。MD4算法同样需要填补信息以确保信息的比特位长度减去448后能被512整除（信息比特位长度mod 512 = 448）。然后，一个以64位<a href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6">二进制</a>表示的信息的最初长度被添加进来。信息被处理成512位damgard/merkle迭代结构的区块，而且每个区块要通过三个不同步骤的处理。Den boer和Bosselaers以及其他人很快的发现了攻击MD4版本中第一步和第三步的漏洞。Dobbertin向大家演示了如何利用一部普通的个人电脑在几分钟内找到MD4完整版本中的冲突（这个冲突实际上是一种漏洞，它将导致对不同的内容进行加密却可能得到相同的加密后结果） [5] 。</p>
<h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p>1991年，Rivest开发出技术上更为趋近成熟的MD5<a href="https://baike.baidu.com/item/%E7%AE%97%E6%B3%95">算法</a>。它在MD4的基础上增加了”安全带”（safety-belts）的概念。虽然MD5比MD4复杂度大一些，但却更为安全。这个算法很明显的由四个和MD4设计有少许不同的步骤组成。在<a href="https://baike.baidu.com/item/MD5%E7%AE%97%E6%B3%95">MD5算法</a>中，信息-摘要的大小和填充的必要条件与MD4完全相同。Den boer和Bosselaers曾发现MD5算法中的假冲突（pseudo-collisions），但除此之外就没有其他被发现的加密后结果了 [3] 。</p>
<h2 id="MD5算法的实现原理"><a href="#MD5算法的实现原理" class="headerlink" title="MD5算法的实现原理"></a>MD5算法的实现原理</h2><ol>
<li>附加填充位 </li>
</ol>
<p>首先，我们计算出原文长度(bit)对 512 求余的结果，如果不等于 448，就需要填充原文使得原文对 512 求余的结果等于 448。填充的方法是第一位填充 1，其余位填充 0。填充完后，信息的长度就是 512*N+448。</p>
<ol start="2">
<li>补足长度 </li>
</ol>
<p>之后，用剩余的位置（512-448=64 位）记录原文的真正长度，把长度的二进制值补在最后。这样处理后的信息长度就是 512*(N+1)。  </p>
<ol start="3">
<li>初始化MD缓存器</li>
</ol>
<p>MD5运算要用到一个128位的MD5缓存器，用来保存中间变量和最终结果。</p>
<h2 id="MD5用途"><a href="#MD5用途" class="headerlink" title="MD5用途"></a><strong>MD5用途</strong></h2><p>1.防止被篡改：<br>1）比如发送一个电子文档，发送前，我先得到MD5的输出结果a。然后在对方收到电子文档后，对方也得到一个MD5的输出结果b。如果a与b一样就代表中途未被篡改。<br>2）比如我提供文件下载，为了防止不法分子在安装程序中添加木马，我可以在网站上公布由安装文件得到的MD5输出结果。<br>3）SVN在检测文件是否在CheckOut后被修改过，也是用到了MD5.</p>
<p>2.防止直接看到明文：<br>现在很多网站在数据库存储用户的密码的时候都是存储用户密码的MD5值。这样就算不法分子得到数据库的用户密码的MD5值，也无法知道用户的密码。（比如在UNIX系统中用户的密码就是以MD5（或其它类似的算法）经加密后存储在文件系统中。当用户登录的时候，系统把用户输入的密码计算成MD5值，然后再去和保存在文件系统中的MD5值进行比较，进而确定输入的密码是否正确。通过这样的步骤，系统在并不知道用户密码的明码的情况下就可以确定用户登录系统的合法性。这不但可以避免用户的密码被具有系统管理员权限的用户知道，而且还在一定程度上增加了密码被破解的难度。）</p>
<p>3.防止抵赖（数字签名）：<br>这需要一个第三方认证机构。例如A写了一个文件，认证机构对此文件用MD5算法产生摘要信息并做好记录。若以后A说这文件不是他写的，权威机构只需对此文件重新产生摘要信息，然后跟记录在册的摘要信息进行比对，相同的话，就证明是A写的了。这就是所谓的“数字签名”。</p>
<h2 id="MD5安全性"><a href="#MD5安全性" class="headerlink" title="MD5安全性"></a><strong>MD5安全性</strong></h2><p>普遍认为MD5是很安全，因为暴力破解的时间是一般人无法接受的。实际上如果把用户的密码MD5处理后再存储到数据库，其实是很不安全的。因为用户的密码是比较短的，而且很多用户的密码都使用生日，手机号码，身份证号码，电话号码等等。或者使用常用的一些吉利的数字，或者某个英文单词。如果我把常用的密码先MD5处理，把数据存储起来，然后再跟你的MD5结果匹配，这时我就有可能得到明文。比如某个MD5破解网站<a href="http://www.cmd5.com/default.aspx%EF%BC%8C%E6%89%80%E4%BB%A5%E7%8E%B0%E5%9C%A8%E5%A4%A7%E5%A4%9A%E6%95%B0%E7%BD%91%E7%AB%99%E5%AF%86%E7%A0%81%E7%9A%84%E7%AD%96%E7%95%A5%E6%98%AF%E5%BC%BA%E5%88%B6%E8%A6%81%E6%B1%82%E7%94%A8%E6%88%B7%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8F%E5%86%99%E5%AD%97%E6%AF%8D%E7%9A%84%E7%BB%84%E5%90%88%E7%9A%84%E6%96%B9%E5%BC%8F%E6%8F%90%E9%AB%98%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E7%9A%84%E5%AE%89%E5%85%A8%E5%BA%A6%E3%80%82">http://www.cmd5.com/default.aspx，所以现在大多数网站密码的策略是强制要求用户使用数字大小写字母的组合的方式提高用户密码的安全度。</a></p>
<p><strong>MD5算法过程</strong></p>
<p>对MD5算法简要的叙述可以为：MD5以512位分组来处理输入的信息，且每一分组又被划分为16个32位子分组，经过了一系列的处理后，算法的输出由四个32位分组组成，将这四个32位分组级联后将生成一个128位散列值。</p>
<p>第一步、填充：如果输入信息的长度(bit)对512求余的结果不等于448，就需要填充使得对512求余的结果等于448。填充的方法是填充一个1和n个0。填充完后，信息的长度就为N*512+448(bit)；</p>
<p>第二步、记录信息长度：用64位来存储填充前信息长度。这64位加在第一步结果的后面，这样信息长度就变为N*512+448+64=(N+1)*512位。</p>
<p>第三步、装入标准的幻数（四个整数）：标准的幻数（物理顺序）是（A=(01234567)16，B=(89ABCDEF)16，C=(FEDCBA98)16，D=(76543210)16）。如果在程序中定义应该是:<br>（A=0X67452301L，B=0XEFCDAB89L，C=0X98BADCFEL，D=0X10325476L）。有点晕哈，其实想一想就明白了。</p>
<p>第四步、四轮循环运算：循环的次数是分组的个数（N+1）</p>
<p>1）将每一512字节细分成16个小组，每个小组64位（8个字节）</p>
<p>2）先认识四个线性函数(&amp;是与,|是或,~是非,^是异或)</p>
<p><img src="/2022/02/21/MD5%EF%BC%9F%E2%80%9C/index/image-20220222161905694.png" alt="image-20220222161905694"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">F(X,Y,Z)=(X&amp;Y)|((~X)&amp;Z)</span><br><span class="line">G(X,Y,Z)-(X&amp;Z)|(Y&amp;(~Z))</span><br><span class="line">H(X,Y,Z)=X^Y^Z</span><br><span class="line">H(X,Y,Z)=Y^(X|(~Z))</span><br></pre></td></tr></table></figure>

<p>3）设Mj表示消息的第j个子分组（从0到15），</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FF(a,b,c,d,Mj,s,ti)表示a=b+((a+F(b,c,d)+Mj+ti)&lt;&lt;&lt;s)</span><br><span class="line">GG(a,b,c,d,Mj,s,ti)表示a=b+((a+G(b,c,d)+Mj+ti)&lt;&lt;&lt;s)</span><br><span class="line">HH(a,b,c,d,Mj,s,ti)表示a=b+((a+H(b,c,d)+Mj+ti)&lt;&lt;&lt;s)</span><br><span class="line">II(a,b,c,d,Mj,s,ti)表示a=b+((a+I(b,c,d)+Mj+ti)&lt;&lt;&lt;s)</span><br></pre></td></tr></table></figure>

<p>参考文献：</p>
<p><a href="https://blog.csdn.net/haroroda/article/details/45935099">https://blog.csdn.net/haroroda/article/details/45935099</a></p>
<p><a href="https://blog.csdn.net/u012611878/article/details/54000607">https://blog.csdn.net/u012611878/article/details/54000607</a></p>
]]></content>
      <tags>
        <tag>md5</tag>
        <tag>密码学</tag>
      </tags>
  </entry>
  <entry>
    <title>php-I learn it</title>
    <url>/2022/02/18/php-I-learn-it/index.html</url>
    <content><![CDATA[<p>宝塔面板里有PHP在线编辑器，可以来学习PHP！</p>
<a id="more"></a>

<p>先找到桌面的宝塔图标，双击打开</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220218143956846.png" alt="image-20220218143956846"></p>
<p>打开面板；</p>
<p>网站-&gt;</p>
<p>点开设置查看端口号</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220218144243870.png" alt="image-20220218144243870"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220218144305898.png" alt="image-20220218144305898"></p>
<p>在网址栏输入：</p>
<p>127.0.0.1：8001/a.php</p>
<p>然后就进去看到a.php的内容啦</p>
<p>文件-&gt;</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220218144548068.png" alt="image-20220218144548068"></p>
<p>双击可以编辑。</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220218144926182.png" alt="image-20220218144926182"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220218145303242.png" alt="image-20220218145303242"></p>
<p>PHP 是一门弱类型语言</p>
<p>在上面的实例中，我们注意到，不必向 PHP 声明该变量的数据类型。</p>
<p>PHP 换行符 PHP_EOL</p>
<p><em>分类</em> <a href="https://www.runoob.com/w3cnote_genre/phpsnippets">PHP 常用实例</a></p>
<p>PHP 中换行可以用 PHP_EOL 来替代，以提高代码的源代码级可移植性：</p>
<ul>
<li>unix系列用 \n</li>
<li>windows系列用 \r\n</li>
<li>mac用 \r</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> PHP_EOL;</span><br><span class="line"><span class="comment">//windows平台相当于    echo &quot;\r\n&quot;;</span></span><br><span class="line"><span class="comment">//unix\linux平台相当于    echo &quot;\n&quot;;</span></span><br><span class="line"><span class="comment">//mac平台相当于    echo &quot;\r&quot;;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>PHP 会根据变量的值，自动把变量转换为正确的数据类型。</strong></p>
<p>在强类型的编程语言中，我们必须在使用变量前先声明（定义）变量的类型和名称。</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220218150231214.png" alt="image-20220218150231214"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220218150253826.png" alt="image-20220218150253826"></p>
<p>当我们调用myTest()函数并输出两个变量的值, 函数将会输出局部变量 $y 的值，但是不能输出 $x 的值，因为 $x 变量在函数外定义，无法在函数内使用，如果要在一个函数中访问一个全局变量，需要使用 global 关键字。</p>
<p>然后我们在myTest()函数外输出两个变量的值，函数将会输出全局变量 $x 的值，但是不能输出 $y 的值，因为 $y 变量在函数中定义，属于局部变量。</p>
<p>在函数内调用函数外定义的全局变量，我们需要在函数中的变量前加上 global 关键字：</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220218150453168.png" alt="image-20220218150453168"></p>
<p>PHP 将所有全局变量存储在一个名为 $GLOBALS[<em>index</em>] 的数组中。 <em>index</em> 保存变量的名称。这个数组可以在函数内部访问，也可以直接用来更新全局变量。</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220218150933234.png" alt="image-20220218150933234"></p>
<p>当一个函数完成时，它的所有变量通常都会被删除。然而，有时候您希望某个局部变量不要被删除。</p>
<p>要做到这一点，请在您第一次声明变量时使用 <strong>static</strong> 关键字：</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220218151421568.png" alt="image-20220218151421568"></p>
<p>然后，每次调用该函数时，该变量将会保留着函数前一次被调用时的值。</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220218151549668.png" alt="image-20220218151549668"></p>
<p><strong>Fatal error</strong>: Uncaught ArgumentCountError: Too few arguments（参数） to function mytest(), 0 passed in D:\wwwroot\127.0.0.1\a.php on line 11 and exactly 1 expected in D:\wwwroot\127.0.0.1\a.php:3 Stack trace: #0 D:\wwwroot\127.0.0.1\a.php(11): mytest() #1 {main} thrown in <strong>D:\wwwroot\127.0.0.1\a.php</strong> on line <strong>3</strong></p>
<p>需要mytest(5);(缺少了一个参数)</p>
<p>echo 和 print 区别:</p>
<ul>
<li>echo - 可以输出一个或多个字符串</li>
<li>print - 只允许输出一个字符串，返回值总为 1</li>
</ul>
<p><strong>提示：</strong>echo 输出的速度比 print 快， echo 没有返回值，print有返回值1。</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220218154906684.png" alt="image-20220218154906684"></p>
<p>笑死我刚开始不以为这个是空格。</p>
<p>然后把这个空格删掉就不会报错了。</p>
<ul>
<li>必须后接分号，否则编译通不过。</li>
<li>\2. <strong>EOF</strong> 可以用任意其它字符代替，只需保证结束标识与开始标识一致。</li>
<li><strong>3. 结束标识必须顶格独自占一行(即必须从行首开始，前后不能衔接任何空白和字符)。</strong></li>
<li>\4. 开始标识可以不带引号或带单双引号，不带引号与带双引号效果一致，解释内嵌的变量和转义符号，带单引号则不解释内嵌的变量和转义符号。</li>
<li>\5. 当内容需要内嵌引号（单引号或双引号）时，不需要加转义符，本身对单双引号转义，此处相当与q和qq的用法。</li>
</ul>
<p>注意：</p>
<p>1.以 <strong>&lt;&lt;&lt;EOF</strong> 开始标记开始，以 <strong>EOF</strong> 结束标记结束，结束标记必须顶头写，不能有缩进和空格，且在结束标记末尾要有分号 。</p>
<p>2.开始标记和结束标记相同，比如常用大写的 <strong>EOT、EOD、EOF</strong> 来表示，但是不只限于那几个(也可以用：JSON、HTML等)，只要保证开始标记和结束标记不在正文中出现即可。</p>
<p>3.位于开始标记和结束标记之间的变量可以被正常解析，但是函数则不可以。在 heredoc 中，变量不需要用连接符 <strong>.</strong> 或 <strong>,</strong> 来拼接。</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220218155915612.png" alt="image-20220218155915612"></p>
<p>换行的意思。</p>
<p>PHP <a href="https://www.runoob.com/php/php-var_dump-function.html">var_dump() </a>函数返回变量的数据类型和值：</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220218161233090.png" alt="image-20220218161233090"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220218161252761.png" alt="image-20220218161252761"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220218161601416.png" alt="image-20220218161601416"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220218161536271.png" alt="image-20220218161536271"></p>
<p>还返回了有几个字母；</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220218162905352.png" alt="image-20220218162905352"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220218163148073.png" alt="image-20220218163148073"></p>
<p>虽然 PHP 是弱类型语言，但也需要明白变量类型及它们的意义，因为我们经常需要对 PHP 变量进行比较，包含松散和严格比较。</p>
<ul>
<li>松散比较：使用两个等号 <strong>==</strong> 比较，只比较值，不比较类型。</li>
<li>严格比较：用三个等号 <strong>===</strong> 比较，除了比较值，也比较类型。</li>
</ul>
<p>例如，”42” 是一个字符串而 42 是一个整数。<strong>FALSE</strong> 是一个布尔值而 <strong>“FALSE”</strong> 是一个字符串。</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220218164601728.png" alt="image-20220218164601728"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220218164851736.png" alt="image-20220218164851736"></p>
<p>strlen() 函数返回字符串的长度（字节数）。</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220218165005066.png" alt="image-20220218165005066"></p>
<p>strpos() 函数用于在字符串内查找一个字符或一段指定的文本。</p>
<p>如果在字符串中找到匹配，该函数会返回第一个匹配的字符位置。如果未找到匹配，则返回 FALSE。</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220218165413416.png" alt="image-20220218165413416"></p>
<p>PHP7+ 版本新增整除运算符 **intdiv()**，该函数返回值为第一个参数除于第二个参数的值并取整（向下取整），使用实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">var_dump(intdiv(10, 3));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>用.连接两个字符串。</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220219140153938.png" alt="image-20220219140153938"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220219140205533.png" alt="image-20220219140205533"></p>
<p>因为没有定义$b;</p>
<p>但是这样可以：</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220219140537184.png" alt="image-20220219140537184"></p>
<p>应该是因为这样就算初始化吧。</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220219140335773.png" alt="image-20220219140335773"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220219140622824.png" alt="image-20220219140622824"></p>
<p>x&lt;&gt;y ”不等于“</p>
<p>x！==y ”绝对不等于“类型不相同或</p>
<p>sort()对数组进行升序排列；</p>
<p>rsort（）对数组进行降序排列；</p>
<p>ksort()对数组进行降序排列；</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220219141635739.png" alt="image-20220219141635739"></p>
<p>一、=&gt;,-&gt;的意思：</p>
<p>-&gt;是对象执行方法或取得属性用的。</p>
<p>=&gt;是数组里键和值对应用的。</p>
<p>二、用法</p>
<p>1、=&gt; 的用法数组中用于数组的 key 和 value之间的关系例如：</p>
<p>$a = array(‘0’ =&gt; ‘1’,’2’ =&gt; ‘4’,);echo $a[‘0’];echo $a[‘2’];</p>
<p>2、-&gt; 的用法类中用于引用类实例的方法和属性例如：</p>
<p>class Test{function add(){return $this-&gt;var++;}var $var = 0;}$a = new Test; </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> phpinfo(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>查看运行环境，然后返回一堆奇奇怪怪的（</p>
<p>PHP 魔术常量</p>
<p>（这个看起来比较有趣）</p>
<h2 id="LINE"><a href="#LINE" class="headerlink" title="LINE"></a><strong>LINE</strong></h2><p>文件中的当前行号。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;这是第 &quot; &#x27;</span>  . <span class="keyword">__LINE__</span> . <span class="string">&#x27; &quot; 行&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="FILE"><a href="#FILE" class="headerlink" title="FILE"></a><strong>FILE</strong></h2><p>文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。</p>
<p>自 PHP 4.0.2 起，<strong>FILE</strong> 总是包含一个绝对路径（如果是符号连接，则是解析后的绝对路径），而在此之前的版本有时会包含一个相对路径。</p>
<h2 id="DIR"><a href="#DIR" class="headerlink" title="DIR"></a><strong>DIR</strong></h2><p>文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。</p>
<p>它等价于 dirname(<strong>FILE</strong>)。除非是根目录，否则目录中名不包括末尾的斜杠。（PHP 5.3.0中新增）</p>
<h2 id="FUNCTION"><a href="#FUNCTION" class="headerlink" title="FUNCTION"></a><strong>FUNCTION</strong></h2><p>函数名称（PHP 4.3.0 新加）。自 PHP 5 起本常量返回该函数被定义时的名字（区分大小写）。在 PHP 4 中该值总是小写字母的。</p>
<h2 id="CLASS"><a href="#CLASS" class="headerlink" title="CLASS"></a><strong>CLASS</strong></h2><p>类的名称（PHP 4.3.0 新加）。自 PHP 5 起本常量返回该类被定义时的名字（区分大小写）。</p>
<p>在 PHP 4 中该值总是小写字母的。类名包括其被声明的作用区域（例如 Foo\Bar）。注意自 PHP 5.4 起 <strong>CLASS</strong> 对 trait 也起作用。当用在 trait 方法中时，<strong>CLASS</strong> 是调用 trait 方法的类的名字。</p>
<h2 id="TRAIT"><a href="#TRAIT" class="headerlink" title="TRAIT"></a><strong>TRAIT</strong></h2><p>Trait 的名字（PHP 5.4.0 新加）。自 PHP 5.4.0 起，PHP 实现了代码复用的一个方法，称为 traits。</p>
<p>Trait 名包括其被声明的作用区域（例如 Foo\Bar）。</p>
<p>从基类继承的成员被插入的 SayWorld Trait 中的 MyHelloWorld 方法所覆盖。其行为 MyHelloWorld 类中定义的方法一致。优先顺序是当前类中的方法会覆盖 trait 方法，而 trait 方法又覆盖了基类中的方法。</p>
<h2 id="METHOD"><a href="#METHOD" class="headerlink" title="METHOD"></a><strong>METHOD</strong></h2><p>类的方法名（PHP 5.0.0 新加）。返回该方法被定义时的名字（区分大小写）。</p>
<h2 id="NAMESPACE"><a href="#NAMESPACE" class="headerlink" title="NAMESPACE"></a><strong>NAMESPACE</strong></h2><p>当前命名空间的名称（区分大小写）。此常量是在编译时定义的（PHP 5.3.0 新增）。</p>
<p>命名空间：</p>
<p>什么是命名空间？从广义上来说，命名空间是一种封装事物的方法。在很多地方都可以见到这种抽象概念。例如，在操作系统中目录用来将相关文件分组，对于目录中的文件来说，它就扮演了命名空间的角色。具体举个例子，文件 <code>foo.txt</code> 可以同时在目录 <code>/home/greg</code> 和 <code>/home/other</code> 中存在，但在同一个目录中不能存在两个 <code>foo.txt</code> 文件。另外，在目录 <code>/home/greg</code> 外访问 <code>foo.txt</code> 文件时，我们必须将目录名以及目录分隔符放在文件名之前得到 <code>/home/greg/foo.txt</code>。这个原理应用到程序设计领域就是命名空间的概念。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">my</span>\<span class="title">name</span>; <span class="comment">// 参考 &quot;定义命名空间&quot; 小节</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myfunction</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> MYCONST = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> MyClass;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> \my\name\MyClass; <span class="comment">// 参考 &quot;全局空间&quot; 小节</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = strlen(<span class="string">&#x27;hi&#x27;</span>); <span class="comment">// 参考 &quot;使用命名空间：后备全局函数/常量&quot; 小节</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$d</span> = <span class="keyword">namespace</span>\<span class="title">MYCONST</span>; <span class="comment">// 参考 &quot;namespace操作符和__NAMESPACE__常量” 小节</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$d</span> = <span class="keyword">__NAMESPACE__</span> . <span class="string">&#x27;\MYCONST&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> constant(<span class="variable">$d</span>); <span class="comment">// 参考 &quot;命名空间和动态语言特征&quot; 小节</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>类：</p>
<ul>
<li>类使用 <strong>class</strong> 关键字后加上类名定义。</li>
<li>类名后的一对大括号({})内可以定义变量和方法。</li>
<li>类的变量使用 <strong>var</strong> 来声明, 变量也可以初始化值。</li>
<li>函数定义类似 PHP 函数的定义，但函数只能通过该类及其实例化的对象访问。</li>
</ul>
<p>一些个错题：</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221094531629.png" alt="image-20220221094531629"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221094545286.png" alt="image-20220221094545286"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221094707859.png" alt="image-20220221094707859"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221094805584.png" alt="image-20220221094805584"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221094824106.png" alt="image-20220221094824106"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221094957122.png" alt="image-20220221094957122"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221095831833.png" alt="image-20220221095831833"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221095849463.png" alt="image-20220221095849463"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221095922566.png" alt="image-20220221095922566"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221113240831.png" alt="image-20220221113240831"></p>
<p>编译器从左到右解析，然后所以会解析成这个样子。</p>
<p>然后到1，然后到2.</p>
<p>一般来说赋值运算符是最高优先级的</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221100029956.png" alt="image-20220221100029956"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221100315029.png" alt="image-20220221100315029"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221103923503.png" alt="image-20220221103923503"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221104421551.png" alt="image-20220221104421551"></p>
<p>注：strpos（）函数查找字符串在另一字符串中第一次出现的位置，对大小写敏感。</p>
<p>注：headers_list()函数返回已发送的（或待发送的）响应头部的一个列表，如需确定是否已发送报头，使用headers_sent()函数。</p>
<p>trim() 移除字符串两侧的字符；</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221113719250.png" alt="image-20220221113719250"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221105653700.png" alt="image-20220221105653700"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221105836607.png" alt="image-20220221105836607"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221110725992.png" alt="image-20220221110725992"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221110846281.png" alt="image-20220221110846281"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221112012675.png" alt="image-20220221112012675"></p>
<p> Joomla！是一个开源 CMS 软件，可以轻松地从 Internet 浏览器创建和管理主页，即使没有 HTML，CSS，FTP 等专业知识基础，也可以使用 CMS 轻松使用浏览器创建主页。例如，如果您使用过 Word，Excel，就可以使用 CMS 相对轻松地创建内容。</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221112218908.png" alt="image-20220221112218908"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221112458960.png" alt="image-20220221112458960"></p>
<p><strong>Cookie 存储于用户本地磁盘上，里面保存着浏览器访问过的网页的一些信息（比如访问时间、地址等）。</strong></p>
<ul>
<li>php 配置文件 php.ini 是影响 php 功能的最终也是最直接的方法</li>
<li> 每次初始化 php 时都会读取 php.ini 文件</li>
</ul>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221114520558.png" alt="image-20220221114520558"></p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221114601784.png" alt="image-20220221114601784"></p>
<p>array_slice() 函数在数组中根据条件取出一段值，并返回。</p>
<p>isset() 函数检查是否已经设置了会话变量。</p>
<p>$_FILES[‘file’][‘name’] 提供上传文件的实际名称。</p>
<p>NULL 是一种特殊类型，它只有一个值 NULL。</p>
<p>特殊的常量 NULL 按惯例大写，但实际上它不区分大小写。</p>
<p>a＝b！＝c</p>
<p>那么就是：</p>
<p>a=（b！=c）因为运算符的优先级最高。（多加括号就没错）</p>
<p>array_reverse() 以相反的顺序返回数组。</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221122621115.png" alt="image-20220221122621115"></p>
<p>异常处理类方法 getMessage() 返回异常的消息。</p>
<p>关于变量命名规则：</p>
<ul>
<li> 变量名可以以字母或下划线开头</li>
<li> 变量名可以由数字、字母和下划线组成</li>
<li> 不能使用+、-、%、(、)等字符作为变量名</li>
<li></li>
</ul>
<p>数值数组－带有数字索引的数组，值以线性方式存储和访问。</p>
<p>哪个方法可以使用 PHP 解析 XML 文档？</p>
<ul>
<li> simplexml_load_string()</li>
<li> loadxml()</li>
</ul>
<p>通过 $this 引用类本身中的属性或方法。</p>
<p><strong>is_a</strong> 如果对象属于该类或该类是此对象的父类则返回 TRUE。</p>
<p>if($x NEQ 8) { }</p>
<p>not equal就是不等于的意思</p>
<p>之前的PHP版本有这个东西，后面的版本可能没有这个东西了</p>
<p>PHP 对空格不敏感，这意味着一行中有多少空格字符并没啥关系，一个空白与许多空白符都是一样的。</p>
<p>如果在加载文件时出现任何问题，那么 include() 函数将生成一个警告，但是脚本将继续执行</p>
<p>PHP 提供了一个名为 __construct() 的特殊函数来定义构造函数，可以向构造函数传递任意多个参数。</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221132311158.png" alt="image-20220221132311158"></p>
<p>curl_init 初始化一个 CURL 会话。</p>
<p>PHP 从第五个版本开始支持 <strong>MySQLi</strong> 扩展</p>
<p>连接 MySql 数据库的正确语法是？</p>
<p><strong>mysql_connect(“localhost”,$username,$password)</strong></p>
<p>异常（Exception）用于在指定的错误发生时改变脚本的正常流程，结合 try, throw 和 catch 使用。</p>
<p>如果一个类被声明为 final，则不能被继承。</p>
<p>PHP 5.3版本开始引入 try/catch 异常的</p>
<p>rsort() 函数对数值数组进行降序排序。</p>
<p>array_push() 函数向第一个参数的数组尾部添加一个或多个元素（入栈），然后返回新数组的长度。</p>
<p>prev() 函数将内部指针指向数组中的上一个元素，并输出。</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221142754765.png" alt="image-20220221142754765"></p>
<p>这道题的{}相当于没有。</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221142841911.png" alt="image-20220221142841911"></p>
<p>php脚本危动态语言，不能生成dll（静态文件）</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221142935777.png" alt="image-20220221142935777"></p>
<p>当前会话指的是，不同人访问这个变量是不一样的，这个变量是跟随着访问他的那个人而变化的。</p>
<p>这个$_SEESION独立于每一个访问的，是每个人身份的象征。</p>
<p>header() 函数向客户端发送原始的 HTTP 报头，用于重定向页面。</p>
<p>eregi() 函数在一个字符串搜索指定的模式的字符串，搜索不区分大小写，eregi() 可以特别有用的检查有效性字符串,如密码。</p>
<p>func_get_args 返回一个包含函数参数列表的数组。</p>
<p>glob() 函数返回匹配指定模式的文件名或目录。</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221144001744.png" alt="image-20220221144001744"></p>
<p>uniqid() 函数基于以微秒计的当前时间，生成一个唯一的 ID。</p>
<p>memory_get_usage 返回分配给 PHP 的内存量。</p>
<p>PHP提供了 gzcompress() 和 gzuncompress() 函数压缩字符串。</p>
<p>类实现封装是为了不让外面的类随意的修改一个类的成员变量，所以在定义一个类的成员的时候，我们使用 private 关键字设置这个成员的访问权限，只能被这个类的其他成员方法调用，而不能被其他类中的方法调用，即通过本类中提供的方法来访问本类中的私有属性。</p>
<p>属性声明是由关键字 public，protected 或者 private 开头，然后跟一个普通的变量声明来组成。</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221153247753.png" alt="image-20220221153247753"></p>
<p>调用类常量的正确方法：</p>
<p>通过 <strong>类名 :: 常量名</strong> 调用。</p>
<p>class_exists 检查类是否已定义。</p>
<p>_call 是魔术方法中的一个，当程序调用到当前类中未声明或没权限调用的方法时，就会调用 __call 方法。</p>
<p>**filter_has_var()**过滤器检查指定类型的变量是否存在 ？</p>
<p>implode() 函数返回一个由数组元素组合成的带分隔符的字符串</p>
<p>strrpos() 函数查找字符串在另一字符串中最后一次出现的位置（区分大小写）。</p>
<p>strtoupper() 函数把字符串转换为大写</p>
<p>如果您调用了一个方法，但它并不存在，则会导致问题，要检查方法是否存在将使用哪个函数？</p>
<p>is_callable() 函数用于检测函数在当前环境中是否可调用；</p>
<p>scandir() 函数返回指定目录中的文件和目录的数组。</p>
<p>getlastmod 获取页面最后修改的时间。</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221155505245.png" alt="image-20220221155505245"></p>
<p>strtotime(“+45 days”)</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221155628300.png" alt="image-20220221155628300"></p>
<p>strip_tags() 函数删除字符串中的 HTML、XML 以及 PHP 的标签</p>
<p>max_input_time 指令的默认值是60秒，此变量可以以秒为单位对通过 POST、GET 以及 PUT 方式接收数据时间进行限制，默认 60 秒。</p>
<p>default不履行、违约。</p>
<p>is_uploaded_file() 函数判断指定的文件是否是通过 HTTP POST 上传的</p>
<p>session_unset() 释放当前在内存中已经创建的所有 $_SESSION 变量，但不删除 session 文件以及不释放对应的 session id。</p>
<p>session 数据被认为有效的默认时间(以秒为单位)是1440 秒。</p>
<p>preg_match() 函数用于进行正则表达式匹配，成功返回 1 ，否则返回 0。</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221183011605.png" alt="image-20220221183011605"></p>
<p>好，什么是正则表达式？</p>
<p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p>
<p>例如：</p>
<ul>
<li><p><strong>runoo+b</strong>，可以匹配 runoob、runooob、runoooooob 等，+ 号代表前面的字符必须至少出现一次（<strong>1次或多次</strong>）。</p>
</li>
<li><p><strong>runoo*b</strong>，可以匹配 runob、runoob、runoooooob 等，* 号代表前面的字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）。</p>
</li>
<li><p><strong>colou?r</strong> 可以匹配 color 或者 colour，? 问号代表前面的字符最多只可以出现一次（<strong>0次</strong>、或1次）。</p>
<p>flag{.*}    这代表了规则，：我要找一个flag{开头，}结尾，而且{}中间夹杂0个以上（*代表匹配前一个规则0次以上）任意字符（.是通配符）的字符串。</p>
</li>
</ul>
<p>preg_replace 函数执行一个正则表达式的搜索和替换。</p>
<p> 需要在 php.ini 文件中取消注释或添加 extension=php_mysqli.dll</p>
<p>self 可以访问本类中的静态属性和静态方法，可以访问父类中的静态属性和静态方法。用 self 时，可以不用实例化。</p>
<p>直接设置私有属性值的时候自动调用 __set() 方法</p>
<p>当要调用的方法不存在或权限不足时，会自动调用 __call 方法</p>
<p><img src="/2022/02/18/php-I-learn-it/index/image-20220221185827818.png" alt="image-20220221185827818"></p>
<p>说得好对</p>
<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$q</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;q&#x27;</span>])? htmlspecialchars(<span class="variable">$_GET</span>[<span class="string">&#x27;q&#x27;</span>]) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$q</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$q</span> ==<span class="string">&#x27;RUNOOB&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;菜鸟教程&lt;br&gt;http://www.runoob.com&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$q</span> ==<span class="string">&#x27;GOOGLE&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;Google 搜索&lt;br&gt;http://www.google.com&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$q</span> ==<span class="string">&#x27;TAOBAO&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;淘宝&lt;br&gt;http://www.taobao.com&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt; </span><br><span class="line">    &lt;select name=<span class="string">&quot;q&quot;</span>&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;&quot;</span>&gt;选择一个站点:&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;RUNOOB&quot;</span>&gt;Runoob&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;GOOGLE&quot;</span>&gt;Google&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;TAOBAO&quot;</span>&gt;Taobao&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span>    </span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$q</span> = <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;q&#x27;</span>])? <span class="variable">$_POST</span>[<span class="string">&#x27;q&#x27;</span>] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(is_array(<span class="variable">$q</span>)) &#123;</span><br><span class="line">    <span class="variable">$sites</span> = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;RUNOOB&#x27;</span> =&gt; <span class="string">&#x27;菜鸟教程: http://www.runoob.com&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;GOOGLE&#x27;</span> =&gt; <span class="string">&#x27;Google 搜索: http://www.google.com&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;TAOBAO&#x27;</span> =&gt; <span class="string">&#x27;淘宝: http://www.taobao.com&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$q</span> <span class="keyword">as</span> <span class="variable">$val</span>) &#123;</span><br><span class="line">        <span class="comment">// PHP_EOL 为常量，用于换行</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$sites</span>[<span class="variable">$val</span>] . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt; </span><br><span class="line">    &lt;select multiple=<span class="string">&quot;multiple&quot;</span> name=<span class="string">&quot;q[]&quot;</span>&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;&quot;</span>&gt;选择一个站点:&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;RUNOOB&quot;</span>&gt;Runoob&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;GOOGLE&quot;</span>&gt;Google&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">&quot;TAOBAO&quot;</span>&gt;Taobao&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果下拉菜单是多选的（ multiple=”multiple”），我们可以通过将设置 select <strong>name=”q[]”</strong> 以数组的方式获取，以下使用 POST 方式提交</p>
<p>PHP 单选按钮表单中 name 属性的值是一致的，value 值是不同的，代码如下所示：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$q</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;q&#x27;</span>])? htmlspecialchars(<span class="variable">$_GET</span>[<span class="string">&#x27;q&#x27;</span>]) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$q</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$q</span> ==<span class="string">&#x27;RUNOOB&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;菜鸟教程&lt;br&gt;http://www.runoob.com&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$q</span> ==<span class="string">&#x27;GOOGLE&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;Google 搜索&lt;br&gt;http://www.google.com&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$q</span> ==<span class="string">&#x27;TAOBAO&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;淘宝&lt;br&gt;http://www.taobao.com&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span>&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt; </span><br><span class="line">    &lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;q&quot;</span> value=<span class="string">&quot;RUNOOB&quot;</span> /&gt;Runoob</span><br><span class="line">    &lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;q&quot;</span> value=<span class="string">&quot;GOOGLE&quot;</span> /&gt;Google</span><br><span class="line">    &lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;q&quot;</span> value=<span class="string">&quot;TAOBAO&quot;</span> /&gt;Taobao</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="PHP表单中需引起注重的地方？"><a href="#PHP表单中需引起注重的地方？" class="headerlink" title="PHP表单中需引起注重的地方？"></a>PHP表单中需引起注重的地方？</h2><p>$_SERVER[“PHP_SELF”] 变量有可能会被黑客使用！</p>
<p>当黑客使用跨网站脚本的HTTP链接来攻击时，$_SERVER[“PHP_SELF”]服务器变量也会被植入脚本。原因就是跨网站脚本是附在执行文件的路径后面的，因此$_SERVER[“PHP_SELF”]的字符串就会包含HTTP链接后面的JavaScript程序代码。</p>
<p><strong>XSS又叫 CSS (Cross-Site Script) ,跨站脚本攻击。恶意攻击者往Web页面里插入恶意html代码，当用户浏览该页之时，嵌入其中Web里面的html代码会被执行，从而达到恶意用户的特殊目的。</strong></p>
<p>指定以下表单文件名为 “test_form.php”:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form method=&quot;post&quot; action=&quot;&lt;?php echo $_SERVER[&quot;PHP_SELF&quot;];?&gt;&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>现在，我们使用URL来指定提交地址 “test_form.php”,以上代码修改为如下所示:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form method=&quot;post&quot; action=&quot;test_form.php&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>这样做就很好了。</p>
<p>但是，考虑到用户会在浏览器地址栏中输入以下地址:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.runoob.com/test_form.php/%22%3E%3Cscript%3Ealert(&#x27;hacked&#x27;)%3C/script%3E</span><br></pre></td></tr></table></figure>

<p>以上的 URL 中，将被解析为如下代码并执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form method=&quot;post&quot; action=&quot;test_form.php/&quot;&gt;&lt;script&gt;alert(&#x27;hacked&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>代码中添加了 script 标签，并添加了alert命令。 当页面载入时会执行该Javascript代码（用户会看到弹出框）。 这仅仅只是一个简单的实例来说明PHP_SELF变量会被黑客利用。</p>
<p>请注意， <strong>任何JavaScript代码可以添加在<script>标签中！</strong> 黑客可以利用这点重定向页面到另外一台服务器的页面上，页面 代码文件中可以保护恶意代码，代码可以修改全局变量或者获取用户的表单数据。</p>
<hr>
<h2 id="如何避免-SERVER-“PHP-SELF”-被利用"><a href="#如何避免-SERVER-“PHP-SELF”-被利用" class="headerlink" title="如何避免 $_SERVER[“PHP_SELF”] 被利用?"></a>如何避免 $_SERVER[“PHP_SELF”] 被利用?</h2><p>$_SERVER[“PHP_SELF”] 可以通过 htmlspecialchars() 函数来避免被利用。</p>
<p>form 代码如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form method=&quot;post&quot; action=&quot;&lt;?php echo htmlspecialchars($_SERVER[&quot;PHP_SELF&quot;]);?&gt;&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>htmlspecialchars() 把一些预定义的字符转换为 HTML 实体。现在如果用户想利用 PHP_SELF 变量, 结果将输出如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form method=&quot;post&quot; action=&quot;test_form.php/&amp;quot;&amp;gt;&amp;lt;script&amp;gt;alert(&#x27;hacked&#x27;)&amp;lt;/script&amp;gt;&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>尝试该漏洞失败！</p>
<hr>
<h2 id="使用-PHP-验证表单数据"><a href="#使用-PHP-验证表单数据" class="headerlink" title="使用 PHP 验证表单数据"></a>使用 PHP 验证表单数据</h2><p>首先我们对用户所有提交的数据都通过 PHP 的 htmlspecialchars() 函数处理。</p>
<p>当我们使用 htmlspecialchars() 函数时，在用户尝试提交以下文本域:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;location.href(&#x27;http://www.runoob.com&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>该代码将不会被执行，因为它会被保存为HTML转义代码，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;lt;script&amp;gt;location.href(&#x27;http://www.runoob.com&#x27;)&amp;lt;/script&amp;gt;</span><br></pre></td></tr></table></figure>

<p>以上代码是安全的，可以正常在页面显示或者插入邮件中。</p>
<p>当用户提交表单时，我们将做以下两件事情：</p>
<ol>
<li>使用 PHP trim() 函数去除用户输入数据中不必要的字符 (如：空格，tab，换行)。</li>
<li>使用PHP stripslashes()函数去除用户输入数据中的反斜杠 ()</li>
</ol>
<p>接下来让我们将这些过滤的函数写在一个我们自己定义的函数中，这样可以大大提高代码的复用性。</p>
<p>将函数命名为 test_input()。</p>
<p>现在，我们可以通过test_input()函数来检测 $_POST 中的所有变量, 脚本代码如下所示：</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 定义变量并默认设置为空值</span></span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$email</span> = <span class="variable">$gender</span> = <span class="variable">$comment</span> = <span class="variable">$website</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_METHOD&quot;</span>] == <span class="string">&quot;POST&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="variable">$name</span> = test_input(<span class="variable">$_POST</span>[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">  <span class="variable">$email</span> = test_input(<span class="variable">$_POST</span>[<span class="string">&quot;email&quot;</span>]);</span><br><span class="line">  <span class="variable">$website</span> = test_input(<span class="variable">$_POST</span>[<span class="string">&quot;website&quot;</span>]);</span><br><span class="line">  <span class="variable">$comment</span> = test_input(<span class="variable">$_POST</span>[<span class="string">&quot;comment&quot;</span>]);</span><br><span class="line">  <span class="variable">$gender</span> = test_input(<span class="variable">$_POST</span>[<span class="string">&quot;gender&quot;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test_input</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="variable">$data</span> = trim(<span class="variable">$data</span>);</span><br><span class="line">  <span class="variable">$data</span> = stripslashes(<span class="variable">$data</span>);</span><br><span class="line">  <span class="variable">$data</span> = htmlspecialchars(<span class="variable">$data</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<p>我求我自己url记得写。。。</p>
<p>然后出现的报错是因为这些值没有post进去。</p>
<p>如果在前面的章节中，所有输入字段都是可选的。</p>
<p>在以下代码中我们加入了一些新的变量: $nameErr, $emailErr, $genderErr, 和 $websiteErr.。这些错误变量将显示在必需字段上。 我们还为每个$_POST变量增加了一个if else语句。 这些语句将检查 $_POST 变量是 否为空（使用php的 empty() 函数）。如果为空，将显示对应的错误信息。 如果不为空，数据将传递给test_input() 函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 定义变量并默认设为空值</span></span><br><span class="line"><span class="variable">$nameErr</span> = <span class="variable">$emailErr</span> = <span class="variable">$genderErr</span> = <span class="variable">$websiteErr</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$email</span> = <span class="variable">$gender</span> = <span class="variable">$comment</span> = <span class="variable">$website</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_METHOD&quot;</span>] == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;name&quot;</span>])) &#123;</span><br><span class="line">    <span class="variable">$nameErr</span> = <span class="string">&quot;名字是必需的。&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$name</span> = test_input(<span class="variable">$_POST</span>[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;email&quot;</span>])) &#123;</span><br><span class="line">    <span class="variable">$emailErr</span> = <span class="string">&quot;邮箱是必需的。&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$email</span> = test_input(<span class="variable">$_POST</span>[<span class="string">&quot;email&quot;</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;website&quot;</span>])) &#123;</span><br><span class="line">    <span class="variable">$website</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$website</span> = test_input(<span class="variable">$_POST</span>[<span class="string">&quot;website&quot;</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;comment&quot;</span>])) &#123;</span><br><span class="line">    <span class="variable">$comment</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$comment</span> = test_input(<span class="variable">$_POST</span>[<span class="string">&quot;comment&quot;</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;gender&quot;</span>])) &#123;</span><br><span class="line">    <span class="variable">$genderErr</span> = <span class="string">&quot;性别是必需的。&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$gender</span> = test_input(<span class="variable">$_POST</span>[<span class="string">&quot;gender&quot;</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="php-I-learn-it/image-20220221195818649.png" alt="image-20220221195818649"></p>
</script></strong></p>]]></content>
      <tags>
        <tag>php</tag>
        <tag>宝塔面板</tag>
      </tags>
  </entry>
  <entry>
    <title>萌新区题解</title>
    <url>/2022/02/14/ctf.show%E8%90%8C%E6%96%B0%E5%8C%BA%E9%A2%98%E8%A7%A3/index.html</url>
    <content><![CDATA[<p><img src="/2022/02/14/ctf.show%E8%90%8C%E6%96%B0%E5%8C%BA%E9%A2%98%E8%A7%A3/index/image-20220211180723469.png" alt="image-20220211180723469"></p>
<p>这就是萌新吧┗|｀O′|┛ 嗷~~</p>
<a id="more"></a>

<p>第一道我本来以为是输入萌新码自动回复，结果是在qq群的公告里有</p>
<p><img src="/2022/02/14/ctf.show%E8%90%8C%E6%96%B0%E5%8C%BA%E9%A2%98%E8%A7%A3/index/image-20220211181037090.png" alt="image-20220211181037090"></p>
<p>53316C6B5A6A42684D3256695A44566A4E47526A4D5459774C5556375A6D49324D32566C4D4449354F4749345A6A526B4F48303D</p>
<p>密文看起来像16进制，转字符串之后一看就是base64</p>
<p>S1lkZjBhM2ViZDVjNGRjMTYwLUV7ZmI2M2VlMDI5OGI4ZjRkOH0=</p>
<p><img src="/2022/02/14/ctf.show%E8%90%8C%E6%96%B0%E5%8C%BA%E9%A2%98%E8%A7%A3/index/image-20220211181000187.png" alt="image-20220211181000187"></p>
<p><img src="/2022/02/14/ctf.show%E8%90%8C%E6%96%B0%E5%8C%BA%E9%A2%98%E8%A7%A3/index/image-20220211181422129.png" alt="image-20220211181422129"></p>
<p>KYdf0a3ebd5c4dc160-E{fb63ee0298b8f4d8}</p>
<p>像是flag搞乱了顺序，所以是栅栏密码</p>
<p><img src="/2022/02/14/ctf.show%E8%90%8C%E6%96%B0%E5%8C%BA%E9%A2%98%E8%A7%A3/index/image-20220211183935714.png" alt="image-20220211183935714"></p>
<p>KEY{dffb06a33eeeb0d259c84bd8cf146d08-}</p>
<p>栅栏密码是一种简单的移动字符位置的加密方法，规则简单，容易破解。栅栏密码的加密方式：把文本按照一定的字数分成多个组，取每组第一个字连起来得到密文1，再取每组第二个字连起来得到密文2……最后把密文1、密文2……连成整段密文。例如：</p>
<p>明文：栅栏密码加密规则示例<br>每组字数：5</p>
<p>按照字数先把明文分成：<br>栅栏密码加<br>密规则示例</p>
<p>先取每组第一个字：栅密<br>再取每组第二个字：栏规<br>……</p>
<p>最后得到“栅密栏规密则码示加例”。</p>
<p>解密则反推：<br>密文被分成2个字一组：<br>栅密<br>栏规<br>密则<br>码示<br>加例</p>
<p>工具链接：</p>
<p><a href="https://www.sojson.com/hexadecimal.html">16进制转换，16进制转换文本字符串，在线16进制转换 | 在线工具 (sojson.com)</a></p>
<p><a href="https://tool.ip138.com/base64/">base64解码 base64编码 在线base64解码/编码工具 (ip138.com)</a></p>
<p><a href="https://www.qqxiuzi.cn/bianma/zhalanmima.php">栅栏密码在线加密解密 - 千千秀字 (qqxiuzi.cn)</a></p>
<p><img src="/2022/02/14/ctf.show%E8%90%8C%E6%96%B0%E5%8C%BA%E9%A2%98%E8%A7%A3/index/image-20220211184136409.png" alt="image-20220211184136409"></p>
<p>rdcvbg 2qase3 6tghu7这三团字符字符的共同特点就是，在键盘上都包围了一个字母，依次是：f w y</p>
<p>所以flag是KEY{fwy}</p>
<p><img src="/2022/02/14/ctf.show%E8%90%8C%E6%96%B0%E5%8C%BA%E9%A2%98%E8%A7%A3/index/image-20220211184300857.png" alt="image-20220211184300857"></p>
<p>解密工具下载 链接：<a href="https://pan.baidu.com/s/10_35gRb3S6eGW-4MLyJRuA">https://pan.baidu.com/s/10_35gRb3S6eGW-4MLyJRuA</a> 提取码：1a3f</p>
<p><img src="/2022/02/14/ctf.show%E8%90%8C%E6%96%B0%E5%8C%BA%E9%A2%98%E8%A7%A3/index/image-20220211190207722.png" alt="image-20220211190207722"></p>
<p>进入该目录下输入</p>
<p>javaw -jar CTFcrackTools.jar</p>
<p> – — .-. … . ..–.- .. … ..–.- -.-. — — .-.. ..–.- -… ..- - ..–.- -… .- -.-. — -. ..–.- .. … ..–.- -.-. — — .-.. . .-. ..–.- – – -.. -.. – -.. – -.. – – – -.. -.. -.. /– -.. – -.. -.. –/ – – – – – /– -.. -.. – -.. – /– -.. -.. –</p>
<p>看起来是摩斯密码</p>
<p>MORSE_IS_COOL_BUT_BACON_IS_COOLER_MMDDMDMDMMMDDDDMDD%u3MMMMMDDMDMDDM</p>
<p>后面的MD大小写换成AB</p>
<p><a href="http://www.hiencode.com/baconian.html">http://www.hiencode.com/baconian.html</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">guowang</span><br></pre></td></tr></table></figure>

<p>很坑的是他居然要用大写。。。</p>
<p>萌新_隐写2</p>
<p><img src="/2022/02/14/ctf.show%E8%90%8C%E6%96%B0%E5%8C%BA%E9%A2%98%E8%A7%A3/index/image-20220211225124177.png" alt="image-20220211225124177"></p>
<p>19981000</p>
<p>用这个软件暴力跑出来，解压就是了</p>
]]></content>
      <tags>
        <tag>ctf.show</tag>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10 WSL换源</title>
    <url>/2022/02/13/Win10-WSL%E6%8D%A2%E6%BA%90/index.html</url>
    <content><![CDATA[<p>桌面shift＋右键</p>
<p>输入下面的指令 一直用sudo运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -s</span><br></pre></td></tr></table></figure>

<p>输入账号的密码，注意是没有显示的，不要输错。</p>
<p>备份原始文件，便于出错后恢复</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /etc/apt/sources.list /etc/apt/sources.list.20200722</span><br></pre></td></tr></table></figure>

<p>修改服务器地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<p>先按insert然后再用backspace删除掉所有内容。</p>
<p>将里面的内容删除，变为国内镜像服务器地址<br>以下为阿里云镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>按一下esc然后输入：x，再回车。退出insert模式</p>
<p>更新：输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>hgame misc week4-摆烂</title>
    <url>/2022/02/12/%E7%9B%B2%E6%B0%B4%E5%8D%B0/index.html</url>
    <content><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="盲水印"><a href="#盲水印" class="headerlink" title="盲水印"></a>盲水印</h2><p>简单来说就是一种看不见的水印，需要通过一些软件（脚本？）</p>
<p><a href="https://github.com/chishaxie/BlindWaterMark">https://github.com/chishaxie/BlindWaterMark</a> </p>
<p>水印，一般是指图片上印有文字的水印，比如发表在微博或者CSDN的图片都会自动打上肉眼可见的文字水印。像这种一般用于标识某张图片的出处或者用于声明版权。但是这样做会破坏掉原图，而且影响美观，比较粗暴。此处我想讨论的是另一种水印–盲水印。盲水印不仅仅用于图片，也可应用于像音频这种数据流。当然这篇文章只讨论图片上的应用。盲水印隐蔽性强，给水印数据进行编码过后不易被破解出来。这是它最大的优势。</p>
<h2 id="盲水印原理"><a href="#盲水印原理" class="headerlink" title="盲水印原理"></a>盲水印原理</h2><p>在<a href="https://www.jianshu.com/p/c9f7716f8b09">前一篇文章</a>里面我写了关于傅立叶的c语言实现方式，盲水印的实现就和傅立叶相关，傅立叶变换可以把数据从时域转换到频域。而且过程可逆。盲水印就是在图像的频域上添加水印数据。再通过逆变换转回时域。区别是图片是二维数据，要把图片数据由时域转到频域需要用到二维傅立叶变换。<br> 水印添加流程图如下：</p>
<p><img src="/2022/02/12/%E7%9B%B2%E6%B0%B4%E5%8D%B0/index/webp.webp" alt="img"></p>
<h2 id="图像的二维傅立叶变换"><a href="#图像的二维傅立叶变换" class="headerlink" title="图像的二维傅立叶变换"></a>图像的二维傅立叶变换</h2><p>和一维数据不同，要想对图片进行频域转换就要使用二维傅立叶变换。<br> 其实，只要实现了一维傅立叶变换，二维傅立叶变换就不会那么难：先对图像矩阵数据每一行进行傅立叶变换，再对每一列进行傅立叶变换即完成二维傅立叶变换。这里还是用一张常见的美女lena. 对lena（256*256）进行二维傅立叶变换如下图：</p>
<p><img src="/2022/02/12/%E7%9B%B2%E6%B0%B4%E5%8D%B0/index/webp.webp" alt="img"></p>
<h2 id="水印的提取"><a href="#水印的提取" class="headerlink" title="水印的提取"></a>水印的提取</h2><p>因为水印的添加是在原图的频域上进行叠加。我们只需要将原图和加了水印的图片分别进行傅立叶变换，最后通过减法则可提取出加密过的水印数据。通过已知的密钥可以逆推出打乱的规则，这样当我们从水印图片中提取出水印像素时，可以还原出水印像素的原序列。最后就可以得到原水印。</p>
<h1 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h1><p>一直在提示压缩包已损坏，</p>
<p><img src="/2022/02/12/%E7%9B%B2%E6%B0%B4%E5%8D%B0/index/image-20220212231857844.png" alt="image-20220212231857844"></p>
<p>丢进010editor里面看到还有一张png图片</p>
<p>可以用foremost来修复</p>
<p>放进同一目录下在地址栏输cmd然后输入</p>
<p>foremost.exe 摆烂.zip</p>
<p>在output中得到png和可以输入密码解压的压缩包。</p>
<p><img src="/2022/02/12/%E7%9B%B2%E6%B0%B4%E5%8D%B0/index/image-20220212232820342.png" alt="image-20220212232820342"></p>
<p><a href="https://github.com/chishaxie/BlindWaterMark">https://github.com/chishaxie/BlindWaterMark</a></p>
<p>命令为python ./bwmforpy3.py decode ./bailan_page_0.png ./bailan_page_1.png hui.png</p>
<p><img src="/2022/02/12/%E7%9B%B2%E6%B0%B4%E5%8D%B0/index/hui.png" alt="hui"></p>
<p>里面有串字符，我太眼瞎了</p>
<p>4C*9wfg976</p>
]]></content>
      <tags>
        <tag>盲水印</tag>
        <tag>010editor</tag>
      </tags>
  </entry>
  <entry>
    <title>png格式的学习笔记</title>
    <url>/2022/02/12/png%E6%A0%BC%E5%BC%8F%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/index.html</url>
    <content><![CDATA[<p><strong>PNG的文件结构</strong></p>
<a id="more"></a>

<p>对于一个PNG文件来说，其文件头总是由位固定的字节来描述的：</p>
<table>
<thead>
<tr>
<th>十进制数</th>
<th>137 80 78 71 13 10 26 10</th>
</tr>
</thead>
<tbody><tr>
<td>十六进制数</td>
<td>89 50 4E 47 0D 0A 1A 0A</td>
</tr>
</tbody></table>
<p>其中第一个字节0x89超出了ASCII字符的范围，这是为了避免某些软件将PNG文件当做文本文件来处理。文件中剩余的部分由3个以上的PNG的数据块（Chunk）按照特定的顺序组成，因此，一个标准的PNG文件结构应该如下：</p>
<table>
<thead>
<tr>
<th>PNG文件标志</th>
<th>PNG数据块</th>
<th>……</th>
<th>PNG数据块</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>png格式：开头89504e47</p>
<p>直到看到iend还有后面4个字节</p>
<h4 id="数据块结构"><a href="#数据块结构" class="headerlink" title="数据块结构"></a>数据块结构</h4><p><img src="/2022/02/12/png%E6%A0%BC%E5%BC%8F%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/index/image-20220212104244230.png" alt="image-20220212104244230">其他细节看这篇blog</p>
<p><a href="https://blog.csdn.net/bisword/article/details/2777121">https://blog.csdn.net/bisword/article/details/2777121</a></p>
<p>在文件末尾发现50 4B 05 06，这是zip文件的标志</p>
<h1 id="Apng"><a href="#Apng" class="headerlink" title="Apng"></a>Apng</h1><p>Apng是png格式的扩展，支持动图，并且添加了对24比特图片和8比特alpha通道的支持，而gif动图是不支持alpha通道的。</p>
<h2 id="1-Apng的整体结构"><a href="#1-Apng的整体结构" class="headerlink" title="1.  Apng的整体结构"></a>1.  Apng的整体结构</h2><p>Apng的文件后缀名是.png，一张Apng图片包含一系列的png帧，每个png帧又包含当前png的相关信息，其结构图<a href="https://links.jianshu.com/go?to=https://en.wikipedia.org/wiki/APNG"><strong>（图片来自维基百科，请点击查看）</strong></a>如下：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/3427834-926a811c474d84a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p>
<p>Apng结构图</p>
<p>以下对上面的结构图进行说明：<br> <strong>1）</strong>Apng的<strong>IHDR（Image Head Chunk）</strong>用来包含Apng图片的宽、高等信息，<strong>acTL（Animation Control Chunk）</strong>包含动画播放的控制信息。<br> <strong>2）</strong>每一帧的<strong>fcTL（Frame Control Chunk）</strong>包含帧的一些控制信息，如Apng总的帧数，循环播放的次数，<strong>fdAT（Frame Data Chunk）</strong>包含每帧的图片数据信息，这跟png图片的IDAT块格式保持一致。<br> <strong>3）</strong>Apng的第一帧比较特殊，如果Apng的第一帧作为Apng默认显示的图片，则Apng结构跟上图的保持一致。如果Apng的第一帧不作为默认显示的图片，则Apng的默认显示图片从IDAT块取得，而Apng的结构图如下：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/3427834-93ccfdaee0cf8d35.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p>
<p>Apng结构图（第一帧非默认图）</p>
<p> Apng与正常的png数据结构差不多是一样的，只不过是多了三个chunk类型，分别是：<strong>acTL（Animation Control Chunk）</strong>、<strong>fdAT（Frame Data Chunk）</strong>、<strong>fcTL（Frame Control Chunk）</strong>，chunk的格式一般如下：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/3427834-78ab2c43ff7ec8d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p>
<p>Chunk的数据格式</p>
<p>Chunk由四部分组成，分别数据长度（4个字节），Chunk类型（4个字节），ChunkData，CRC（循环冗余校验，4个字节），下面分别对这三种chunk类型做具体说明。</p>
<h2 id="2-acTL"><a href="#2-acTL" class="headerlink" title="2.  acTL"></a>2.  acTL</h2><p>acTL是Apng的动画控制Chunk，包含总的帧数num_frames，播放次数num_plays，num_frames和num_plays都占有4个字节，结构如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">byte</span>    含义 </span><br><span class="line"><span class="number">0</span>    num_frames：<span class="number">0</span>~<span class="number">3</span>字节表示该Apng总的播放帧数。</span><br><span class="line"><span class="number">4</span>    num_plays：<span class="number">4</span>~<span class="number">7</span>字节表示该Apng循环播放的次数。</span><br></pre></td></tr></table></figure>

<p>num_frames一定大于等于1，如果等于1，表示Apng只有一帧，可以看成就是一张png图。<br> num_plays一定大于等于0，如果等于0，表示Apng动画是循环播放的。<br> <strong>备注：acTL一定是在IDAT前面。</strong></p>
<h2 id="3-fdAT"><a href="#3-fdAT" class="headerlink" title="3.  fdAT"></a>3.  fdAT</h2><p>fdAT是每帧的数据Chunk，与png的IDAT结构保持一致，只是额外增加了一个序列号，fdAT的结构如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">byte</span>    含义 </span><br><span class="line"><span class="number">0</span>    sequence_number：<span class="number">0</span>~<span class="number">3</span>字节表示动画帧的编号，从<span class="number">0</span>开始。</span><br><span class="line"><span class="number">4</span>    frame_data ：帧的数据信息。</span><br></pre></td></tr></table></figure>

<p>这里需要说明的是，Apng的每一帧至少包含一个fdAT，而每一个fdAT是一张png的像素压缩数据，从该fdAT中，我们可以读取数据获得一张png图片。</p>
<h2 id="4-fcTL"><a href="#4-fcTL" class="headerlink" title="4.  fcTL"></a>4.  fcTL</h2><p>fcTL是每帧的控制信息块，fcTL一定是出现在fdAT或者IDAT的前面（<strong>第一帧为默认图片</strong>），fcTL的结构如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">byte</span>    含义 </span><br><span class="line"><span class="number">0</span>    sequence_number：控制帧的序号，从<span class="number">0</span>开始。</span><br><span class="line"><span class="number">4</span>    width：帧的宽度。</span><br><span class="line"><span class="number">8</span>    height：帧的高度。</span><br><span class="line"><span class="number">12</span>    x_offset：在x方向的偏移。 </span><br><span class="line"><span class="number">16</span>    y_offset：在y方向的偏移。 </span><br><span class="line"><span class="number">20</span>    delay_num：帧动画时间间隙的分子 </span><br><span class="line"><span class="number">22</span>    delay_den：帧动画时间间隙的分母</span><br><span class="line"><span class="number">24</span>    dispose_op：在显示该帧之前，需要对前面缓冲输出区域做何种处理。</span><br><span class="line"><span class="number">25</span>    blend_op：具体显示该帧的方式。</span><br></pre></td></tr></table></figure>

<p>下面对fcTL控制块包含的内容做具体说明：<br> <strong>1）</strong> x_offset，y_offset表示显示当前帧时，x方向和y方向需要偏移的距离，如果第一帧为默认显示图片，则x_offset，y_offset为0。<br> <strong>2）</strong>width、height、x_offset、y_offset、Apng的宽高(<strong>包含在IHDR块中</strong>)之间存在下面的约束条件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x_offset &gt;= 0</span><br><span class="line">y_offset &gt;= 0</span><br><span class="line">width &gt; 0</span><br><span class="line">height &gt; 0</span><br><span class="line">x_offset + width&lt;= IHDR width</span><br><span class="line">y_offset + height &lt;= IHDR height </span><br></pre></td></tr></table></figure>

<p><strong>3）</strong>  Apng动画每帧的显示时长可以通过<code>delay_num * DELAY_FACTOR / delay_den</code>来获得，时间单位是ms，其中DELAY_FACTOR是一个常量，为1000，下面对delay_num、delay_den为0的情况做下说明。<br> delay_num = 0 ：得到帧动画时间间隙为0，当前帧播放完了，立即播放下一帧。<br> delay_den = 0：delay_den为0，默认把其当做100来计算帧动画时间间隙，计算公式是：<code>delay_num * DELAY_FACTOR / 100</code>。<br> <strong>4）</strong> dispose_op有三种类型，如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">value</span>    含义 </span><br><span class="line"><span class="number">0</span>       APNG_DISPOSE_OP_NONE：不做任何处理。</span><br><span class="line"><span class="number">1</span>       APNG_DISPOSE_OP_BACKGROUND：前一帧的x方向的偏移、y方向的偏移和当前帧的宽、高做一个剪裁，并将剪裁的区域抠成全黑色透明。</span><br><span class="line"><span class="number">2</span>       APNG_DISPOSE_OP_PREVIOUS：将当前缓冲输出区域恢复到先前的内容区域。</span><br></pre></td></tr></table></figure>

<p><strong>5）</strong>blend_op有两种类型，如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">value</span>    含义 </span><br><span class="line"><span class="number">0</span>       APNG_BLEND_OP_SOURCE：通过dispose处理后得到的bitmap，在该bitmap对当前帧的x方向的偏移、y方向的偏移和当前帧的宽、高做一个剪裁，并将剪裁的区域抠成全黑色透明，最后将当前帧写到该剪裁区域上。</span><br><span class="line"><span class="number">1</span>       APNG_BLEND_OP_OVER：当前帧覆盖到当前的缓冲区域并显示。</span><br></pre></td></tr></table></figure>

<p>APNG 规范遵循<a href="https://en.wikipedia.org/wiki/Portable_Network_Graphics#File_format">PNG 文件格式</a>，引入了三个新的辅助块：[<a href="https://en.wikipedia.org/wiki/APNG#cite_note-spec-13">13]</a></p>
<ul>
<li>动画控制块 (acTL) 在默认图像的 IDAT(s) 之前，是一种“标记”，表明这是一个动画 PNG 文件。它还包含帧数和循环动画的次数（0 表示无限）。</li>
<li>帧控制块 (fcTL) 在每个帧之前并包含其元数据：尺寸；位置（相对于默认图像）；期间; 如果一旦超过它就被清除为黑色，被前一帧替换或被下一帧覆盖；如果它的透明度适用。</li>
<li>存储帧内容的帧数据块 (fdAT)。它以序列号开头，然后具有与默认图像的 IDAT 块相同的结构。</li>
</ul>
<p>序列号适用于帧控制和帧数据块，它们一起遵循一个共同的序列，因此如果不知道 APNG 的 PNG 编辑器按照 PNG 块排序规则的允许重新排序它们，则可以恢复帧的顺序和时间。[<a href="https://en.wikipedia.org/wiki/APNG#cite_note-PNG_chunk-14">14]</a></p>
<p>帧使用与默认图像相同的位深度、颜色类型、压缩方法、过滤方法、隔行扫描方法和调色板（如果有）。</p>
<p>PNG 规范的设计考虑了未来的扩展。[<a href="https://en.wikipedia.org/wiki/APNG#cite_note-pngspec-15">15]</a>读取 PNG 文件的应用程序应该简单地忽略它不理解的任何块。这就是 APNG<a href="https://en.wikipedia.org/wiki/Backward_compatibility">向后兼容</a>的原因。现有的应用程序只识别第一帧并忽略额外的动画块。</p>
<p><a href="https://en.wikipedia.org/wiki/File:Apng_assembling.svg"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Apng_assembling.svg/720px-Apng_assembling.svg.png" alt="img"></a></p>
<p>python2的print是一个函数，python3是一个运算符。</p>
]]></content>
      <tags>
        <tag>png</tag>
      </tags>
  </entry>
  <entry>
    <title>在hexo架构下的博文放pdf</title>
    <url>/2022/02/08/beijingzhedie/index.html</url>
    <content><![CDATA[<p>呜呜可爱的曹佬 太感谢他远控帮我解决这个问题啦</p>
<a id="more"></a>

<p>第一种方案：添加permalink</p>
<p>指定一个permalink，然后将pdf资源放进asset文件夹（hexo的asset文件夹跟文件名同名）</p>
<p>就是在文件头中添加</p>
<p>permalink: /2022/02/08/beijingzhedie/index.html</p>
<p>然后把pdf丢进平时放图片那个地方（就是asset文件夹也就是同名文件夹）</p>
<p>第二种方案（不指定permalink的方法），你这个路径你可以只写你想要的文件名（其实你乱起一个名字也行）</p>
<p>我们这个时候是找不到的，但是你注意，它的报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cannot GET /2022/02/08/beijingzhedie/beijingzhedie.pdf</span><br></pre></td></tr></table></figure>

<p>重点就是，hexo必须从这个文件夹里面读到你的pdf</p>
<p>那我们就手动在这个地方放这个文件</p>
<p>这个时候它路径就对了</p>
<p>我之前跟你说过，hexo g就是自动生成文件到public文件夹下面</p>
<p>hexo d就是自动把public的文件push到github里面</p>
<p>所以你对public文件夹下的更改对github上面也会有影响的</p>
<div class="pdf-container" data-target="/2022/02/08/beijingzhedie/beijingzhedie.pdf" data-height="500px"></div>

]]></content>
      <tags>
        <tag>life</tag>
        <tag>rending-note</tag>
      </tags>
  </entry>
  <entry>
    <title>《白帽子讲web安全》reading note</title>
    <url>/2022/02/06/%E3%80%8A%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8%E3%80%8Breading-note/index.html</url>
    <content><![CDATA[<p>闲来无事扰看看书</p>
<a id="more"></a>

<h1 id="世界观安全-安全基础知识"><a href="#世界观安全-安全基础知识" class="headerlink" title="世界观安全 安全基础知识"></a>世界观安全 安全基础知识</h1><p>吴澜清的安全世界观就是：互联网本来是安全的，自从有了研究安全的人之后，互联网就变得不安全了。</p>
<p>对现代计算机系统来说，在用户态的最高权限是root（administrator）就是黑客们渴望获取的系统最高权限。</p>
<p>黑客们使用的漏洞利用代码，被称为“exploit”。有的黑客精通计算机技术，能自己挖掘漏洞，并编写exploit;而有的黑客，则只对攻击本身感兴趣，对计算机原理和编程技术的了解比较粗浅，只懂得编译别人代码，自己并没有动手能力，称为“脚本小子”。主要搞破坏的，还是这些脚本小子。</p>
<p>PHP语言至今仍然只能靠较好的代码规范来保证没有文件包含漏洞，无法从语言本身杜绝此类安全问题的发生。</p>
<p>SQL注入时web安全史上的一个里程碑。通过SQL注入，可以获取很多重要的、敏感的数据，甚至能够通过数据库获取系统访问权限，这种效果并不比直接攻击系统软件差。</p>
<p>xss（跨站脚本攻击）</p>
<p>安全三要素是安全的基本组成元素，分别是机密性、完整性、可用性。</p>
<p>机密性要求保护数据内容不能泄露，加密是实现机密性要求的常见手段。完整性则要求保护数据内容是完整。没有被篡改的。</p>
<p>完整性则要求保护数据内容是完整的、没有被篡改的。常见的保证一致性的技术手段是数字签名。</p>
<p>可用性要求保护资源是“随需而得”。</p>
<h1 id="威胁分析"><a href="#威胁分析" class="headerlink" title="威胁分析"></a>威胁分析</h1><p>威胁分析就是把所有威胁都找出来，使用一个模型，帮助我们去想，如STRIDE模型，</p>
<p><img src="/2022/02/06/%E3%80%8A%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8%E3%80%8Breading-note/index/image-20220206104750237.png" alt="image-20220206104750237"></p>
<p>但是在维护系统安全时，最让安全工程师沮丧的事情就是花费很多时间与精力实施安全方案，但是攻击者却利用了事先完全没有想到的漏洞（漏洞的定义：系统中可能被威胁利用以造成危害的地方。）完成入侵。</p>
]]></content>
      <categories>
        <category>web安全入门</category>
      </categories>
      <tags>
        <tag>reading-notes</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>python learning</title>
    <url>/2022/02/06/python-learning/index.html</url>
    <content><![CDATA[<p>人生苦短，我用 Python —— Life is short, you need Python（但是python执行时间特别长）</p>
<a id="more"></a>

<h1 id="python初识"><a href="#python初识" class="headerlink" title="python初识"></a>python初识</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>Python 的起源</li>
<li>为什么要用 Python？</li>
<li>Python 的特点</li>
<li>Python 的优缺点</li>
</ul>
<h2 id="01-Python-的起源"><a href="#01-Python-的起源" class="headerlink" title="01. Python 的起源"></a>01. Python 的起源</h2><blockquote>
<p>Python 的创始人为吉多·范罗苏姆（Guido van Rossum）</p>
</blockquote>
<p>![002_吉多-w256](E:/Python/课件和代码/课件/day01_markdown/markdown/media/14950329208518/002_吉多.jpg</p>
<ol>
<li>1989 年的圣诞节期间，吉多·范罗苏姆为了在阿姆斯特丹打发时间，决心开发一个新的<strong>解释程序</strong>，作为 ABC 语言的一种继承（<strong>感觉下什么叫牛人</strong>）</li>
<li>ABC 是由吉多参加设计的一种教学语言，就吉多本人看来，ABC 这种语言非常优美和强大，是<strong>专门为非专业程序员设计的</strong>。但是 ABC 语言并没有成功，究其原因，吉多认为是<strong>非开放</strong>造成的。吉多决心在 Python 中避免这一错误，并获取了非常好的效果</li>
<li>之所以选中 Python（蟒蛇） 作为程序的名字，是因为他是 BBC 电视剧——蒙提·派森的飞行马戏团（Monty Python’s Flying Circus）的爱好者</li>
<li>1991 年，第一个 Python <strong>解释器</strong> 诞生，它是用 C 语言实现的，并能够调用 C 语言的库文件</li>
</ol>
<h3 id="1-1-解释器（科普）"><a href="#1-1-解释器（科普）" class="headerlink" title="1.1 解释器（科普）"></a>1.1 解释器（科普）</h3><p><strong>计算机不能直接理解任何除机器语言以外的语言</strong>，所以必须要把程序员所写的程序语言翻译成机器语言，计算机才能执行程序。<strong>将其他语言翻译成机器语言的工具，被称为编译器</strong></p>
<p>编译器翻译的方式有两种：一个是<strong>编译</strong>，另外一个是<strong>解释</strong>。两种方式之间的区别在于<strong>翻译时间点的不同</strong>。当编译器<strong>以解释方式运行的时候</strong>，也称之为<strong>解释器</strong></p>
<p><a href="https://imgchr.com/i/3ytslF"><img src="/2022/02/06/python-learning/index/3ytslF.md.png" alt="3ytslF.md.png"></a></p>
<ul>
<li><strong>编译型语言</strong>：程序在执行之前需要一个专门的编译过程，把程序编译成为机器语言的文件，运行时不需要重新翻译，直接使用编译的结果就行了。程序执行效率高，依赖编译器，跨平台性差些。如 C、C++</li>
<li><strong>解释型语言</strong>：解释型语言编写的程序不进行预先编译，以文本方式存储程序代码，会将代码一句一句直接运行。在发布程序时，看起来省了道编译工序，但是在运行程序的时候，必须先解释再运行</li>
</ul>
<h4 id="编译型语言和解释型语言对比"><a href="#编译型语言和解释型语言对比" class="headerlink" title="编译型语言和解释型语言对比"></a>编译型语言和解释型语言对比</h4><ul>
<li><strong>速度</strong> —— 编译型语言比解释型语言执行速度快</li>
<li><strong>跨平台性</strong> —— 解释型语言比编译型语言跨平台性好</li>
</ul>
<h3 id="1-2-Python-的设计目标"><a href="#1-2-Python-的设计目标" class="headerlink" title="1.2 Python 的设计目标"></a>1.2 Python 的设计目标</h3><p>1999 年，吉多·范罗苏姆向 DARPA 提交了一条名为 “Computer Programming for Everybody” 的资金申请，并在后来说明了他对 Python 的目标：</p>
<ul>
<li>一门<strong>简单直观的语言</strong>并与主要竞争者一样强大</li>
<li><strong>开源</strong>，以便任何人都可以为它做贡献</li>
<li>代码<strong>像纯英语那样容易理解</strong></li>
<li>适用于<strong>短期</strong>开发的日常任务</li>
</ul>
<p>这些想法中的基本都已经成为现实，Python 已经成为一门流行的编程语言</p>
<h3 id="1-3-Python-的设计哲学"><a href="#1-3-Python-的设计哲学" class="headerlink" title="1.3 Python 的设计哲学"></a>1.3 Python 的设计哲学</h3><ol>
<li>优雅</li>
<li>明确</li>
<li>简单</li>
</ol>
<ul>
<li>Python 开发者的哲学是：<strong>用一种方法，最好是只有一种方法来做一件事</strong></li>
<li>如果面临多种选择，Python 开发者一般会拒绝花俏的语法，而选择<strong>明确没有或者很少有歧义的语法</strong></li>
</ul>
<blockquote>
<p>在 Python 社区，吉多被称为“仁慈的独裁者”</p>
</blockquote>
<h2 id="02-为什么选择-Python？"><a href="#02-为什么选择-Python？" class="headerlink" title="02. 为什么选择 Python？"></a>02. 为什么选择 Python？</h2><ul>
<li>代码量少</li>
<li>……</li>
</ul>
<blockquote>
<p>同一样问题，用不同的语言解决，代码量差距还是很多的，一般情况下 <code>Python</code> 是 <code>Java</code> 的 <strong>1/5</strong>，所以说 <strong>人生苦短，我用 Python</strong></p>
</blockquote>
<h2 id="03-Python-特点"><a href="#03-Python-特点" class="headerlink" title="03. Python 特点"></a>03. Python 特点</h2><ul>
<li><p>Python 是</p>
<p>完全面向对象的语言</p>
<ul>
<li><strong>函数</strong>、<strong>模块</strong>、<strong>数字</strong>、<strong>字符串</strong>都是对象，<strong>在 Python 中一切皆对象</strong></li>
<li>完全支持继承、重载、多重继承</li>
<li>支持重载运算符，也支持泛型设计</li>
</ul>
</li>
<li><p>Python <strong>拥有一个强大的标准库</strong>，Python 语言的核心只包含 <strong>数字</strong>、<strong>字符串</strong>、<strong>列表</strong>、<strong>字典</strong>、<strong>文件</strong> 等常见类型和函数，而由 Python 标准库提供了 <strong>系统管理</strong>、<strong>网络通信</strong>、<strong>文本处理</strong>、<strong>数据库接口</strong>、<strong>图形系统</strong>、<strong>XML 处理</strong> 等额外的功能</p>
</li>
<li><p>Python 社区提供了<strong>大量的第三方模块</strong>，使用方式与标准库类似。它们的功能覆盖 <strong>科学计算</strong>、<strong>人工智能</strong>、<strong>机器学习</strong>、<strong>Web 开发</strong>、<strong>数据库接口</strong>、<strong>图形系统</strong> 多个领域</p>
</li>
<li><p>请务必注意，Python程序是大小写敏感的，如果写错了大小写，程序会报错。</p>
</li>
</ul>
<h3 id="面向对象的思维方式"><a href="#面向对象的思维方式" class="headerlink" title="面向对象的思维方式"></a>面向对象的思维方式</h3><ul>
<li><strong>面向对象</strong> 是一种 <strong>思维方式</strong>，也是一门 <strong>程序设计技术</strong></li>
<li>要解决一个问题前，首先考虑由<strong>谁</strong>来做，怎么做事情是<strong>谁</strong>的职责，最后把事情做好就行！<ul>
<li><strong>对象</strong> 就是 <strong>谁</strong></li>
</ul>
</li>
<li>要解决复杂的问题，就可以找<strong>多个不同的对象</strong>，<strong>各司其职</strong>，共同实现，最终完成需求</li>
</ul>
<h2 id="04-Python-的优缺点"><a href="#04-Python-的优缺点" class="headerlink" title="04. Python 的优缺点"></a>04. Python 的优缺点</h2><h3 id="4-1-优点"><a href="#4-1-优点" class="headerlink" title="4.1 优点"></a>4.1 优点</h3><ul>
<li>简单、易学</li>
<li>免费、开源</li>
<li><strong>面向对象</strong></li>
<li>丰富的库</li>
<li>可扩展性<ul>
<li>如果需要一段关键代码运行得更快或者希望某些算法不公开，可以把这部分程序用 <code>C</code> 或 <code>C++</code> 编写，然后在 <code>Python</code> 程序中使用它们</li>
</ul>
</li>
<li>……</li>
</ul>
<h3 id="4-2-缺点"><a href="#4-2-缺点" class="headerlink" title="4.2 缺点"></a>4.2 缺点</h3><ul>
<li><p>运行速度</p>
</li>
<li><p>国内市场较小</p>
</li>
<li><p>中文资料匮乏</p>
<h1 id="python注释"><a href="#python注释" class="headerlink" title="python注释"></a>python注释</h1></li>
</ul>
<h2 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h2><ul>
<li>注释的作用</li>
<li>单行注释（行注释）</li>
<li>多行注释（块注释）</li>
</ul>
<h2 id="01-注释的作用"><a href="#01-注释的作用" class="headerlink" title="01. 注释的作用"></a>01. 注释的作用</h2><blockquote>
<p>使用用自己熟悉的语言，在程序中对某些代码进行标注说明，增强程序的可读性</p>
</blockquote>
<h2 id="02-单行注释-行注释"><a href="#02-单行注释-行注释" class="headerlink" title="02. 单行注释(行注释)"></a>02. 单行注释(行注释)</h2><ul>
<li>以 <code>#</code> 开头，<code>#</code> 右边的所有东西都被当做说明文字，而不是真正要执行的程序，只起到辅助说明作用</li>
<li>示例代码如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 这是第一个单行注释</span><br><span class="line">print(&quot;hello python&quot;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>为了保证代码的可读性，<code>#</code> 后面建议先添加一个空格，然后再编写相应的说明文字</p>
</blockquote>
<h3 id="在代码后面增加的单行注释"><a href="#在代码后面增加的单行注释" class="headerlink" title="在代码后面增加的单行注释"></a>在代码后面增加的单行注释</h3><ul>
<li>在程序开发时，同样可以使用 <code>#</code> 在代码的后面（旁边）增加说明性的文字</li>
<li>但是，需要注意的是，<strong>为了保证代码的可读性</strong>，<strong>注释和代码之间</strong> 至少要有 <strong>两个空格</strong></li>
<li>示例代码如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&quot;hello python&quot;)  # 输出 `hello python`</span><br></pre></td></tr></table></figure>

<h2 id="03-多行注释（块注释）"><a href="#03-多行注释（块注释）" class="headerlink" title="03. 多行注释（块注释）"></a>03. 多行注释（块注释）</h2><ul>
<li>如果希望编写的 <strong>注释信息很多，一行无法显示</strong>，就可以使用多行注释</li>
<li>要在 Python 程序中使用多行注释，可以用 <strong>一对 连续的 三个 引号</strong>(单引号和双引号都可以)</li>
<li>示例代码如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">这是一个多行注释</span><br><span class="line"></span><br><span class="line">在多行注释之间，可以写很多很多的内容……</span><br><span class="line">&quot;&quot;&quot; </span><br><span class="line">print(&quot;hello python&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="什么时候需要使用注释？"><a href="#什么时候需要使用注释？" class="headerlink" title="什么时候需要使用注释？"></a>什么时候需要使用注释？</h3><ol>
<li><strong>注释不是越多越好</strong>，对于一目了然的代码，不需要添加注释</li>
<li>对于 <strong>复杂的操作</strong>，应该在操作开始前写上若干行注释</li>
<li>对于 <strong>不是一目了然的代码</strong>，应在其行尾添加注释（为了提高可读性，注释应该至少离开代码 2 个空格）</li>
<li>绝不要描述代码，假设阅读代码的人比你更懂 Python，他只是不知道你的代码要做什么</li>
</ol>
<blockquote>
<p>在一些正规的开发团队，通常会有 <strong>代码审核</strong> 的惯例，就是一个团队中彼此阅读对方的代码</p>
</blockquote>
<h3 id="关于代码规范"><a href="#关于代码规范" class="headerlink" title="关于代码规范"></a>关于代码规范</h3><ul>
<li><code>Python</code> 官方提供有一系列 PEP（Python Enhancement Proposals） 文档</li>
<li>其中第 8 篇文档专门针对 <strong>Python 的代码格式</strong> 给出了建议，也就是俗称的 <strong>PEP 8</strong></li>
<li>文档地址：<a href="https://www.python.org/dev/peps/pep-0008/">https://www.python.org/dev/peps/pep-0008/</a></li>
<li>谷歌有对应的中文文档：<a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/">http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/</a></li>
</ul>
<blockquote>
<p>任何语言的程序员，编写出符合规范的代码，是开始程序生涯的第一步</p>
</blockquote>
<h1 id="第一个python程序"><a href="#第一个python程序" class="headerlink" title="第一个python程序"></a>第一个python程序</h1><h4 id="第一个Python程序"><a href="#第一个Python程序" class="headerlink" title="第一个Python程序"></a>第一个Python程序</h4><hr>
<p>在正式编写第一个Python程序前，我们先复习一下什么是命令行模式和Python交互模式。</p>
<h3 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h3><p>在Windows开始菜单选择“命令提示符”，就进入到命令行模式，它的提示符类似<code>C:\&gt;</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌────────────────────────────────────────────────────────┐</span><br><span class="line">│Command Prompt                                    - □ x │</span><br><span class="line">├────────────────────────────────────────────────────────┤</span><br><span class="line">│Microsoft Windows [Version 10.0.0]                      │</span><br><span class="line">│(c) 2015 Microsoft Corporation. All rights reserved.    │</span><br><span class="line">|                                                     │</span><br><span class="line">│C:\&gt; _                                                  │</span><br><span class="line">│                                                       |                                                       │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>

<h3 id="Python交互模式"><a href="#Python交互模式" class="headerlink" title="Python交互模式"></a>Python交互模式</h3><p>在命令行模式下敲命令<code>python</code>，就看到类似如下的一堆文本输出，然后就进入到Python交互模式，它的提示符是<code>&gt;&gt;&gt;</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌────────────────────────────────────────────────────────┐</span><br><span class="line">│Command Prompt - python                           - □ x │</span><br><span class="line">├────────────────────────────────────────────────────────┤</span><br><span class="line">│Microsoft Windows [Version 10.0.0]                      │</span><br><span class="line">│(c) 2015 Microsoft Corporation. All rights reserved.    │</span><br><span class="line">│                                                        │</span><br><span class="line">│C:\&gt; python                                             │</span><br><span class="line">│Python 3.7 ... on win32                                 │</span><br><span class="line">│Type &quot;help&quot;, ... for more information.                  │</span><br><span class="line">│&gt;&gt;&gt; _                                                   │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>

<p>在Python交互模式下输入<code>exit()</code>并回车，就退出了Python交互模式，并回到命令行模式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌────────────────────────────────────────────────────────┐</span><br><span class="line">│Command Prompt                                    - □ x │</span><br><span class="line">├────────────────────────────────────────────────────────┤</span><br><span class="line">│Microsoft Windows [Version 10.0.0]                      │</span><br><span class="line">│(c) 2015 Microsoft Corporation. All rights reserved.    │</span><br><span class="line">│                                                        │</span><br><span class="line">│C:\&gt; python                                             │</span><br><span class="line">│Python 3.7 ... on win32                                 │</span><br><span class="line">│Type &quot;help&quot;, ... for more information.                  │</span><br><span class="line">│&gt;&gt;&gt; exit()                                              │</span><br><span class="line">│                                                        │</span><br><span class="line">│C:\&gt; _                                                  │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>

<p>也可以直接通过开始菜单选择<code>Python (command line)</code>菜单项，<em>直接进入</em>Python交互模式，但是输入<code>exit()</code>后窗口会直接关闭，不会回到命令行模式。</p>
<p>了解了如何启动和退出Python的交互模式，我们就可以正式开始编写Python代码了。</p>
<p>在写代码之前，请<em>千万不要</em>用“复制”-“粘贴”把代码从页面粘贴到你自己的电脑上。写程序也讲究一个感觉，你需要一个字母一个字母地把代码自己敲进去，在敲代码的过程中，初学者经常会敲错代码：拼写不对，大小写不对，混用中英文标点，混用空格和Tab键，所以，你需要仔细地检查、对照，才能以最快的速度掌握如何写程序。</p>
<p>在Python的交互式命令行写程序，好处是一下就能得到结果，坏处是没法保存，下次还想运行的时候，还得再敲一遍。</p>
<p>所以，实际开发的时候，我们总是使用一个文本编辑器来写代码，写完了，保存为一个文件，这样，程序就可以反复运行了。</p>
<p>现在，我们就把上次的<code>&#39;hello, world&#39;</code>程序用文本编辑器写出来，保存下来。</p>
<p>那么问题来了：文本编辑器到底哪家强？</p>
<p><strong>Visual Studio Code!</strong></p>
<p>我们推荐微软出品的<a href="https://code.visualstudio.com/">Visual Studio Code</a>，它不是那个大块头的Visual Studio，它是一个精简版的迷你Visual Studio，并且，Visual Studio Code可以跨！平！台！Windows、Mac和Linux通用。</p>
<p>请注意，<em>不要用Word和Windows自带的记事本</em>。Word保存的不是纯文本文件，而记事本会自作聪明地在文件开始的地方加上几个特殊字符（UTF-8 BOM），结果会导致程序运行出现莫名其妙的错误。</p>
<p>安装好文本编辑器后，输入以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&#x27;hello, world&#x27;)</span><br></pre></td></tr></table></figure>

<p>注意<code>print</code>前面不要有任何空格。然后，选择一个目录，例如<code>C:\work</code>，把文件保存为<code>hello.py</code>，就可以打开命令行窗口，把当前目录切换到<code>hello.py</code>所在目录，就可以运行这个程序了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\work&gt; python hello.py</span><br><span class="line">hello, world</span><br></pre></td></tr></table></figure>

<p>也可以保存为别的名字，比如<code>first.py</code>，但是必须要以<code>.py</code>结尾，其他的都不行。此外，文件名只能是英文字母、数字和下划线的组合。</p>
<p>如果当前目录下没有<code>hello.py</code>这个文件，运行<code>python hello.py</code>就会报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\IEUser&gt; python hello.py</span><br><span class="line">python: can&#x27;t open file &#x27;hello.py&#x27;: [Errno 2] No such file or directory</span><br></pre></td></tr></table></figure>

<h1 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h1><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>用<code>print()</code>在括号中加上字符串，就可以向屏幕上输出指定的文字。比如输出<code>&#39;hello, world&#39;</code>，用代码实现如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&#x27;hello, world&#x27;)</span><br></pre></td></tr></table></figure>

<p><code>print()</code>函数也可以接受多个字符串，用逗号“,”隔开，就可以连成一串输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&#x27;The quick brown fox&#x27;, &#x27;jumps over&#x27;, &#x27;the lazy dog&#x27;)</span><br><span class="line">The quick brown fox jumps over the lazy dog</span><br></pre></td></tr></table></figure>

<p><code>print()</code>会依次打印每个字符串，遇到逗号“,”会输出一个空格，因此，输出的字符串是这样拼起来的：</p>
<p><img src="/2022/02/06/python-learning/index/l.png" alt="print-explain"></p>
<p><code>print()</code>也可以打印整数，或者计算结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(300)</span><br><span class="line">300</span><br><span class="line">&gt;&gt;&gt; print(100 + 200)</span><br><span class="line">300</span><br></pre></td></tr></table></figure>

<p>因此，我们可以把计算<code>100 + 200</code>的结果打印得更漂亮一点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&#x27;100 + 200 =&#x27;, 100 + 200)</span><br><span class="line">100 + 200 = 300</span><br></pre></td></tr></table></figure>

<p>注意，对于<code>100 + 200</code>，Python解释器自动计算出结果<code>300</code>，但是，<code>&#39;100 + 200 =&#39;</code>是字符串而非数学公式，Python把它视为字符串，请自行解释上述打印结果。</p>
<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>现在，你已经可以用<code>print()</code>输出你想要的结果了。但是，如果要让用户从电脑输入一些字符怎么办？Python提供了一个<code>input()</code>，可以让用户输入字符串，并存放到一个变量里。比如输入用户的名字：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; name = input()</span><br><span class="line">Michael</span><br></pre></td></tr></table></figure>

<p>当你输入<code>name = input()</code>并按下回车后，Python交互式命令行就在等待你的输入了。这时，你可以输入任意字符，然后按回车后完成输入。</p>
<p>输入完成后，不会有任何提示，Python交互式命令行又回到<code>&gt;&gt;&gt;</code>状态了。那我们刚才输入的内容到哪去了？答案是存放到<code>name</code>变量里了。可以直接输入<code>name</code>查看变量内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; name</span><br><span class="line">&#x27;Michael&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>什么是变量？</strong>请回忆初中数学所学的代数基础知识：</p>
<p>设正方形的边长为<code>a</code>，则正方形的面积为<code>a x a</code>。把边长<code>a</code>看做一个变量，我们就可以根据<code>a</code>的值计算正方形的面积，比如：</p>
<p>若a=2，则面积为a x a = 2 x 2 = 4；</p>
<p>若a=3.5，则面积为a x a = 3.5 x 3.5 = 12.25。</p>
<p>在计算机程序中，变量不仅可以为整数或浮点数，还可以是字符串，因此，<code>name</code>作为一个变量就是一个字符串。</p>
<p>要打印出<code>name</code>变量的内容，除了直接写<code>name</code>然后按回车外，还可以用<code>print()</code>函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(name)</span><br><span class="line">Michael</span><br></pre></td></tr></table></figure>

<p>有了输入和输出，我们就可以把上次打印<code>&#39;hello, world&#39;</code>的程序改成有点意义的程序了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name = input()</span><br><span class="line">print(&#x27;hello,&#x27;, name)</span><br></pre></td></tr></table></figure>

<p>运行上面的程序，第一行代码会让用户输入任意字符作为自己的名字，然后存入<code>name</code>变量中；第二行代码会根据用户的名字向用户说<code>hello</code>，比如输入<code>Michael</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Workspace&gt; python hello.py</span><br><span class="line">Michael</span><br><span class="line">hello, Michael</span><br></pre></td></tr></table></figure>

<p>但是程序运行的时候，没有任何提示信息告诉用户：“嘿，赶紧输入你的名字”，这样显得很不友好。幸好，<code>input()</code>可以让你显示一个字符串来提示用户，于是我们把代码改成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name = input(&#x27;please enter your name: &#x27;)</span><br><span class="line">print(&#x27;hello,&#x27;, name)</span><br></pre></td></tr></table></figure>

<p>再次运行这个程序，你会发现，程序一运行，会首先打印出<code>please enter your name:</code>，这样，用户就可以根据提示，输入名字后，得到<code>hello, xxx</code>的输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Workspace&gt; python hello.py</span><br><span class="line">please enter your name: Michael</span><br><span class="line">hello, Michael</span><br></pre></td></tr></table></figure>

<p>每次运行该程序，根据用户输入的不同，输出结果也会不同。</p>
<p>在命令行下，输入和输出就是这么简单。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>任何计算机程序都是为了执行一个特定的任务，有了输入，用户才能告诉计算机程序所需的信息，有了输出，程序运行后才能告诉用户任务的结果。</p>
<p>输入是Input，输出是Output，因此，我们把输入输出统称为Input/Output，或者简写为IO。</p>
<p><code>input()</code>和<code>print()</code>是在命令行下面最基本的输入和输出，但是，用户也可以通过其他更高级的图形界面完成输入和输出，比如，在网页上的一个文本框输入自己的名字，点击“确定”后在网页上看到输出信息。</p>
<h1 id="数据类型和变量"><a href="#数据类型和变量" class="headerlink" title="数据类型和变量"></a>数据类型和变量</h1><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>计算机顾名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。但是，计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在Python中，能够直接处理的数据类型有以下几种：</p>
<h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><p>Python可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：<code>1</code>，<code>100</code>，<code>-8080</code>，<code>0</code>，等等。</p>
<p>计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用<code>0x</code>前缀和0-9，a-f表示，例如：<code>0xff00</code>，<code>0xa5b4c3d2</code>，等等。</p>
<p>对于很大的数，例如<code>10000000000</code>，很难数清楚0的个数。Python允许在数字中间以<code>_</code>分隔，因此，写成<code>10_000_000_000</code>和<code>10000000000</code>是完全一样的。十六进制数也可以写成<code>0xa1b2_c3d4</code>。</p>
<h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x109和12.3x108是完全相等的。浮点数可以用数学写法，如<code>1.23</code>，<code>3.14</code>，<code>-9.01</code>，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x109就是<code>1.23e9</code>，或者<code>12.3e8</code>，0.000012可以写成<code>1.2e-5</code>，等等。</p>
<p>整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。</p>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>字符串是以单引号<code>&#39;</code>或双引号<code>&quot;</code>括起来的任意文本，比如<code>&#39;abc&#39;</code>，<code>&quot;xyz&quot;</code>等等。请注意，<code>&#39;&#39;</code>或<code>&quot;&quot;</code>本身只是一种表示方式，不是字符串的一部分，因此，字符串<code>&#39;abc&#39;</code>只有<code>a</code>，<code>b</code>，<code>c</code>这3个字符。如果<code>&#39;</code>本身也是一个字符，那就可以用<code>&quot;&quot;</code>括起来，比如<code>&quot;I&#39;m OK&quot;</code>包含的字符是<code>I</code>，<code>&#39;</code>，<code>m</code>，空格，<code>O</code>，<code>K</code>这6个字符。</p>
<p>如果字符串内部既包含<code>&#39;</code>又包含<code>&quot;</code>怎么办？可以用**转义字符<code>\</code>**来标识，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;I\&#x27;m \&quot;OK\&quot;!&#x27;</span><br></pre></td></tr></table></figure>

<p>表示的字符串内容是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I&#x27;m &quot;OK&quot;!</span><br></pre></td></tr></table></figure>

<p>转义字符<code>\</code>可以转义很多字符，比如<code>\n</code>表示换行，<code>\t</code>表示制表符，字符<code>\</code>本身也要转义，所以<code>\\</code>表示的字符就是<code>\</code>，可以在Python的交互式命令行用<code>print()</code>打印字符串看看：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&#x27;I\&#x27;m ok.&#x27;)</span><br><span class="line">I&#x27;m ok.</span><br><span class="line">&gt;&gt;&gt; print(&#x27;I\&#x27;m learning\nPython.&#x27;)</span><br><span class="line">I&#x27;m learning</span><br><span class="line">Python.</span><br><span class="line">&gt;&gt;&gt; print(&#x27;\\\n\\&#x27;)</span><br><span class="line">\</span><br><span class="line">\</span><br></pre></td></tr></table></figure>

<p>如果字符串里面有很多字符都需要转义，就需要加很多<code>\</code>，为了简化，<strong>Python还允许用<code>r&#39;&#39;</code>表示<code>&#39;&#39;</code>内部的字符串默认不转义</strong>，可以自己试试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&#x27;\\\t\\&#x27;)</span><br><span class="line">\       \</span><br><span class="line">&gt;&gt;&gt; print(r&#x27;\\\t\\&#x27;)</span><br><span class="line">\\\t\\</span><br></pre></td></tr></table></figure>

<p>如果字符串内部有很多换行，用<code>\n</code>写在一行里不好阅读，为了简化，Python允许用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>的格式表示多行内容，可以自己试试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&#x27;&#x27;&#x27;line1</span><br><span class="line">... line2</span><br><span class="line">... line3&#x27;&#x27;&#x27;)</span><br><span class="line">line1</span><br><span class="line">line2</span><br><span class="line">line3</span><br></pre></td></tr></table></figure>

<p>上面是在交互式命令行内输入，注意在输入多行内容时，提示符由<code>&gt;&gt;&gt;</code>变为<code>...</code>，提示你可以接着上一行输入，注意<code>...</code>是提示符，不是代码的一部分：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌────────────────────────────────────────────────────────┐</span><br><span class="line">│Command Prompt - python                           _ □ x │</span><br><span class="line">├────────────────────────────────────────────────────────┤</span><br><span class="line">│&gt;&gt;&gt; print(&#x27;&#x27;&#x27;line1                                      │</span><br><span class="line">│... line2                                               │</span><br><span class="line">│... line3&#x27;&#x27;&#x27;)                                           │</span><br><span class="line">│line1                                                   │</span><br><span class="line">│line2                                                   │</span><br><span class="line">│line3                                                   │</span><br><span class="line">│                                                        │</span><br><span class="line">│&gt;&gt;&gt; _                                                   │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>

<p>当输入完结束符`````和括号<code>)</code>后，执行该语句并打印结果。</p>
<p>如果写成程序并存为<code>.py</code>文件，就是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&#x27;&#x27;&#x27;line1</span><br><span class="line">line2</span><br><span class="line">line3&#x27;&#x27;&#x27;)</span><br></pre></td></tr></table></figure>

<p><img src="/2022/02/06/python-learning/index/image-20220206114546466.png" alt="image-20220206114546466"></p>
<h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h4><p>布尔值和布尔代数的表示完全一致，<strong>一个布尔值只有<code>True</code>、<code>False</code>两种值</strong>，要么是<code>True</code>，要么是<code>False</code>，在Python中，可以直接用<code>True</code>、<code>False</code>表示布尔值（请注意大小写），也可以通过布尔运算计算出来：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; True</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; False</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; 3 &gt; 2</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; 3 &gt; 5</span><br><span class="line">False</span><br></pre></td></tr></table></figure>

<p>布尔值可以用<code>and</code>、<code>or</code>和<code>not</code>运算。</p>
<p><code>and</code>运算是与运算，只有所有都为<code>True</code>，<code>and</code>运算结果才是<code>True</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; True and True</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; True and False</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; False and False</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; 5 &gt; 3 and 3 &gt; 1</span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<p><code>or</code>运算是或运算，只要其中有一个为<code>True</code>，<code>or</code>运算结果就是<code>True</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; True or True</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; True or False</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; False or False</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; 5 &gt; 3 or 1 &gt; 3</span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<p><code>not</code>运算是非运算，它是一个单目运算符，把<code>True</code>变成<code>False</code>，<code>False</code>变成<code>True</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; not True</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; not False</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; not 1 &gt; 2</span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<p>布尔值经常用在条件判断中，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if age &gt;= 18:</span><br><span class="line">    print(&#x27;adult&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;teenager&#x27;)</span><br></pre></td></tr></table></figure>

<h4 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h4><p>空值是Python里一个特殊的值，用<code>None</code>表示。<code>None</code>不能理解为<code>0</code>，因为<code>0</code>是有意义的，而<code>None</code>是一个特殊的空值。</p>
<p>此外，Python还提供了列表、字典等多种数据类型，还允许创建自定义数据类型，我们后面会继续讲到。</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量的概念基本上和初中代数的方程变量是一致的，只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。</p>
<p>变量在程序中就是用一个变量名表示了，变量名必须是大小写英文、数字和<code>_</code>的组合，且不能用数字开头，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = 1</span><br></pre></td></tr></table></figure>

<p>变量<code>a</code>是一个整数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t_007 = &#x27;T007&#x27;</span><br></pre></td></tr></table></figure>

<p>变量<code>t_007</code>是一个字符串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Answer = True</span><br></pre></td></tr></table></figure>

<p>变量<code>Answer</code>是一个布尔值<code>True</code>。</p>
<p>在Python中，等号<code>=</code>是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，<strong>而且可以是不同类型的变量</strong></p>
<p>这种变量本身类型不固定的语言称之为<em>动态语言</em>，与之对应的是<em>静态语言</em>。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下（// 表示注释）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a = 123; // a是整数类型变量</span><br><span class="line">a = &quot;ABC&quot;; // 错误：不能把字符串赋给整型变量</span><br></pre></td></tr></table></figure>

<p>和静态语言相比，动态语言更灵活，就是这个原因。</p>
<p>最后，理解变量在计算机内存中的表示也非常重要。当我们写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = &#x27;ABC&#x27;</span><br></pre></td></tr></table></figure>

<p>时，Python解释器干了两件事情：</p>
<ol>
<li>在内存中创建了一个<code>&#39;ABC&#39;</code>的字符串；</li>
<li>在内存中创建了一个名为<code>a</code>的变量，并把它指向<code>&#39;ABC&#39;</code>。</li>
</ol>
<p>也可以把一个变量<code>a</code>赋值给另一个变量<code>b</code>，这个操作实际上是<strong>把变量<code>b</code>指向变量<code>a</code>所指向的数据</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = &#x27;ABC&#x27;</span><br><span class="line">b = a</span><br><span class="line">a = &#x27;XYZ&#x27;</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>

<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，通常用全部大写的变量名表示常量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PI = 3.14159265359</span><br></pre></td></tr></table></figure>

<p>但事实上<code>PI</code>仍然是一个变量，Python根本没有任何机制保证<code>PI</code>不会被改变，所以，<strong>用全部大写的变量名表示常量只是一个习惯上的用法</strong>，如果你一定要改变变量<code>PI</code>的值，也没人能拦住你。</p>
<p>最后解释一下整数的除法为什么也是精确的。在Python中，有两种除法，一种除法是<code>/</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; 10 / 3</span><br><span class="line">3.3333333333333335</span><br></pre></td></tr></table></figure>

<p><code>/</code>除法计算结果是<strong>浮点数</strong>，即使是<strong>两个整数恰好整除，结果也是浮点数</strong>：（后面.0）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; 9 / 3</span><br><span class="line">3.0</span><br></pre></td></tr></table></figure>

<p>还有一种除法是<code>//</code>，称为<strong>地板除</strong>，<strong>两个整数的除法仍然是整数</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; 10 // 3</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<p>你没有看错，整数的地板除<code>//</code>永远是整数，即使除不尽。要做精确的除法，使用<code>/</code>就可以。</p>
<p>因为<code>//</code>除法只取结果的整数部分，所以Python还提供一个余数运算，可以得到两个整数相除的余数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; 10 % 3</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<p>无论整数做<code>//</code>除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的。</p>
<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>Python支持多种数据类型，在计算机内部，可以把任何数据都看成一个“对象”，而变量就是在程序中用来指向这些数据对象的，对变量赋值就是把数据和变量给关联起来。</p>
<p>对变量赋值<code>x = y</code>是把变量<code>x</code>指向真正的对象，该对象是变量<code>y</code>所指向的。随后对变量<code>y</code>的赋值<em>不影响</em>变量<code>x</code>的指向。</p>
<p>注意：<strong>Python的整数没有大小限制</strong>，而某些语言的整数根据其存储长度是有大小限制的，例如Java对32位整数的范围限制在<code>-2147483648</code>-<code>2147483647</code>。</p>
<p><strong>Python的浮点数也没有大小限制</strong>，但是超出一定范围就直接表示为**<code>inf</code>（无限大）**。</p>
<h1 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h1><p>我们已经讲过了，字符串也是一种数据类型，但是，字符串比较特殊的是还有一个编码问题。</p>
<p>因为<strong>计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理</strong>。最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是255（二进制11111111=十进制255），如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是<code>65535</code>，4个字节可以表示的最大整数是<code>4294967295</code>。</p>
<p>由于计算机是美国人发明的，因此，<strong>最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号</strong>，这个编码表被称为<strong>ASCII</strong><code>编码，比如大写字母</code>A<code>的编码是</code>65<code>，小写字母</code>z<code>的编码是</code>122`。</p>
<p>但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，<strong>中国制定了<code>GB2312</code>编码，用来把中文编进去</strong>。</p>
<p>你可以想得到的是，全世界有上百种语言，日本把日文编到<code>Shift_JIS</code>里，韩国把韩文编到<code>Euc-kr</code>里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在<strong>多语言混合的文本中，显示出来会有乱码</strong>。</p>
<p><img src="/2022/02/06/python-learning/index/0.png" alt="char-encoding-problem"></p>
<p>因此，Unicode字符集应运而生。<strong>Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了</strong>。</p>
<p>Unicode标准也在不断发展，但最常用的是UCS-16编码，用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。</p>
<p>现在，捋一捋ASCII编码和Unicode编码的区别：ASCII编码是1个字节，而Unicode编码通常是2个字节。</p>
<p>字母<code>A</code>用ASCII编码是十进制的<code>65</code>，二进制的<code>01000001</code>；</p>
<p>字符<code>0</code>用ASCII编码是十进制的<code>48</code>，二进制的<code>00110000</code>，注意字符<code>&#39;0&#39;</code>和整数<code>0</code>是不同的；</p>
<p>汉字<code>中</code>已经超出了ASCII编码的范围，用Unicode编码是十进制的<code>20013</code>，二进制的<code>01001110 00101101</code>。</p>
<p>你可以猜测，如果把ASCII编码的<code>A</code>用Unicode编码，只需要在前面补0就可以，因此，<code>A</code>的Unicode编码是<code>00000000 01000001</code>。</p>
<p>新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。</p>
<p>所以，本着节约的精神，又出现了把Unicode编码转化为“<strong>可变长编码”的<code>UTF-8</code>编码</strong>。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。<strong>如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间</strong>：</p>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">ASCII</th>
<th align="left">Unicode</th>
<th align="left">UTF-8</th>
</tr>
</thead>
<tbody><tr>
<td align="left">A</td>
<td align="left">01000001</td>
<td align="left">00000000 01000001</td>
<td align="left">01000001</td>
</tr>
<tr>
<td align="left">中</td>
<td align="left">x</td>
<td align="left">01001110 00101101</td>
<td align="left">11100100 10111000 10101101</td>
</tr>
</tbody></table>
<p>从上面的表格还可以发现，UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。</p>
<p>搞清楚了ASCII、Unicode和UTF-8的关系，我们就可以总结一下现在计算机系统通用的字符编码工作方式：</p>
<p><strong>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码</strong>。</p>
<p>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件。</p>
<p>浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器。</p>
<p>所以你看到很多网页的源码上会有类似<code>&lt;meta charset=&quot;UTF-8&quot; /&gt;</code>的信息，表示该网页正是用的UTF-8编码。</p>
<h3 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h3><p>搞清楚了令人头疼的字符编码问题后，我们再来研究Python的字符串。</p>
<p>在最新的Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&#x27;包含中文的str&#x27;)</span><br><span class="line">包含中文的str</span><br></pre></td></tr></table></figure>

<p>对于单个字符的编码，Python提供了**<code>ord()</code>函数获取字符的整数表示<strong>，</strong><code>chr()</code>函数把编码转换为对应的字符**：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; ord(&#x27;A&#x27;)</span><br><span class="line">65</span><br><span class="line">&gt;&gt;&gt; ord(&#x27;中&#x27;)</span><br><span class="line">20013</span><br><span class="line">&gt;&gt;&gt; chr(66)</span><br><span class="line">&#x27;B&#x27;</span><br><span class="line">&gt;&gt;&gt; chr(25991)</span><br><span class="line">&#x27;文&#x27;</span><br></pre></td></tr></table></figure>

<p>如果知道字符的整数编码，还可以用十六进制这么写<code>str</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; &#x27;\u4e2d\u6587&#x27;</span><br><span class="line">&#x27;中文&#x27;</span><br></pre></td></tr></table></figure>

<p>两种写法完全是等价的。</p>
<p>由于Python的字符串类型是<code>str</code>，在内存中以Unicode表示，<strong>一个字符对应若干个字节</strong>。如果要在网络上传输，或者保存到磁盘上，**就需要把<code>str</code>变为以字节为单位的<code>bytes</code>**。</p>
<p>Python对<code>bytes</code>类型的数据用带<code>b</code>前缀的单引号或双引号表示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x = b&#x27;ABC&#x27;</span><br></pre></td></tr></table></figure>

<p>要注意区分<code>&#39;ABC&#39;</code>和<code>b&#39;ABC&#39;</code>，前者是<code>str</code>，<strong>后者虽然内容显示得和前者一样，但<code>bytes</code>的每个字符都只占用一个字节</strong>。(也就是ASCII码)</p>
<p>以Unicode表示的<code>str</code>通过**<code>encode()</code>方法可以编码为指定的<code>bytes</code>**，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; &#x27;ABC&#x27;.encode(&#x27;ascii&#x27;)</span><br><span class="line">b&#x27;ABC&#x27;</span><br><span class="line">&gt;&gt;&gt; &#x27;中文&#x27;.encode(&#x27;utf-8&#x27;)</span><br><span class="line">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span><br><span class="line">&gt;&gt;&gt; &#x27;中文&#x27;.encode(&#x27;ascii&#x27;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">UnicodeEncodeError: &#x27;ascii&#x27; codec can&#x27;t encode characters in position 0-1: ordinal not in range(128)</span><br></pre></td></tr></table></figure>

<p>纯英文的<code>str</code>可以用<code>ASCII</code>编码为<code>bytes</code>，内容是一样的，含有中文的<code>str</code>可以用<code>UTF-8</code>编码为<code>bytes</code>。含有中文的<code>str</code>无法用<code>ASCII</code>编码，因为中文编码的范围超过了<code>ASCII</code>编码的范围，Python会报错。</p>
<p><strong>在<code>bytes</code>中，无法显示为ASCII字符的字节，用<code>\x##</code>显示</strong>。</p>
<p>反过来，如果我们从<strong>网络或磁盘</strong>上读取了字节流，那么**读到的数据就是<code>bytes</code>**。要把<code>bytes</code>变为<code>str</code>，就需要用<code>decode()</code>方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; b&#x27;ABC&#x27;.decode(&#x27;ascii&#x27;)</span><br><span class="line">&#x27;ABC&#x27;</span><br><span class="line">&gt;&gt;&gt; b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;.decode(&#x27;utf-8&#x27;)</span><br><span class="line">&#x27;中文&#x27;</span><br></pre></td></tr></table></figure>

<p>如果<code>bytes</code>中包含无法解码的字节，<code>decode()</code>方法会报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; b&#x27;\xe4\xb8\xad\xff&#x27;.decode(&#x27;utf-8&#x27;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">UnicodeDecodeError: &#x27;utf-8&#x27; codec can&#x27;t decode byte 0xff in position 3: invalid start byte</span><br></pre></td></tr></table></figure>

<p>如果<code>bytes</code>中只有一小部分无效的字节，可以传入<code>errors=&#39;ignore&#39;</code>忽略错误的字节：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; b&#x27;\xe4\xb8\xad\xff&#x27;.decode(&#x27;utf-8&#x27;, errors=&#x27;ignore&#x27;)</span><br><span class="line">&#x27;中&#x27;</span><br></pre></td></tr></table></figure>

<p>要计算<code>str</code>包含多少个字符，可以用<code>len()</code>函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; len(&#x27;ABC&#x27;)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; len(&#x27;中文&#x27;)</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<p><code>len()</code>函数计算的是<code>str</code>的字符数，如果换成<code>bytes</code>，<code>len()</code>函数就计算字节数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; len(b&#x27;ABC&#x27;)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; len(b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;)</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; len(&#x27;中文&#x27;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">6</span><br></pre></td></tr></table></figure>

<p>可见，1个中文字符经过UTF-8编码后通常会占用3个字节，而1个英文字符只占用1个字节。</p>
<p>在操作字符串时，我们经常遇到<code>str</code>和<code>bytes</code>的互相转换。为了避免乱码问题，应当始终坚持使用UTF-8编码对<code>str</code>和<code>bytes</code>进行转换。</p>
<p>由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br></pre></td></tr></table></figure>

<p>第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；</p>
<p>第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。</p>
<p>你可能猜到了，<code>%</code>运算符就是用来格式化字符串的。在字符串内部，<code>%s</code>表示用字符串替换，<code>%d</code>表示用整数替换，有几个<code>%?</code>占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个<code>%?</code>，括号可以省略。</p>
<p>常见的占位符有：</p>
<table>
<thead>
<tr>
<th align="left">占位符</th>
<th align="left">替换内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left">%d</td>
<td align="left">整数</td>
</tr>
<tr>
<td align="left">%f</td>
<td align="left">浮点数</td>
</tr>
<tr>
<td align="left">%s</td>
<td align="left">字符串</td>
</tr>
<tr>
<td align="left">%x</td>
<td align="left">十六进制整数</td>
</tr>
</tbody></table>
<p>如果你不太确定应该用什么，<code>%s</code>永远起作用，它会把任何数据类型转换为字符串。</p>
<p>有些时候，字符串里面的<code>%</code>是一个普通字符怎么办？这个时候就需要转义，用<code>%%</code>来表示一个<code>%</code>。</p>
<h3 id="format"><a href="#format" class="headerlink" title="format()"></a>format()</h3><p>另一种格式化字符串的方法是使用字符串的<code>format()</code>方法，它会用传入的参数依次替换字符串内的占位符<code>&#123;0&#125;</code>、<code>&#123;1&#125;</code>……，不过这种方式写起来比%要麻烦得多：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; &#x27;Hello, &#123;0&#125;, 成绩提升了 &#123;1:.1f&#125;%&#x27;.format(&#x27;小明&#x27;, 17.125)</span><br><span class="line">&#x27;Hello, 小明, 成绩提升了 17.1%&#x27;</span><br></pre></td></tr></table></figure>



<h3 id="f-string"><a href="#f-string" class="headerlink" title="f-string"></a>f-string</h3><p>最后一种格式化字符串的方法是使用以<code>f</code>开头的字符串，称之为<code>f-string</code>，它和普通字符串不同之处在于，字符串如果包含<code>&#123;xxx&#125;</code>，就会以对应的变量替换：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; r = 2.5</span><br><span class="line">&gt;&gt;&gt; s = 3.14 * r ** 2</span><br><span class="line">&gt;&gt;&gt; print(f&#x27;The area of a circle with radius &#123;r&#125; is &#123;s:.2f&#125;&#x27;)</span><br><span class="line">The area of a circle with radius 2.5 is 19.62</span><br></pre></td></tr></table></figure>

<p>上述代码中，<code>&#123;r&#125;</code>被变量<code>r</code>的值替换，<code>&#123;s:.2f&#125;</code>被变量<code>s</code>的值替换，并且<code>:</code>后面的<code>.2f</code>指定了格式化参数（即保留两位小数），因此，<code>&#123;s:.2f&#125;</code>的替换结果是<code>19.62</code>。</p>
<h3 id="r"><a href="#r" class="headerlink" title="%r"></a>%r</h3><p>%r是一个万能的格式符，它会将后面给的参数原样打印出来，带有类型信息。</p>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>Python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。（相当于C语言中的数组）</p>
<p>比如，列出班里所有同学的名字，就可以用一个list表示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; classmates = [&#x27;Michael&#x27;, &#x27;Bob&#x27;, &#x27;Tracy&#x27;]</span><br><span class="line">&gt;&gt;&gt; classmates</span><br><span class="line">[&#x27;Michael&#x27;, &#x27;Bob&#x27;, &#x27;Tracy&#x27;]</span><br></pre></td></tr></table></figure>

<p>变量<code>classmates</code>就是一个list。用<code>len()</code>函数可以获得list元素的个数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; len(classmates)</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<p>用索引来访问list中每一个位置的元素，记得索引是从<code>0</code>开始的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; classmates[0]</span><br><span class="line">&#x27;Michael&#x27;</span><br><span class="line">&gt;&gt;&gt; classmates[1]</span><br><span class="line">&#x27;Bob&#x27;</span><br><span class="line">&gt;&gt;&gt; classmates[2]</span><br><span class="line">&#x27;Tracy&#x27;</span><br><span class="line">&gt;&gt;&gt; classmates[3]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure>

<p>当索引超出了范围时，Python会报一个<code>IndexError</code>错误，所以，要确保索引不要越界，记得最后一个元素的索引是<code>len(classmates) - 1</code>。</p>
<p>如果要取最后一个元素，除了计算索引位置外，还可以用<code>-1</code>做索引，直接获取最后一个元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; classmates[-1]</span><br><span class="line">&#x27;Tracy&#x27;</span><br></pre></td></tr></table></figure>

<p>以此类推，可以获取倒数第2个、倒数第3个：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; classmates[-2]</span><br><span class="line">&#x27;Bob&#x27;</span><br><span class="line">&gt;&gt;&gt; classmates[-3]</span><br><span class="line">&#x27;Michael&#x27;</span><br><span class="line">&gt;&gt;&gt; classmates[-4]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure>

<p>当然，倒数第4个就越界了。</p>
<p>list是一个可变的有序表，所以，可以往list中追加元素到末尾：</p>
<p><strong>append（）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; classmates.append(&#x27;Adam&#x27;)</span><br><span class="line">&gt;&gt;&gt; classmates</span><br><span class="line">[&#x27;Michael&#x27;, &#x27;Bob&#x27;, &#x27;Tracy&#x27;, &#x27;Adam&#x27;]</span><br></pre></td></tr></table></figure>

<p>也可以把元素插入到指定的位置，比如索引号为<code>1</code>的位置：<strong>insert（）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; classmates.insert(1, &#x27;Jack&#x27;)</span><br><span class="line">&gt;&gt;&gt; classmates</span><br><span class="line">[&#x27;Michael&#x27;, &#x27;Jack&#x27;, &#x27;Bob&#x27;, &#x27;Tracy&#x27;, &#x27;Adam&#x27;]</span><br></pre></td></tr></table></figure>

<p>要删除list末尾的元素，用<code>pop()</code>方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; classmates.pop()</span><br><span class="line">&#x27;Adam&#x27;</span><br><span class="line">&gt;&gt;&gt; classmates</span><br><span class="line">[&#x27;Michael&#x27;, &#x27;Jack&#x27;, &#x27;Bob&#x27;, &#x27;Tracy&#x27;]</span><br></pre></td></tr></table></figure>

<p>要删除指定位置的元素，用<code>pop(i)</code>方法，其中<code>i</code>是索引位置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; classmates.pop(1)</span><br><span class="line">&#x27;Jack&#x27;</span><br><span class="line">&gt;&gt;&gt; classmates</span><br><span class="line">[&#x27;Michael&#x27;, &#x27;Bob&#x27;, &#x27;Tracy&#x27;]</span><br></pre></td></tr></table></figure>

<p>要把某个元素替换成别的元素，可以直接赋值给对应的索引位置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; classmates[1] = &#x27;Sarah&#x27;</span><br><span class="line">&gt;&gt;&gt; classmates</span><br><span class="line">[&#x27;Michael&#x27;, &#x27;Sarah&#x27;, &#x27;Tracy&#x27;]</span><br></pre></td></tr></table></figure>

<p>list里面的元素的数据类型也可以不同，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [&#x27;Apple&#x27;, 123, True]</span><br></pre></td></tr></table></figure>

<p>list元素也可以是另一个list，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; s = [&#x27;python&#x27;, &#x27;java&#x27;, [&#x27;asp&#x27;, &#x27;php&#x27;], &#x27;scheme&#x27;]</span><br><span class="line">&gt;&gt;&gt; len(s)</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<p>要注意<code>s</code>只有4个元素，其中<code>s[2]</code>又是一个list，如果拆开写就更容易理解了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; p = [&#x27;asp&#x27;, &#x27;php&#x27;]</span><br><span class="line">&gt;&gt;&gt; s = [&#x27;python&#x27;, &#x27;java&#x27;, p, &#x27;scheme&#x27;]</span><br></pre></td></tr></table></figure>

<p>要拿到<code>&#39;php&#39;</code>可以写<code>p[1]</code>或者<code>s[2][1]</code>，因此<code>s</code>可以看成是一个二维数组，类似的还有三维、四维……数组，不过很少用到。</p>
<p>如果一个list中一个元素也没有，就是一个空的list，它的长度为0：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L = []</span><br><span class="line">&gt;&gt;&gt; len(L)</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h3 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h3><p>另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改，比如同样是列出同学的名字：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; classmates = (&#x27;Michael&#x27;, &#x27;Bob&#x27;, &#x27;Tracy&#x27;)</span><br></pre></td></tr></table></figure>

<p>现在，classmates这个tuple不能变了，它也没有append()，insert()这样的方法。其他获取元素的方法和list是一样的，你可以正常地使用<code>classmates[0]</code>，<code>classmates[-1]</code>，但不能赋值成另外的元素。</p>
<p>不可变的tuple有什么意义？<strong>因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。</strong></p>
<p>tuple的陷阱：当你定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; t = (1, 2)</span><br><span class="line">&gt;&gt;&gt; t</span><br><span class="line">(1, 2)</span><br></pre></td></tr></table></figure>

<p><strong>如果要定义一个空的tuple，可以写成<code>()</code>：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; t = ()</span><br><span class="line">&gt;&gt;&gt; t</span><br><span class="line">()</span><br></pre></td></tr></table></figure>

<p>但是，要定义一个只有1个元素的tuple，如果你这么定义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; t = (1)</span><br><span class="line">&gt;&gt;&gt; t</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<p>定义的不是tuple，是<code>1</code>这个数！这是因为括号<code>()</code>既可以表示tuple，又可以表示数学公式中的小括号，这就产生了歧义，因此，Python规定，这种情况下，按小括号进行计算，计算结果自然是<code>1</code>。</p>
<p>所以，只有1个元素的tuple定义时必须加一个逗号<code>,</code>，来消除歧义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; t = (1,)</span><br><span class="line">&gt;&gt;&gt; t</span><br><span class="line">(1,)</span><br></pre></td></tr></table></figure>

<p>Python在显示只有1个元素的tuple时，也会加一个逗号<code>,</code>，以免你误解成数学计算意义上的括号。</p>
<p>最后来看一个“可变的”tuple：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; t = (&#x27;a&#x27;, &#x27;b&#x27;, [&#x27;A&#x27;, &#x27;B&#x27;])</span><br><span class="line">&gt;&gt;&gt; t[2][0] = &#x27;X&#x27;</span><br><span class="line">&gt;&gt;&gt; t[2][1] = &#x27;Y&#x27;</span><br><span class="line">&gt;&gt;&gt; t</span><br><span class="line">(&#x27;a&#x27;, &#x27;b&#x27;, [&#x27;X&#x27;, &#x27;Y&#x27;])</span><br></pre></td></tr></table></figure>

<p>因为这个tuple定义的时候有3个元素，分别是<code>&#39;a&#39;</code>，<code>&#39;b&#39;</code>和一个list。</p>
<p>表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，而是list的元素。tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。<strong>即指向<code>&#39;a&#39;</code>，就不能改成指向<code>&#39;b&#39;</code>，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的</strong>！</p>
<p>理解了“指向不变”后，要创建一个内容也不变的tuple怎么做？那就<strong>必须保证tuple的每一个元素本身也不能变</strong>。</p>
<h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><p>计算机之所以能做很多自动化的任务，因为它可以自己做条件判断。</p>
<p>比如，输入用户年龄，根据年龄打印不同的内容，在Python程序中，用<code>if</code>语句实现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">age = 20</span><br><span class="line">if age &gt;= 18:</span><br><span class="line">    print(&#x27;your age is&#x27;, age)</span><br><span class="line">    print(&#x27;adult&#x27;)</span><br></pre></td></tr></table></figure>

<p>根据Python的缩进规则，如果<code>if</code>语句判断是<code>True</code>，就把缩进的两行print语句执行了，否则，什么也不做。</p>
<p>也可以给<code>if</code>添加一个<code>else</code>语句，意思是，如果<code>if</code>判断是<code>False</code>，不要执行<code>if</code>的内容，去把<code>else</code>执行了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">age = 3</span><br><span class="line">if age &gt;= 18:</span><br><span class="line">    print(&#x27;your age is&#x27;, age)</span><br><span class="line">    print(&#x27;adult&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;your age is&#x27;, age)</span><br><span class="line">    print(&#x27;teenager&#x27;)</span><br></pre></td></tr></table></figure>

<p>注意不要少写了冒号<code>:</code>。</p>
<p>当然上面的判断是很粗略的，完全可以用<code>elif</code>做更细致的判断：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">age = 3</span><br><span class="line">if age &gt;= 18:</span><br><span class="line">    print(&#x27;adult&#x27;)</span><br><span class="line">elif age &gt;= 6:</span><br><span class="line">    print(&#x27;teenager&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;kid&#x27;)</span><br></pre></td></tr></table></figure>

<p><code>elif</code>是<code>else if</code>的缩写，完全可以有多个<code>elif</code>，所以<code>if</code>语句的完整形式就是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if &lt;条件判断1&gt;:</span><br><span class="line">    &lt;执行1&gt;</span><br><span class="line">elif &lt;条件判断2&gt;:</span><br><span class="line">    &lt;执行2&gt;</span><br><span class="line">elif &lt;条件判断3&gt;:</span><br><span class="line">    &lt;执行3&gt;</span><br><span class="line">else:</span><br><span class="line">    &lt;执行4&gt;</span><br></pre></td></tr></table></figure>

<p><code>if</code>语句执行有个特点，它是从上往下判断，如果在某个判断上是<code>True</code>，把该判断对应的语句执行后，就忽略掉剩下的<code>elif</code>和<code>else</code>。</p>
<p><code>if</code>判断条件还可以简写，比如写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if x:</span><br><span class="line">    print(&#x27;True&#x27;)</span><br></pre></td></tr></table></figure>

<p>只要<code>x</code>是非零数值、非空字符串、非空list等，就判断为<code>True</code>，否则为<code>False</code>。</p>
<h3 id="再议-input"><a href="#再议-input" class="headerlink" title="再议 input"></a>再议 input</h3><p>最后看一个有问题的条件判断。很多同学会用<code>input()</code>读取用户的输入，这样可以自己输入，程序运行得更有意思：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">birth = input(&#x27;birth: &#x27;)</span><br><span class="line">if birth &lt; 2000:</span><br><span class="line">    print(&#x27;00前&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;00后&#x27;)</span><br></pre></td></tr></table></figure>

<p>输入<code>1982</code>，结果报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: unorderable types: str() &gt; int()</span><br><span class="line">#traceback回溯</span><br><span class="line">#unorderable无序的</span><br></pre></td></tr></table></figure>

<p>这是因为<code>input()</code>返回的数据类型是<code>str</code>，<code>str</code>不能直接和整数比较，必须先把<code>str</code>转换成整数。Python提供了<code>int()</code>函数来完成这件事情：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s = input(&#x27;birth: &#x27;)</span><br><span class="line">birth = int(s)</span><br><span class="line">if birth &lt; 2000:</span><br><span class="line">    print(&#x27;00前&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;00后&#x27;)</span><br></pre></td></tr></table></figure>

<p>再次运行，就可以得到正确地结果。但是，如果输入<code>abc</code>呢？又会得到一个错误信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">ValueError: invalid literal for int() with base 10: &#x27;abc&#x27;</span><br><span class="line">#invalid literal 无效文字</span><br></pre></td></tr></table></figure>

<p>原来**<code>int()</code>函数发现一个字符串并不是合法的数字时就会报错**，程序就退出了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">elif 18.5&lt;=bmi&lt;=25:</span><br><span class="line"></span><br><span class="line">    print(&quot;正常&quot;)</span><br></pre></td></tr></table></figure>

<p>要注意的是这个：和可以直接打18.5&lt;=bmi&lt;=25，不用&amp;&amp;表示同时成立两个条件。</p>
<p><img src="/2022/02/06/python-learning/index/image-20220214120156004.png" alt="image-20220214120156004"></p>
<p>好可爱的图我偷了</p>
<h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><p>Python的循环有两种，一种是for…in循环，依次把list或tuple中的每个元素迭代出来，看例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">names = [&#x27;Michael&#x27;, &#x27;Bob&#x27;, &#x27;Tracy&#x27;]</span><br><span class="line">for name in names:</span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure>

<p>执行这段代码，会依次打印<code>names</code>的每一个元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Michael</span><br><span class="line">Bob</span><br><span class="line">Tracy</span><br></pre></td></tr></table></figure>

<p>所以<code>for x in ...</code>循环就是把每个元素代入变量<code>x</code>，然后执行缩进块的语句。</p>
<p>再比如我们想计算1-10的整数之和，可以用一个<code>sum</code>变量做累加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sum = 0</span><br><span class="line">for x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:</span><br><span class="line">    sum = sum + x</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure>

<p>如果要计算1-100的整数之和，从1写到100有点困难，幸好Python提供一个**<code>range()</code>函数<strong>，可以生成一个整数序列，再通过<code>list()</code>函数可以转换为list。比如<code>range(5)</code>生成的序列是</strong>从0开始小于5的整数**：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; list(range(5))</span><br><span class="line">[0, 1, 2, 3, 4]</span><br></pre></td></tr></table></figure>

<p><code>range(101)</code>就可以生成0-100的整数序列，计算如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sum = 0</span><br><span class="line">for x in range(101):</span><br><span class="line">    sum = sum + x</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure>

<p>第二种循环是while循环，只要条件满足，就不断循环，条件不满足时退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sum = 0</span><br><span class="line">n = 99</span><br><span class="line">while n &gt; 0:</span><br><span class="line">    sum = sum + n</span><br><span class="line">    n = n - 2</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure>

<p>在循环内部变量<code>n</code>不断自减，直到变为<code>-1</code>时，不再满足while条件，循环退出。</p>
<h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>在循环中，<code>break</code>语句可以提前退出循环。例如，本来要循环打印1～100的数字：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n = 1</span><br><span class="line">while n &lt;= 100:</span><br><span class="line">    print(n)</span><br><span class="line">    n = n + 1</span><br><span class="line">print(&#x27;END&#x27;)</span><br></pre></td></tr></table></figure>

<p>上面的代码可以打印出1~100。</p>
<p>如果要提前结束循环，可以用<code>break</code>语句：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">10</span>: <span class="comment"># 当n = 11时，条件满足，执行break语句</span></span><br><span class="line">        <span class="keyword">break</span> <span class="comment"># break语句会结束当前循环</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;END&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>执行上面的代码可以看到，打印出1~10后，紧接着打印<code>END</code>，程序结束。</p>
<p>可见<code>break</code>的作用是提前结束循环。</p>
<h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>在循环过程中，也可以通过<code>continue</code>语句，跳过当前的这次循环，直接开始下一次循环。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">10</span>:</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>

<p>上面的程序可以打印出1～10。但是，如果我们想只打印奇数，可以用<code>continue</code>语句跳过某些循环：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">10</span>:</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>: <span class="comment"># 如果n是偶数，执行continue语句</span></span><br><span class="line">        <span class="keyword">continue</span> <span class="comment"># continue语句会直接继续下一轮循环，后续的print()语句不会执行</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>

<p>执行上面的代码可以看到，打印的不再是1～10，而是1，3，5，7，9。</p>
<p>可见<code>continue</code>的作用是提前结束本轮循环，并直接开始下一轮循环。</p>
<h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>循环是让计算机做重复任务的有效的方法。</p>
<p><code>break</code>语句可以在循环过程中直接退出循环，而<code>continue</code>语句可以提前结束本轮循环，并直接开始下一轮循环。这两个语句通常都<em>必须</em>配合<code>if</code>语句使用。</p>
<p><em>要特别注意</em>，不要滥用<code>break</code>和<code>continue</code>语句。<code>break</code>和<code>continue</code>会造成代码执行逻辑分叉过多，容易出错。大多数循环并不需要用到<code>break</code>和<code>continue</code>语句，上面的两个例子，都可以通过改写循环条件或者修改循环逻辑，去掉<code>break</code>和<code>continue</code>语句。</p>
<p>有些时候，如果代码写得有问题，会让程序陷入“死循环”，也就是永远循环下去。这时可以用<code>Ctrl+C</code>退出程序，或者强制结束Python进程。</p>
<h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h3><p>Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。</p>
<p>举个例子，假设要根据同学的名字查找对应的成绩，如果用list实现，需要两个list：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">names = [&#x27;Michael&#x27;, &#x27;Bob&#x27;, &#x27;Tracy&#x27;]</span><br><span class="line">scores = [95, 75, 85]</span><br></pre></td></tr></table></figure>

<p>给定一个名字，要查找对应的成绩，就先要在names中找到对应的位置，再从scores取出对应的成绩，list越长，耗时越长。</p>
<p>如果用dict实现，只需要一个“名字”-“成绩”的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。用Python写一个dict如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d = &#123;&#x27;Michael&#x27;: 95, &#x27;Bob&#x27;: 75, &#x27;Tracy&#x27;: 85&#125;</span><br><span class="line">&gt;&gt;&gt; d[&#x27;Michael&#x27;]</span><br><span class="line">95</span><br></pre></td></tr></table></figure>

<p>为什么dict查找速度这么快？因为dict的实现原理和查字典是一样的。假设字典包含了1万个汉字，我们要查某一个字，一个办法是把字典从第一页往后翻，直到找到我们想要的字为止，这种方法就是在list中查找元素的方法，list越大，查找越慢。</p>
<p>第二种方法是先在字典的索引表里（比如部首表）查这个字对应的页码，然后直接翻到该页，找到这个字。无论找哪个字，这种查找速度都非常快，不会随着字典大小的增加而变慢。</p>
<p>dict就是第二种实现方式，给定一个名字，比如<code>&#39;Michael&#39;</code>，dict在内部就可以直接计算出<code>Michael</code>对应的存放成绩的“页码”，也就是<code>95</code>这个数字存放的内存地址，直接取出来，所以速度非常快。</p>
<p>你可以猜到，这种key-value存储方式，在放进去的时候，必须根据key算出value的存放位置，这样，取的时候才能根据key直接拿到value。</p>
<p>把数据放入dict的方法，除了初始化时指定外，还可以通过key放入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d[&#x27;Adam&#x27;] = 67</span><br><span class="line">&gt;&gt;&gt; d[&#x27;Adam&#x27;]</span><br><span class="line">67</span><br></pre></td></tr></table></figure>

<p>由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d[&#x27;Jack&#x27;] = 90</span><br><span class="line">&gt;&gt;&gt; d[&#x27;Jack&#x27;]</span><br><span class="line">90</span><br><span class="line">&gt;&gt;&gt; d[&#x27;Jack&#x27;] = 88</span><br><span class="line">&gt;&gt;&gt; d[&#x27;Jack&#x27;]</span><br><span class="line">88</span><br></pre></td></tr></table></figure>

<p>如果key不存在，dict就会报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d[&#x27;Thomas&#x27;]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">KeyError: &#x27;Thomas&#x27;</span><br></pre></td></tr></table></figure>

<p>要避免key不存在的错误，有两种办法，一是通过<code>in</code>判断key是否存在：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; &#x27;Thomas&#x27; in d</span><br><span class="line">False</span><br></pre></td></tr></table></figure>

<p>二是通过dict提供的<code>get()</code>方法，如果key不存在，可以返回<code>None</code>，或者自己指定的value：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d.get(&#x27;Thomas&#x27;)</span><br><span class="line">&gt;&gt;&gt; d.get(&#x27;Thomas&#x27;, -1)</span><br><span class="line">-1</span><br></pre></td></tr></table></figure>

<p>注意：返回<code>None</code>的时候Python的交互环境不显示结果。</p>
<p>要删除一个key，用<code>pop(key)</code>方法，对应的value也会从dict中删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d.pop(&#x27;Bob&#x27;)</span><br><span class="line">75</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;&#x27;Michael&#x27;: 95, &#x27;Tracy&#x27;: 85&#125;</span><br></pre></td></tr></table></figure>

<p>请务必注意，dict内部存放的顺序和key放入的顺序是没有关系的。</p>
<p>和list比较，dict有以下几个特点：</p>
<ol>
<li>查找和插入的速度极快，不会随着key的增加而变慢；</li>
<li>需要占用大量的内存，内存浪费多。</li>
</ol>
<p>而list相反：</p>
<ol>
<li>查找和插入的时间随着元素的增加而增加；</li>
<li>占用空间小，浪费内存很少。</li>
</ol>
<p>所以，dict是用空间来换取时间的一种方法。</p>
<p>dict可以用在需要高速查找的很多地方，在Python代码中几乎无处不在，正确使用dict非常重要，需要牢记的第一条就是dict的key必须是<strong>不可变对象</strong>。</p>
<p>这是因为dict根据key来计算value的存储位置，如果每次计算相同的key得出的结果不同，那dict内部就完全混乱了。这个通过key计算位置的算法称为<strong>哈希算法（Hash）</strong>。</p>
<p>要保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; key = [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; d[key] = &#x27;a list&#x27;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: unhashable type: &#x27;list&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。</p>
<p>要创建一个set，需要提供一个list作为输入集合：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; s = set([1, 2, 3])</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure>

<p>注意，传入的参数<code>[1, 2, 3]</code>是一个list，而显示的<code>&#123;1, 2, 3&#125;</code>只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的。。</p>
<p>重复元素在set中自动被过滤：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; s = set([1, 1, 2, 2, 3, 3])</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure>

<p>通过<code>add(key)</code>方法可以添加元素到set中，可以重复添加，但不会有效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; s.add(4)</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&#123;1, 2, 3, 4&#125;</span><br><span class="line">&gt;&gt;&gt; s.add(4)</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&#123;1, 2, 3, 4&#125;</span><br></pre></td></tr></table></figure>

<p>通过<code>remove(key)</code>方法可以删除元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; s.remove(4)</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure>

<p>set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; s1 = set([1, 2, 3])</span><br><span class="line">&gt;&gt;&gt; s2 = set([2, 3, 4])</span><br><span class="line">&gt;&gt;&gt; s1 &amp; s2</span><br><span class="line">&#123;2, 3&#125;</span><br><span class="line">&gt;&gt;&gt; s1 | s2</span><br><span class="line">&#123;1, 2, 3, 4&#125;</span><br></pre></td></tr></table></figure>

<p>set和dict的唯一区别仅在于没有存储对应的value，但是，set的原理和dict一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。试试把list放入set，看看是否会报错。</p>
<h3 id="再议不可变对象"><a href="#再议不可变对象" class="headerlink" title="再议不可变对象"></a>再议不可变对象</h3><p>上面我们讲了，str是不变对象，而list是可变对象。</p>
<p>对于可变对象，比如list，对list进行操作，list内部的内容是会变化的，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a = [&#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27;]</span><br><span class="line">&gt;&gt;&gt; a.sort()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br></pre></td></tr></table></figure>

<p>而对于不可变对象，比如str，对str进行操作呢：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a = &#x27;abc&#x27;</span><br><span class="line">&gt;&gt;&gt; a.replace(&#x27;a&#x27;, &#x27;A&#x27;)</span><br><span class="line">&#x27;Abc&#x27;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#x27;abc&#x27;</span><br></pre></td></tr></table></figure>

<p>虽然字符串有个<code>replace()</code>方法，也确实变出了<code>&#39;Abc&#39;</code>，但变量<code>a</code>最后仍是<code>&#39;abc&#39;</code>，应该怎么理解呢？</p>
<p>我们先把代码改成下面这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a = &#x27;abc&#x27;</span><br><span class="line">&gt;&gt;&gt; b = a.replace(&#x27;a&#x27;, &#x27;A&#x27;)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#x27;Abc&#x27;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#x27;abc&#x27;</span><br></pre></td></tr></table></figure>

<p>要始终牢记的是，<code>a</code>是变量，而<code>&#39;abc&#39;</code>才是字符串对象！有些时候，我们经常说，对象<code>a</code>的内容是<code>&#39;abc&#39;</code>，但其实是指，<code>a</code>本身是一个变量，它指向的对象的内容才是<code>&#39;abc&#39;</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌───┐                  ┌───────┐</span><br><span class="line">│ a │─────────────────&gt;│ &#x27;abc&#x27; │</span><br><span class="line">└───┘                  └───────┘</span><br></pre></td></tr></table></figure>

<p>当我们调用<code>a.replace(&#39;a&#39;, &#39;A&#39;)</code>时，实际上调用方法<code>replace</code>是作用在字符串对象<code>&#39;abc&#39;</code>上的，而这个方法虽然名字叫<code>replace</code>，但却没有改变字符串<code>&#39;abc&#39;</code>的内容。相反，<code>replace</code>方法创建了一个新字符串<code>&#39;Abc&#39;</code>并返回，如果我们用变量<code>b</code>指向该新字符串，就容易理解了，变量<code>a</code>仍指向原有的字符串<code>&#39;abc&#39;</code>，但变量<code>b</code>却指向新字符串<code>&#39;Abc&#39;</code>了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌───┐                  ┌───────┐</span><br><span class="line">│ a │─────────────────&gt;│ &#x27;abc&#x27; │</span><br><span class="line">└───┘                  └───────┘</span><br><span class="line">┌───┐                  ┌───────┐</span><br><span class="line">│ b │─────────────────&gt;│ &#x27;Abc&#x27; │</span><br><span class="line">└───┘                  └───────┘</span><br></pre></td></tr></table></figure>

<p>所以，对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容。相反，这些方法会创建新的对象并返回，这样，就保证了不可变对象本身永远是不可变的。</p>
<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p><strong>sort()</strong> 函数用于对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数。</p>
<p>要理解dict的有关内容需要你理解哈希表（map）的相关基础知识，这个其实是《算法与数据结构》里面的内容。</p>
<p>1.list和tuple其实是用链表顺序存储的，也就是前一个元素中存储了下一个元素的位置，这样只要找到第一个元素的位置就可以顺藤摸瓜找到所有元素的位置，所以list的名字其实就是个指针，指向list的第一个元素的位置。list的插入和删除等可以直接用链表的方式进行，比如我要在第1个元素和第2个元素中间插入一个元素，那么直接在链表的最后面（我们假设这个list只有两个元素，那么也就是在第3个元素的位置上）插入这个元素，然后把第一个元素指针指向这个元素（第3个位置），然后再把新插入的元素的指针指向原来的第2个元素，这样插入操作就完成了。读取这个list的时候，先用list的名字（就是个指针，指向第1个元素的位置）找到第一个元素，然后用第1一个元素的指针找到第2个元素（位置3），然后用第2个元素的指针找到第3个元素（位置2），以此类推。所以list的顺序和内存中的实际顺序其实不一定完全对应。这种存储方式不会浪费内存，但查找起来特别费时间，因为要按照链表一个一个找下去，如果你的list特别大的话，那么要等好久才会找到结果。</p>
<p>2.dict则为了快速查找使用了一种特别的方法，哈希表。哈希表采用哈希函数从key计算得到一个数字（哈希函数有个特点：对于不同的key，有很大的概率得到的哈希值也不同），然后直接把value存储到这个数字所对应的地址上，比如key=’ABC’，value=10，经过哈希函数得到key对应的哈希值为123，那么就申请一个有1000个地址（从0到999）的内存，然后把10存放在地址为123的地方。类似的，对于key=’BCD’，value=20，得到key的哈希值为234，那么就把20存放在地址为234的地方。对于这样的表查找起来是非常方便的。只要给出key，计算得到哈希值，然后直接到对应的地址去找value就可以了。无论有几个元素，都可以直接找到value，无需遍历整个表。不过虽然dict查找速度快，但内存浪费严重，你看我们只存储了两个元素，都要申请一个长度为1000的内存。</p>
<p>3.现在你知道为啥key要用不可变对象了吧？因为不可变对象是常量，每次的哈希值算出来都是固定的，这样就不会出错。比如key=’ABC’，value=10，存储地址为123，假设我突发奇想，把key改成’BCD’，那么当查找’BCD’的value的时候就会去234的地址找，但那里啥也没有，这就乱套了。</p>
<p>3.你看我们上面有一句话：对于不同的key，有很大的概率得到的哈希值也不同。那么有很小的概率不同的key可以得到相同的哈希值了？没错，比如对于我们的例子来说，哈希值只有3位，那么只要元素个数超过1000，就一定会有至少两个key的哈希值相同（鸽笼原理），这种情况叫“冲突”，设计哈希表的时候要采取办法减少冲突，实在冲突了也要想办法补救。不过这是编译器的事情，况且对于初学者的我们来说碰到的冲突的概率基本等于零，就不用操心了。</p>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>不认识一个函数的时候可以通过help(函数名)获取帮助</p>
<p><img src="/2022/02/06/python-learning/index/image-20220214135121173.png" alt="image-20220214135121173"></p>
<h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><p>Python内置的常用函数还包括数据类型转换函数，比如<code>int()</code>函数可以把其他数据类型转换为整数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; int(&#x27;123&#x27;)</span><br><span class="line">123</span><br><span class="line">&gt;&gt;&gt; int(12.34)</span><br><span class="line">12</span><br><span class="line">&gt;&gt;&gt; float(&#x27;12.34&#x27;)</span><br><span class="line">12.34</span><br><span class="line">&gt;&gt;&gt; str(1.23)</span><br><span class="line">&#x27;1.23&#x27;</span><br><span class="line">&gt;&gt;&gt; str(100)</span><br><span class="line">&#x27;100&#x27;</span><br><span class="line">&gt;&gt;&gt; bool(1)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; bool(&#x27;&#x27;)</span><br><span class="line">False</span><br></pre></td></tr></table></figure>

<p>函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a = abs # 变量a指向abs函数</span><br><span class="line">&gt;&gt;&gt; a(-1) # 所以也可以通过a调用abs函数</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<p>#hex() 函数用于将10进制整数转换成16进制，以字符串形式表示</p>
<h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>在Python中，定义一个函数要使用<code>def</code>语句，依次写出函数名、括号、括号中的参数和冒号<code>:</code>，然后，在缩进块中编写函数体，函数的返回值用<code>return</code>语句返回。</p>
<p>请注意，函数体内部的语句在执行时，一旦执行到<code>return</code>时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。</p>
<p>如果没有<code>return</code>语句，函数执行完毕后也会返回结果，只是结果为<code>None</code>。<code>return None</code>可以简写为<code>return</code>。</p>
<p>在Python交互环境中定义函数时，注意Python会出现<code>...</code>的提示。函数定义结束后需要按两次回车重新回到<code>&gt;&gt;&gt;</code>提示符下：</p>
<h3 id="空函数"><a href="#空函数" class="headerlink" title="空函数"></a>空函数</h3><p>如果想定义一个什么事也不做的空函数，可以用<code>pass</code>语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def nop():</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>

<p><code>pass</code>语句什么都不做，那有什么用？实际上<code>pass</code>可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个<code>pass</code>，让代码能运行起来。</p>
<p><code>pass</code>还可以用在其他语句里，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if age &gt;= 18:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>

<p>缺少了<code>pass</code>，代码运行就会有语法错误。</p>
<h3 id="参数检查"><a href="#参数检查" class="headerlink" title="参数检查"></a>参数检查</h3><p>调用函数时，如果参数个数不对，Python解释器会自动检查出来，并抛出<code>TypeError</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; my_abs(1, 2)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: my_abs() takes 1 positional argument but 2 were given</span><br></pre></td></tr></table></figure>

<p>但是如果参数类型不对，Python解释器就无法帮我们检查。试试<code>my_abs</code>和内置函数<code>abs</code>的差别：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_abs(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> my_abs</span><br><span class="line">TypeError: unorderable types: <span class="built_in">str</span>() &gt;= <span class="built_in">int</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">abs</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: bad operand <span class="built_in">type</span> <span class="keyword">for</span> <span class="built_in">abs</span>(): <span class="string">&#x27;str&#x27;</span></span><br></pre></td></tr></table></figure>

<p>当传入了不恰当的参数时，内置函数<code>abs</code>会检查出参数错误，而我们定义的<code>my_abs</code>没有参数检查，会导致<code>if</code>语句出错，出错信息和<code>abs</code>不一样。所以，这个函数定义不够完善。</p>
<p>让我们修改一下<code>my_abs</code>的定义，对参数类型做检查，只允许整数和浮点数类型的参数。数据类型检查可以用<strong>内置函数<code>isinstance()</code>实现：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def my_abs(x):</span><br><span class="line">    if not isinstance(x, (int, float)):</span><br><span class="line">        raise TypeError(&#x27;bad operand type&#x27;)</span><br><span class="line">    if x &gt;= 0:</span><br><span class="line">        return x</span><br><span class="line">    else:</span><br><span class="line">        return -x</span><br></pre></td></tr></table></figure>

<p>添加了参数检查后，如果传入错误的参数类型，函数就可以抛出一个错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; my_abs(&#x27;A&#x27;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 3, in my_abs</span><br><span class="line">TypeError: bad operand type</span><br></pre></td></tr></table></figure>

<h3 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h3><p>函数可以返回多个值吗？答案是肯定的。</p>
<p>比如在游戏中经常需要从一个点移动到另一个点，给出坐标、位移和角度，就可以计算出新的坐标：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import math</span><br><span class="line"></span><br><span class="line">def move(x, y, step, angle=0):</span><br><span class="line">    nx = x + step * math.cos(angle)</span><br><span class="line">    ny = y - step * math.sin(angle)</span><br><span class="line">    return nx, ny</span><br></pre></td></tr></table></figure>

<p><strong><code>import math</code>语句表示导入<code>math</code>包</strong>，并允许后续代码引用<code>math</code>包里的<code>sin</code>、<code>cos</code>等函数。</p>
<p>然后，我们就可以同时获得返回值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; x, y = move(100, 100, 60, math.pi / 6)</span><br><span class="line">&gt;&gt;&gt; print(x, y)</span><br><span class="line">151.96152422706632 70.0</span><br></pre></td></tr></table></figure>

<p>但其实这只是一种假象，Python函数返回的仍然是单一值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; r = move(100, 100, 60, math.pi / 6)</span><br><span class="line">&gt;&gt;&gt; print(r)</span><br><span class="line">(151.96152422706632, 70.0)</span><br></pre></td></tr></table></figure>

<p>原来返回值是一个tuple！但是，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，Python的函数返回多值其实就是返回一个tuple，但写起来更方便。</p>
<p>定义一个函数<code>quadratic(a, b, c)</code>，接收3个参数，返回一元二次方程 ax^2+bx+c=0<em>a**x</em>2+<em>b**x</em>+<em>c</em>=0 的两个解。</p>
<p>练习：</p>
<p>定义一个函数<code>quadratic(a, b, c)</code>，接收3个参数，返回一元二次方程 ax^2+bx+c=0<em>a**x</em>2+<em>b**x</em>+<em>c</em>=0 的两个解。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import math</span><br><span class="line"></span><br><span class="line">def quadratic(a, b, c):</span><br><span class="line"></span><br><span class="line">  x1 = (-b + math.sqrt(b * b - 4 * a * c)) / (2 * a)</span><br><span class="line"></span><br><span class="line">  x2 = (-b - math.sqrt(b * b - 4 * a * c)) / (2 * a)</span><br><span class="line"></span><br><span class="line">  return x1, x2</span><br></pre></td></tr></table></figure>

<h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><h4 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h4><p>我们先写一个计算x2的函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def power(x):</span><br><span class="line">    return x * x</span><br></pre></td></tr></table></figure>

<p>对于<code>power(x)</code>函数，参数<code>x</code>就是一个位置参数。</p>
<p>当我们调用<code>power</code>函数时，必须传入有且仅有的一个参数<code>x</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; power(5)</span><br><span class="line">25</span><br><span class="line">&gt;&gt;&gt; power(15)</span><br><span class="line">225</span><br></pre></td></tr></table></figure>

<p>现在，如果我们要计算x3怎么办？可以再定义一个<code>power3</code>函数，但是如果要计算x4、x5……怎么办？我们不可能定义无限多个函数。</p>
<p>你也许想到了，可以把<code>power(x)</code>修改为<code>power(x, n)</code>，用来计算xn，说干就干：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def power(x, n):</span><br><span class="line">    s = 1</span><br><span class="line">    while n &gt; 0:</span><br><span class="line">        n = n - 1</span><br><span class="line">        s = s * x</span><br><span class="line">    return s</span><br></pre></td></tr></table></figure>

<p>对于这个修改后的<code>power(x, n)</code>函数，可以计算任意n次方：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; power(5, 2)</span><br><span class="line">25</span><br><span class="line">&gt;&gt;&gt; power(5, 3)</span><br><span class="line">125</span><br></pre></td></tr></table></figure>

<p>修改后的<code>power(x, n)</code>函数有两个参数：<code>x</code>和<code>n</code>，这两个参数都是位置参数，调用函数时，传入的两个值按照位置顺序依次赋给参数<code>x</code>和<code>n</code>。</p>
<h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><p>就是如果你没有传入参数进去就直接使用默认参数。</p>
<p>新的<code>power(x, n)</code>函数定义没有问题，但是，旧的调用代码失败了，原因是我们增加了一个参数，导致旧的代码因为缺少一个参数而无法正常调用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; power(5)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: power() missing 1 required positional argument: &#x27;n&#x27;</span><br></pre></td></tr></table></figure>

<p>Python的错误信息很明确：调用函数<code>power()</code>缺少了一个位置参数<code>n</code>。</p>
<p>这个时候，默认参数就排上用场了。由于我们经常计算x2，所以，完全可以把第二个参数n的默认值设定为2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def power(x, n=2):</span><br><span class="line">    s = 1</span><br><span class="line">    while n &gt; 0:</span><br><span class="line">        n = n - 1</span><br><span class="line">        s = s * x</span><br><span class="line">    return s</span><br></pre></td></tr></table></figure>

<p>这样，当我们调用<code>power(5)</code>时，相当于调用<code>power(5, 2)</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; power(5)</span><br><span class="line">25</span><br><span class="line">&gt;&gt;&gt; power(5, 2)</span><br><span class="line">25</span><br></pre></td></tr></table></figure>

<p>而对于<code>n &gt; 2</code>的其他情况，就必须明确地传入n，比如<code>power(5, 3)</code>。</p>
<p>从上面的例子可以看出，默认参数可以简化函数的调用。设置默认参数时，有几点要注意：</p>
<p>一是必选参数在前，默认参数在后，否则Python的解释器会报错（思考一下为什么默认参数不能放在必选参数前面）；</p>
<p>二是如何设置默认参数。</p>
<p>当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。</p>
<p>使用默认参数有什么好处？最大的好处是能降低调用函数的难度。</p>
<p>举个例子，我们写个一年级小学生注册的函数，需要传入<code>name</code>和<code>gender</code>两个参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def enroll(name, gender):</span><br><span class="line">    print(&#x27;name:&#x27;, name)</span><br><span class="line">    print(&#x27;gender:&#x27;, gender)</span><br></pre></td></tr></table></figure>

<p>这样，调用<code>enroll()</code>函数只需要传入两个参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; enroll(&#x27;Sarah&#x27;, &#x27;F&#x27;)</span><br><span class="line">name: Sarah</span><br><span class="line">gender: F</span><br></pre></td></tr></table></figure>

<p>如果要继续传入年龄、城市等信息怎么办？这样会使得调用函数的复杂度大大增加。</p>
<p>我们可以把年龄和城市设为默认参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def enroll(name, gender, age=6, city=&#x27;Beijing&#x27;):</span><br><span class="line">    print(&#x27;name:&#x27;, name)</span><br><span class="line">    print(&#x27;gender:&#x27;, gender)</span><br><span class="line">    print(&#x27;age:&#x27;, age)</span><br><span class="line">    print(&#x27;city:&#x27;, city)</span><br></pre></td></tr></table></figure>

<p>这样，大多数学生注册时不需要提供年龄和城市，只提供必须的两个参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; enroll(&#x27;Sarah&#x27;, &#x27;F&#x27;)</span><br><span class="line">name: Sarah</span><br><span class="line">gender: F</span><br><span class="line">age: 6</span><br><span class="line">city: Beijing</span><br></pre></td></tr></table></figure>

<p>只有与默认参数不符的学生才需要提供额外的信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enroll(&#x27;Bob&#x27;, &#x27;M&#x27;, 7)</span><br><span class="line">enroll(&#x27;Adam&#x27;, &#x27;M&#x27;, city=&#x27;Tianjin&#x27;)</span><br></pre></td></tr></table></figure>

<p>有多个默认参数时，调用的时候，既可以按顺序提供默认参数，比如调用<code>enroll(&#39;Bob&#39;, &#39;M&#39;, 7)</code>，意思是，除了<code>name</code>，<code>gender</code>这两个参数外，最后1个参数应用在参数<code>age</code>上，<code>city</code>参数由于没有提供，仍然使用默认值。</p>
<p>也可以不按顺序提供部分默认参数。当不按顺序提供部分默认参数时，需要把参数名写上。比如调用<code>enroll(&#39;Adam&#39;, &#39;M&#39;, city=&#39;Tianjin&#39;)</code>，意思是，<code>city</code>参数用传进去的值，其他默认参数继续使用默认值。</p>
<p>默认参数很有用，但使用不当，也会掉坑里。默认参数有个最大的坑，演示如下：</p>
<p>先定义一个函数，传入一个list，添加一个<code>END</code>再返回：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def add_end(L=[]):</span><br><span class="line">    L.append(&#x27;END&#x27;)</span><br><span class="line">    return L</span><br></pre></td></tr></table></figure>

<p>当你正常调用时，结果似乎不错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; add_end([1, 2, 3])</span><br><span class="line">[1, 2, 3, &#x27;END&#x27;]</span><br><span class="line">&gt;&gt;&gt; add_end([&#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;])</span><br><span class="line">[&#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;END&#x27;]</span><br></pre></td></tr></table></figure>

<p>当你使用默认参数调用时，一开始结果也是对的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; add_end()</span><br><span class="line">[&#x27;END&#x27;]</span><br></pre></td></tr></table></figure>

<p>但是，再次调用<code>add_end()</code>时，结果就不对了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; add_end()</span><br><span class="line">[&#x27;END&#x27;, &#x27;END&#x27;]</span><br><span class="line">&gt;&gt;&gt; add_end()</span><br><span class="line">[&#x27;END&#x27;, &#x27;END&#x27;, &#x27;END&#x27;]</span><br></pre></td></tr></table></figure>

<p>很多初学者很疑惑，默认参数是<code>[]</code>，但是函数似乎每次都“记住了”上次添加了<code>&#39;END&#39;</code>后的list。</p>
<p>原因解释如下：</p>
<p>Python函数在定义的时候，默认参数<code>L</code>的值就被计算出来了，即<code>[]</code>，因为默认参数<code>L</code>也是一个变量，它指向对象<code>[]</code>，每次调用该函数，如果改变了<code>L</code>的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的<code>[]</code>了。</p>
<p> <strong>定义默认参数要牢记一点：默认参数必须指向不变对象！</strong></p>
<p>要修改上面的例子，我们可以用<code>None</code>这个不变对象来实现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def add_end(L=None):</span><br><span class="line">    if L is None:</span><br><span class="line">        L = []</span><br><span class="line">    L.append(&#x27;END&#x27;)</span><br><span class="line">    return L</span><br></pre></td></tr></table></figure>

<p>现在，无论调用多少次，都不会有问题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; add_end()</span><br><span class="line">[&#x27;END&#x27;]</span><br><span class="line">&gt;&gt;&gt; add_end()</span><br><span class="line">[&#x27;END&#x27;]</span><br></pre></td></tr></table></figure>

<p>为什么要设计<code>str</code>、<code>None</code>这样的不变对象呢？因为不变对象一旦创建，对象内部的数据就不能修改，这样就减少了由于修改数据导致的错误。此外，由于对象不变，多任务环境下同时读取对象不需要加锁，同时读一点问题都没有。我们在编写程序时，如果可以设计一个不变对象，那就尽量设计成不变对象。</p>
<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>在Python函数中，还可以定义可变参数。顾名思义，可变参数就是传入的参数个数是可变的，可以是1个、2个到任意个，还可以是0个。</p>
<p>我们以数学题为例子，给定一组数字a，b，c……，请计算a2 + b2 + c2 + ……。</p>
<p>要定义出这个函数，我们必须确定输入的参数。由于参数个数不确定，我们首先想到可以把a，b，c……作为一个list或tuple传进来，这样，函数可以定义如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def calc(numbers):</span><br><span class="line">    sum = 0</span><br><span class="line">    for n in numbers:</span><br><span class="line">        sum = sum + n * n</span><br><span class="line">    return sum</span><br></pre></td></tr></table></figure>

<p>但是调用的时候，需要先组装出一个list或tuple：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; calc([1, 2, 3])</span><br><span class="line">14</span><br><span class="line">&gt;&gt;&gt; calc((1, 3, 5, 7))</span><br><span class="line">84</span><br></pre></td></tr></table></figure>

<p>如果利用可变参数，调用函数的方式可以简化成这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; calc(1, 2, 3)</span><br><span class="line">14</span><br><span class="line">&gt;&gt;&gt; calc(1, 3, 5, 7)</span><br><span class="line">84</span><br></pre></td></tr></table></figure>

<p>所以，我们把函数的参数改为可变参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def calc(*numbers):</span><br><span class="line">    sum = 0</span><br><span class="line">    for n in numbers:</span><br><span class="line">        sum = sum + n * n</span><br><span class="line">    return sum</span><br></pre></td></tr></table></figure>

<p>定义可变参数和定义一个list或tuple参数相比，仅仅在参数前面加了一个<code>*</code>号。在函数内部，参数<code>numbers</code>接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; calc(1, 2)</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; calc()</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<p>如果已经有一个list或者tuple，要调用一个可变参数怎么办？可以这样做：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; nums = [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; calc(nums[0], nums[1], nums[2])</span><br><span class="line">14</span><br></pre></td></tr></table></figure>

<p>这种写法当然是可行的，问题是太繁琐，所以Python允许你在list或tuple前面加一个<code>*</code>号，把list或tuple的元素变成可变参数传进去：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; nums = [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; calc(*nums)</span><br><span class="line">14</span><br></pre></td></tr></table></figure>

<h3 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h3><p>可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。请看示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def person(name, age, **kw):</span><br><span class="line">    print(&#x27;name:&#x27;, name, &#x27;age:&#x27;, age, &#x27;other:&#x27;, kw)</span><br></pre></td></tr></table></figure>

<p>函数<code>person</code>除了必选参数<code>name</code>和<code>age</code>外，还接受关键字参数<code>kw</code>。在调用该函数时，可以只传入必选参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; person(&#x27;Michael&#x27;, 30)</span><br><span class="line">name: Michael age: 30 other: &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>也可以传入任意个数的关键字参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Bob&#x27;</span>, <span class="number">35</span>, city=<span class="string">&#x27;Beijing&#x27;</span>)</span><br><span class="line">name: Bob age: <span class="number">35</span> other: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Adam&#x27;</span>, <span class="number">45</span>, gender=<span class="string">&#x27;M&#x27;</span>, job=<span class="string">&#x27;Engineer&#x27;</span>)</span><br><span class="line">name: Adam age: <span class="number">45</span> other: &#123;<span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>关键字参数有什么用？它可以扩展函数的功能。比如，在<code>person</code>函数里，我们保证能接收到<code>name</code>和<code>age</code>这两个参数，但是，如果调用者愿意提供更多的参数，我们也能收到。试想你正在做一个用户注册的功能，除了用户名和年龄是必填项外，其他都是可选项，利用关键字参数来定义这个函数就能满足注册的需求。</p>
<p>和可变参数类似，也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>extra = &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, city=extra[<span class="string">&#x27;city&#x27;</span>], job=extra[<span class="string">&#x27;job&#x27;</span>])</span><br><span class="line">name: Jack age: <span class="number">24</span> other: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>当然，上面复杂的调用可以用简化的写法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; extra = &#123;&#x27;city&#x27;: &#x27;Beijing&#x27;, &#x27;job&#x27;: &#x27;Engineer&#x27;&#125;</span><br><span class="line">&gt;&gt;&gt; person(&#x27;Jack&#x27;, 24, **extra)</span><br><span class="line">name: Jack age: 24 other: &#123;&#x27;city&#x27;: &#x27;Beijing&#x27;, &#x27;job&#x27;: &#x27;Engineer&#x27;&#125;</span><br></pre></td></tr></table></figure>

<p><code>**extra</code>表示把<code>extra</code>这个dict的所有key-value用关键字参数传入到函数的<code>**kw</code>参数，<code>kw</code>将获得一个dict，注意<code>kw</code>获得的dict是<code>extra</code>的一份拷贝，对<code>kw</code>的改动不会影响到函数外的<code>extra</code>。</p>
<p>参考文献：</p>
<p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017063413904832">廖雪峰的python教程</a></p>
<p><a href="https://jomeswang.github.io/posts/4c8d96c5/">旺旺学长的博客</a></p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>next数学方程的解析</title>
    <url>/2022/02/05/next%E6%95%B0%E5%AD%A6%E6%96%B9%E7%A8%8B%E7%9A%84%E8%A7%A3%E6%9E%90/index.html</url>
    <content><![CDATA[<h1 id="Math-Equations-数学方程"><a href="#Math-Equations-数学方程" class="headerlink" title="Math Equations(数学方程)"></a>Math Equations(数学方程)</h1><p>Math Formulas Render Support.</p>
<p>可以使数学公式变得好看点。</p>
<a id="more"></a>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Math Formulas Render Support</span><br><span class="line">math:</span><br><span class="line">  # Default (false) will load mathjax / katex script on demand.</span><br><span class="line">  # That is it only render those page which has `mathjax: true` in front-matter.</span><br><span class="line">  # If you set it to true, it will load mathjax / katex script EVERY PAGE.</span><br><span class="line">  every_page: false</span><br><span class="line"></span><br><span class="line">  mathjax:</span><br><span class="line">    enable: true</span><br><span class="line">    # Available values: none | ams | all</span><br><span class="line">    tags: none</span><br><span class="line"></span><br><span class="line">  katex:</span><br><span class="line">    enable: false</span><br><span class="line">    # See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span><br><span class="line">    copy_tex: false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>默认 (false) 将按需加载 mathjax / katex 脚本。</p>
<p>那就是它只渲染那些在 front-matter 中有 <code>mathjax: true</code> 的页面。</p>
<p>如果你将它设置为 true，它将在每一页加载 mathjax / katex 脚本。</p>
<h4 id="简单方程"><a href="#简单方程" class="headerlink" title="简单方程"></a>简单方程</h4><p>对于简单的方程，使用以下形式给出一个标签，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$\begin&#123;equation&#125; \label&#123;eq1&#125; </span><br><span class="line">e=mc^2 </span><br><span class="line">\end&#123;equation&#125;$$</span><br></pre></td></tr></table></figure>

<p>e =mc^2  (1)</p>
<p>然后，您可以使用以下内容轻松地在文本中引用此等式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">爱因斯坦提出的著名物质能量方程$\eqref&#123;eq1&#125;$...</span><br></pre></td></tr></table></figure>

<p>著名的物质能量方程(1)爱因斯坦提出…</p>
<h4 id="多线方程"><a href="#多线方程" class="headerlink" title="多线方程"></a>多线方程</h4><p>对于多行方程，在<code>equation</code>环境内部，您可以使用<code>aligned</code>环境将其拆分为多行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$\begin&#123;equation&#125; \label&#123;eq2&#125; </span><br><span class="line">\begin&#123;aligned&#125; </span><br><span class="line">a &amp;= b + c \\ </span><br><span class="line">  &amp;= d + e + f + g \\ </span><br><span class="line">  &amp;= h + i </span><br><span class="line">\end&#123;aligned&#125; </span><br><span class="line">\end&#123;equation&#125;$$</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方程 $\eqref&#123;eq2&#125;$ 是一个多线方程。</span><br></pre></td></tr></table></figure>

<h4 id="多个对齐方程"><a href="#多个对齐方程" class="headerlink" title="多个对齐方程"></a>多个对齐方程</h4><p>我们可以使用<code>align</code>环境来对齐多个方程。这些方程中的每一个都会得到自己的数字。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$\begin&#123;align&#125; </span><br><span class="line">a &amp;= b + c \label&#123;eq3&#125; \\ </span><br><span class="line">x &amp;= yz \label&#123;eq4&#125; \\ </span><br><span class="line">l &amp;= m - n \label&#123;eq5&#125; </span><br><span class="line">\end&#123;align&#125;$$</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有三个对齐的方程：方程$\eqref&#123;eq3&#125;$、方程$\eqref&#123;eq4&#125;$和方程$\eqref&#123;eq5&#125;$。</span><br></pre></td></tr></table></figure>



<p>因为<code>align</code>它本身就是一个完整的方程环境（阅读<a href="https://tex.stackexchange.com/questions/95402/what-is-the-difference-between-aligned-in-displayed-mode-and-starred-align">这里</a><code>aligned</code>关于 LaTeX和LaTeX之间的区别<code>align</code>）。你不需要用<code>equation</code>环境包装它。</p>
<h4 id="从编号中排除方程式"><a href="#从编号中排除方程式" class="headerlink" title="从编号中排除方程式"></a>从编号中排除方程式</h4><p>在<code>align</code>环境中，如果您不想对一个或一些方程式进行编号，只需<code>\nonumber</code>在这些方程式后面使用即可。如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$\begin&#123;align&#125; </span><br><span class="line">-4 + 5x &amp;= 2 + y \nonumber \\ </span><br><span class="line">w + 2 &amp;= -1 + w \\ </span><br><span class="line">ab &amp;= cb </span><br><span class="line">\end&#123;align&#125;$$</span><br></pre></td></tr></table></figure>



<h4 id="用于-tag标记方程"><a href="#用于-tag标记方程" class="headerlink" title="用于\tag标记方程"></a>用于<code>\tag</code>标记方程</h4><p>有时，您想使用更“异国情调”的风格来引用您的方程式。您可以使用<code>\tag&#123;&#125;</code>来实现这一点。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$x+1\over\sqrt&#123;1-x^2&#125; \tag&#123;i&#125;\label&#123;eq_tag&#125;$$</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方程 $\eqref&#123;eq_tag&#125;$ 使用 `\tag&#123;&#125;` 代替自动编号。</span><br></pre></td></tr></table></figure>

<p>）使用<code>\tag&#123;&#125;</code>而不是自动编号。</p>
<p>参考文献：</p>
<p><a href="https://theme-next.js.org/docs/third-party-services/math-equations.html">https://theme-next.js.org/docs/third-party-services/math-equations.html</a></p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>maths</tag>
      </tags>
  </entry>
  <entry>
    <title>人文社科读书笔记</title>
    <url>/2022/02/05/%E4%BA%BA%E6%96%87%E7%A4%BE%E7%A7%91%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/index.html</url>
    <content><![CDATA[<p>虽然我是工科生，可又怎么能割舍掉内心对人文的热爱呢？</p>
<a id="more"></a>

<h1 id="《乡土中国》"><a href="#《乡土中国》" class="headerlink" title="《乡土中国》"></a>《乡土中国》</h1><p>我们的民族是和泥土分不开的。“乡下人离不了泥土，因为在乡下住，种地是最普通的谋生方法。”就算是到了适宜游牧生活的美国大草原，中原人也依然会一家划一方地，种植起来；真像是往土里一钻，看不到其他利用这块地的方法了。写到这里，费孝通先生很有一些恨铁不成钢地写道“现在很有些飞不上天地样子”。</p>
<p>但更多的时候，他是在客观地分析为何中国人（尤其是乡下人）土气：农业和游牧或工业不同，它是直接取资于土地的。游牧的人可以逐水草而居，飘忽无定；做工业的人可以择地而居，迁移无碍；而种地的人却搬不动地，长在土里的庄稼行动不得，侍候庄稼的老农也像是半截身子插入了泥土里，土气是因为不流动而发生的。</p>
<p>因为土地，所以显得扎根于泥土中；因为土地，更解释了为什么中国人选择带着地球一起去流浪，而不是像一些美国史诗一样，只顾自己的逃亡。</p>
<p>但是，更加有趣的是，人口必然会增加，一块地上只要几代人的繁殖，人口就到了饱和点，过剩的人口要养活，就必须拿起锄头去开辟新地。然后他们又形成一个小小的家族殖民地，找不到土地的就在各式各样的命运中被淘汰了，或是“发迹了”，去到城镇，然后开启一种新的生活。</p>
<p>乡土社会在地方性的限制下成了生于斯、死于斯的社会。就像我们所说的落叶归根。这是一个熟悉的社会，没有陌生人的社会。</p>
<p>在社会学里，我们常分出两种不同性质的社会，一种并没有具体目的，只是因为在一起生长而发生的社会，一种是为了要完成一件任务而结合的社会、用涂尔干的话说，前者是“有机的团结”，后者是“机械的团结”，前者是礼俗社会，后者是法理社会。乡民们平素所接触的是生而与俱的人物，正像我们的父母兄弟一般，并不是由于我们选择得来的关系，而是先我们而在的一个环境。</p>
<p>乡土社会从熟悉里得到了信任。“我们大家是熟人，打个招呼就是了，还用得着多说吗？”现代社会是陌生人的社会，各人不知道各人的底细，所以要说得明明白白，还怕赖账，所以签个字，画个押，这样就发生了法律了。熟人社会是不需要法律得，大家都互相信任，欺骗了，他得名声就臭了，以后再也不能在这篇土地上立足，只能蝇营狗苟地生活下去，代价其实是很大的。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>life</tag>
        <tag>碎碎念</tag>
      </tags>
  </entry>
  <entry>
    <title>life trivia</title>
    <url>/2022/02/05/%E5%94%87%E9%87%89%E5%92%8C%E5%8F%A3%E7%BA%A2%E7%9A%84%E5%8C%BA%E5%88%AB/index.html</url>
    <content><![CDATA[<h1 id="唇釉和口红的区别"><a href="#唇釉和口红的区别" class="headerlink" title="唇釉和口红的区别"></a>唇釉和口红的区别</h1><p>给直男（指我自己）讲一下有什么区别</p>
<a id="more"></a>

<p>什么？居然有直男觉得唇釉和口红是一个东西？</p>
<p><img src="/2022/02/05/%E5%94%87%E9%87%89%E5%92%8C%E5%8F%A3%E7%BA%A2%E7%9A%84%E5%8C%BA%E5%88%AB/index/image-20220204235559464.png" alt="image-20220204235559464"></p>
<p><img src="/2022/02/05/%E5%94%87%E9%87%89%E5%92%8C%E5%8F%A3%E7%BA%A2%E7%9A%84%E5%8C%BA%E5%88%AB/index/image-20220204235619899.png" alt="image-20220204235619899"></p>
<p>首先，唇釉相当于是液体的口红。</p>
<p>其次，效果当然是不一样的。</p>
<p><img src="/2022/02/05/%E5%94%87%E9%87%89%E5%92%8C%E5%8F%A3%E7%BA%A2%E7%9A%84%E5%8C%BA%E5%88%AB/index/image-20220204235753733.png" alt="image-20220204235753733"></p>
<p>看这张图他哪里一样了？</p>
<p>唇釉可以晕染，口红，你说怎么晕染？</p>
<p>晕染了会变血红大口的。</p>
<p>但是口红需要经常补，唇釉不用，因为唇釉是直接成膜然后覆在嘴唇上面。</p>
<p>看看知乎的分析：</p>
<p>作者：骆先森<br>链接：<a href="https://zhuanlan.zhihu.com/p/388778829">https://zhuanlan.zhihu.com/p/388778829</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<p><strong>唇釉与口红有什么区别</strong></p>
<p>　　<strong>1.质地</strong></p>
<p>　　口红属于固体膏状，采用圆管的包装，看起来就像一只粗短的蜡笔；</p>
<p>　　唇釉属于液体状，它的液体并不清澈，显得有点粘稠。采用灌装包装，自带唇刷。</p>
<p>　　<strong>2.滋润度</strong></p>
<p>　　口红的滋润度各有不同，有偏干、也有较为滋润的，但是唇釉的滋润度是一定高于口红的。</p>
<p>　　即便是滋润型口红的滋润度也不及唇釉。</p>
<p>　　<strong>3.显色度</strong></p>
<p>　　专业性的口红显色度比较好，滋润型口红显色度差；</p>
<p>　　唇釉的显色度则普遍不错，尤其是欧美的唇釉。</p>
<p>　　<strong>4.上妆/补妆</strong></p>
<p>　　口红在上妆时比较麻烦，但后续补妆非常方便，用纸巾擦拭掉之前的口红再重新上一层即可；</p>
<p>　　唇釉在上妆时十分方便，但脱落后就很难擦拭掉再涂一层，涂太厚也容易起皮。</p>
<p>　　<strong>5.使用方法</strong></p>
<p>　　口红使用时先用润唇膏进行打底，再将口红膏体旋转出来，根据自己想要的效果进行涂抹；</p>
<p>　　唇釉主要靠唇刷涂抹，借助唇刷这个载体将液体涂抹在唇部上。</p>
<p>　　<strong>6.使用感受</strong></p>
<p>　　口红质地较为干硬，使用时不容易涂抹开，涂抹后唇部皮肤也容易干燥，更容易脱妆；</p>
<p>　　唇釉属于液体口红，使用时比较容易涂抹，质地也会水润许多。</p>
<p> 　<strong>建议买口红还是买唇釉</strong></p>
<p>　　买口红还是买唇釉主要根据个人喜好、妆感等来决定。</p>
<p>　　如果想要上嘴舒服、补妆方便、质地滋润，那可以选择口红；如果想要持久度高、颜色鲜艳饱满，那就选择唇釉。</p>
<p>　　新手如果要购买的话建议买口红，口红是固态的质地，方便涂抹且上色均匀，而唇釉为液体状，不容易掌握取用的度， 容易导致涂抹过多。</p>
<p>镜面唇釉，个人不太喜欢，像抹了油似的</p>
<p><img src="/2022/02/05/%E5%94%87%E9%87%89%E5%92%8C%E5%8F%A3%E7%BA%A2%E7%9A%84%E5%8C%BA%E5%88%AB/index/image-20220205000723575.png" alt="image-20220205000723575"></p>
<p>丝绒唇釉就真的是yyds了！很戳我审美点！</p>
<p>就是说，一般是建议口红，涂抹方便易于携带，可以随时补妆；但如果你喜欢唇釉的雾感，那就再买一支唇釉吧。</p>
<p>直女建议一支口红一支唇釉就够了，买太多是浪费钱。</p>
<h1 id="直男行为图鉴"><a href="#直男行为图鉴" class="headerlink" title="直男行为图鉴"></a>直男行为图鉴</h1><p><img src="/2022/02/05/%E5%94%87%E9%87%89%E5%92%8C%E5%8F%A3%E7%BA%A2%E7%9A%84%E5%8C%BA%E5%88%AB/index/image-20220206123730775.png" alt="image-20220206123730775"></p>
<p><img src="/2022/02/05/%E5%94%87%E9%87%89%E5%92%8C%E5%8F%A3%E7%BA%A2%E7%9A%84%E5%8C%BA%E5%88%AB/index/image-20220206124714144.png" alt="image-20220206124714144"></p>
]]></content>
      <tags>
        <tag>life</tag>
        <tag>girls</tag>
      </tags>
  </entry>
  <entry>
    <title>Some life tips</title>
    <url>/2022/02/04/matepad%E8%BF%9E%E6%8E%A5%E5%8F%8C%E5%B1%8F/index.html</url>
    <content><![CDATA[<h1 id="matepad连接双屏"><a href="#matepad连接双屏" class="headerlink" title="matepad连接双屏"></a>matepad连接双屏</h1><a id="more"></a>



<p><img src="/2022/02/04/matepad%E8%BF%9E%E6%8E%A5%E5%8F%8C%E5%B1%8F/index/image-20220204200831866.png" alt="image-20220204200831866"></p>
<p>双击打开最后一个</p>
<p><img src="/2022/02/04/matepad%E8%BF%9E%E6%8E%A5%E5%8F%8C%E5%B1%8F/index/image-20220204200947542.png" alt="image-20220204200947542"></p>
<p>建议把spacedesk 和Videowall全部打开</p>
<p>然后win+P设为扩展</p>
<p>然后把要在副屏看的界面拖到主屏幕的右边就可以了</p>
<p>理论上这样也可以实现对电脑的远程控制，但是实在是太慢了！！！！</p>
<p><img src="/2022/02/04/matepad%E8%BF%9E%E6%8E%A5%E5%8F%8C%E5%B1%8F/index/image-20220219135818315.png" alt="image-20220219135818315"></p>
<p>啊哈哈，因为老是不小心按到insert键。</p>
]]></content>
      <categories>
        <category>生活的技巧</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>write before</title>
    <url>/2022/02/03/write%20before/index.html</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Welcome to my blog, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX19ZM1/11OIhzAcaHjPnvmT48kxXEZGdatEy6pjWmf8wJXLwlqXDJ8iF27t79hqc0rl/Dfg+NoN7tm/wO6WiUPmq2l1dSdCkj878TQtCL3qSvTnWGv0GBmqyDIN4WNxuBl2DcfLz55fRmK94pi0bm24QgEjPpypToF2wnetAL/IVcNgsntV/Fru7JtSwJEqK+fZIguTSVo8bJ2pYx5RgKj2QQmY/cjcVRuW/PkndqsMxQ24kJ8TAO6/DfyNKoRjEyh9Ad25WbUdDHmBh5gFgbJlqJmTPqreJmurfxRayKJr2i/n0LbNp7Xtj9hsr3zEXwybIjbxtn/mKbY4ZB5OTRfNGh71oL6jKlk1si9BB+BikTHZZS7ztRm3CVuMW+f4kfj9sMY3gwtlUp5HRRG9u1KHHwUGQWmWXWDitfcDIdvgaOVBTKd5uT+CfToVz9FjRL91OIdxH2BAdQsp1E8yYoxQr7rnqbkYJzMV8VteFpQOYTUxTHy528IUEg2fm1jnkj/Qqyuz341F2IQNiUDG60ljuIXPIzuCpu6/QVg1rjYDb17hfMr5tVoZ6qIP9pUaPeY/YOki0J0VWXZdWPyv6IJBAGCpGHrZIURkoDCAMUqQGl0YE0ES4OFOefVz2/NjO/SeFk0GcCc6JQUqAjF9oQEi74mXGtZ4wOCOjfFdh4Y8Xtk7yXNRmXcA4L0c0Q1Y5CM6Y3gnzFMUVpH8z4J6AI/QZ6GisbKBbA8KkYCpTMtxzA5sad/w1nlg14NvDk9mwXQdan01578rpAcqLfGR47j09hlAxvwH73LPW3OIXc1aJgnvr1xzqIk01piFcaHwSHyBC6Br/hvuVT5w5QBfhlAiN4ADqW6pRwTRqTLJoE5cFfzZk8fNynETnS1mHjAqNzKBHeNAnOnHPNc6o4aHCsp90m82VsiYf0npfy5bjTEvTYOjOm567ILuncelJfraOomxaKoehQOszBCqR7Nzz0ax3iELw+G1PspAFwMR+Y6OzTgCSB1qthEmUgvIMZEzktHJp/I2R7FyG48C7JTXP8fS9owbQI7EiE/neAAfaQtEW1ZUawqMzPxChB9YdyfB2JC6eKT/qv7NfeBlneSF/HtZCOpgpP0O++HWxtKYB+y80lG1ztAOKfHHDOy8qMvqlR/IBIAGSi0kcovx1lQKe+ZMAXJuu5qKdmZl2FWW7bS/Ji+EYOYFv7WolKfY9ynLGuWRTWQJ2ASfAQ2Coitddhb59pSpZMPmhfFehN1mURBkGGMjRQO6Vp6R9xmPXT7q66bCNSdwNnDukL0pRefsjYiTYm3+QxM6HT1aQXY8AOsfI/EBeg0eN/AYSn/VxC24x8inL5DGltFygnoXqQl2NQE4AwK5OZeLRcP6dCk4DUSI/fbLGOFYUc5i67cGacctraCFtsDTA2LFSvnk3xLRY30iRVKQOt8B36XRWII6zRWGkrSVJQvHfk4GyF4WHJpwuDLZfuDqF8tRDgjf2WbxzPVtXVA7BPrwp6vyy0BzdQauhQC5j2I9z+qM+UF1dnLYzRO12JB8bF5hoRgisJzchkVBI86UersavUv/Mr9iLs6a65yM78ffNcr1HV+3CRhpZWXvTvFEpoJhzyGSVZ+V1zMomJ+E+DwyCuwhShKVJRREC0Zqlik9ZsAoEfAw/Rlg1ZBLqow73MzrW2V+YCV2cjJxsKtZZTnWWlO8l72H/Nwc9cRLHZmZbWB8stb9xZ1QH63eZrsYe68jl03OyQj6Jn1imi55k4/+tPhETZLLgYZr2+DjwnJwsi6NAu+iCPOKzpybPFCNZ9NefL9ZqdyzLOdUYRaNyLhjNwqWZOs02nDLrBMgNmTfiAsa8lNPoHZvORU6uO8kLSBa34MXBBH9TbVnKyepXSFWwtfjrDw6jkEeqY2AUbmagp+JDCe5226tv7mpaZ9+aaAH7xXMas2HdzI8224Ll9hKVF/z/yXWJLzbTC+ou4uWk/g14Z88epiEquC6ZYUNNcI6eMAUs8im/YYthZl6l0O+dBc5KwU5KVooP5tHYmFx7x+/6WZbe0Dc0BKlI3LFlQzTmFHxiDxuXgJ/NyTpdehvuGhfUVjhN4UJCatGAMUewBAjnu70fImXUCEDzTlCK816ohA8Cyi8YPyl775adPMt6Ir6g7HQpaVjK1cppZa/VvMdYk4pvA633N6MM24Z4GhxUAOqFR1J7jCkahdqz9zBYw4kUHHSadRQ9P5JWB5exIXuDmYVyBBAxzmpElDybAO23hfj2JNYD6mWEp3BQOzlVXnc8PyFHnGhcLfolEmTWgJvtOll4JwZMVWVmBljQ6brVd7SIFshdHkyJFPyfJ9XkflEt0lSJoF1/cn9txFaqPhTcGNm1k+zAKu/id9Hbl4QzrvDrTUQYS5AyWbjQ6wMXWxsho1vC+ienBAlU/JSh3WxbqdhFgFDqbU47jlg6+bTAIsnMktPFYxRdZbKqzYehmwzbkI/+zUh0DdJvWv076vMJsFfUHEWPCQGbP+IHzfCUTI7lhZ3TMcrEYFrPCaAAtBeIGzCqE8fBk6NgzeQ+w/r+c0p7m8H8XCA6c01yhFSX6a68I1wcY9CvvAuYGnMQN0gN29sPolYWg3wKP5UfLTEV9SbU5uBEVn3exVl+pfDioAfL2pyEtGQgix7QvcNI17H+y3whXZQMJJFg1JG6/nvBH9n3xbY9MAuw+X1bZRTO3fG/Z76vT6zRjsDHlvrB7gbQIkjiZFaehN3GLQviIIBUhotmGUPW8UExPKIwkXI6PkVgYHbgjX6EPz9brxgjSZpaWGbcc1ubQY1wvVf9hbVQWln82IunKycLoBIc96hOpVANplq/juTd65ThVXj7gVV1ces9zRJT9/yQ2pwC3sIwR9Rbk5yzCVWlVPZwN5XwomUkJbSxLzPqbS6CEHSAFvJepOg7K8iGdyL/TBt7bEFcPZFNDSpkk91BJoqLhBTynth5WRXzDhLbbTnQRSlQKKKpCELlYaop7TJdUY0JqoVE6DhWspHayTY3LqA2MEr9JnZLF2tEmsNe68+3v2+9PqkTBn/yUYe6SDCxizzJLmOXOPcLuwq7Ej8Cvpu8fuJF0FcRn8ds/UO6/75uYC5oT5vaiFpLuvUNEqYA3iGRTlMgBOjPOnsx7RVgbEgqJiJErzNd7YLVPLTlEMF6GS0+Siv/HufWMmeC6w0dkc7bI0Kuxz+WQorDz3HIsN1Hj/13R5akbkfO8pHSsV/KCKyuPJRZdtN8cV1JWnu4ATDKElhs5mjGvP+Ktpv7yzp1+klrR20YW9nuSc/KeVt4Mup9coRoyQ3g+emOFPRJiM6P9xMr9h8vJL3YvmU6sNU9VsA1MJ7OU6wjdnbGCXRahoAAfGvVeC1sH0JCszEC2O0yaQO2CQ40trGCx4/tlar6CMyWGTWy9N4iPGMGWrgxA5efrEaD6L6wZg00qBm4btwGlbLpjx8y0qZTImscb4Fszuuzopt0+Ndem253e4A3nr9zaL2womDYTV+tEH0dUFjA+iU7+o+FbSTVi8BoPnoLo/YSVPKxHAZfX/+q9BIMk2aNLUkOq6reGNGayYp/iD2K9ytWBtQQBgt5+n01UVygTRuWCbE+iR6l1zI28g8XsR3DfxZrs/1ITMsAHIBz+21Hh3iWutm8tRTpubZoPqAAtG7tKu9RiNsuMAwcT9Z0SOiZlZ9zi0st5BasaDaA43muOHKzTRqjnt94L4OtYky0/4EMYrd4T3kODCtP1pMXWJ4zNLg0+MOxSInuhLcylvn7tJ266LYvlUZixLdGIuKIzHiXYklFSueI//C8ElB3Hxf3LvmwezHOI0ghX31NRm7oMBEZ6KIZHdLxuKhVB6/6p57rmTU1N6I8dpQD4mMKYyWvCrRcpKbVG0CoDOKpkf2YvlRxFsqBstU8uLezuF0WKMNFqTPDvHGgW33V3W9Ue9iKflfuZ7YgDjmGH5uFtjaMI8QgKMPwOiUr4HZK+wsc3zRhWUEMXedvmWZBuJrXjKz7O+j422w58ZrysRtFYGaVBhInJy1nzcUUtiZ/qjsiurQ6pl0rDGkbUlLEIEdfz76Lpp9Ztc/qacdiwIqK721XM/GKchhmrNWEg6jAhIGzSWI8UVadPMX2efMOcWj5Xw+6JOPDkE1ETaOr5Qf1/dB53VHqwRmFNkbFMVhkSVCo9spafjpHmEqAxU4AppX0mNngkwB9Gu90Bw5JP60w9X6P64ahXTIQsKHAG6jeyJdQUS1PPmqVMjlB1CyF/SRwlT2A3FcnPXWmIhqscUt1tf8b0tJXjmC/XpSTCdNLbGqpZmIs0ZO0853PSt2D+ahbyqTlupZgoLI61ZF1/Zy36a48gp9dOmwuYrDtOPCb/Ia2OjGSXB0mCbHKeDFKlk5jYUheCXiJiHOKLT+aHyNH16WxTql+7F4OHZsly7Ab0LqueSVUBag5joGM+aZoEISXQ2pYpVstVWkyYAnoD5sNrEMzKyeHd4WDk4Eev4kBCj13LWqYzcn4NuiRg84NYLDx4DWX5ML1ZYHeyEqU0ni9MEgbVxgU/gOWiDW3PclmIkXCZFkj3B60hLaDtn11GJl5kgT0YxNa74r5jvytoaH2BpcVw3i+/a2+Txvq3z4GluperVwZTkLCaJ1GQAhyxgSiIoxj7dXtpYv02cGKBZy59A2FiFpYBKmR4EJP9HqaHdXcRQhRjoZrIayGyPHqt/tJN7DOOfHU7UqpcLIY3/vGeKsNQBjiumjiQIBSs5fixALiJR97xuw0P9NWRJ8HhchxAC8sQH9zJNBeTcwt0N6/6RxcYMV9SyLmCPNQC/kGbWT0mUCuTpkwgxqbHBZrY30YNMDlH+o009g+Nhp6BJW3XWUER5ORMN1gLDTRDriQqFul/YmORprDNjG7GzEnDDd7r9JqX+7qIRO/RsYAI4yMm86jOOtB655+LIg/TE7zsyj4oQyvx3G120OkGo/idOeKWuI1v2aJB6akowjxaJBYvh0o+sYqRpjVB4OxbL+iWhXjsC/JpTnUEngWDX6vLYgBf1waMuBdXMFyDbx1p3LX/MR0Ry+1KXpVo9/83BqPfMcOyESZGsmU/VVTo9TVS7zw+mc6ZegySy1nsMqkeuP36CQy3bTnt5yFJzGqiPHNE0RWbfFo/a36qLmuv6TNwLVMIm6N+AaJaM4EYeV/MOeNNmfdRwMxByQv1s3BJaTnyDfPyuqyFo/RDgwG4XPZCQBa6TdpIcUETT7UEKMD2Z+k9/TYLUM20PLk5rU3h9DLETLOyRfdoR/QUn942dPY6Cb8l4hbv4eiz6LOLeSTzhPyTynMbo25jUIO5HA3jtfvAvv6htgicbIMznlRkNcw3n95Ap2orF3hKhE8SKJgEnx8y5TfmG6CNFUVP68EytiqDTnTRlj4MtmgBULe1h/X7aNfFkkiL6GNkAhAJPNrLUxgnyRRDTjwCKolrvmGStcJVrl1lvLKIEbVzHnn4cfV3sYzs8Oj7Xc= </div>]]></content>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>博客运用hexo-next主题的设置及美化</title>
    <url>/2022/02/03/%E5%8D%9A%E5%AE%A2%E8%BF%90%E7%94%A8hexo-next%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AE%BE%E7%BD%AE%E5%8F%8A%E7%BE%8E%E5%8C%96/index.html</url>
    <content><![CDATA[<p>上篇文章已经在Windows上将个人博客个搭建好了，使用的是默认主题landscape，不过有点不太符合我们的审美，这里使用最为常见的hexo-next主题为例。</p>
<a id="more"></a>

<h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><h3 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h3><p>在blog根目录下进入命令行，输入下面的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-next --save</span><br></pre></td></tr></table></figure>

<p>这样就安装完了，不过不要以为这样就可以了哦，我们还需要启用Next主题，所以需要到<strong>站点配置文件</strong>里去设置一把，找到 theme 字段，并将其值更改为 next。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<h2 id="Hexo-主题配置文件"><a href="#Hexo-主题配置文件" class="headerlink" title="Hexo 主题配置文件"></a>Hexo 主题配置文件</h2><p>其实这个文件的配置才是重点，因为你们想要的吊炸天的效果差不多都与这个文件有关。<br>打开<strong>Hexo目录/themes/next/_config.yml</strong>文件,</p>
<h3 id="开启侧边栏社交链接"><a href="#开启侧边栏社交链接" class="headerlink" title="开启侧边栏社交链接"></a>开启侧边栏社交链接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy# Social links</span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/hydcoder</span><br><span class="line">  Weibo: https://weibo.com/3180967953/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo</span><br><span class="line">  # 等等</span><br><span class="line"></span><br><span class="line">social_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  # Icon Mappings.</span><br><span class="line">  GitHub: github</span><br><span class="line">  Weibo: weibo</span><br></pre></td></tr></table></figure>

<h3 id="选择-Scheme"><a href="#选择-Scheme" class="headerlink" title="选择 Scheme"></a>选择 Scheme</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy# Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure>

<h3 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h3><p> 打开站点配置文件，搜索 <code>language</code>，找到如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copyCopyauthor:</span><br><span class="line">language:</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure>

<p>在 <code>language</code> 后面输入 <code>zh-CN</code>。</p>
<p>注意：冒号后面必须有一个空格。</p>
<h3 id="设置侧边栏设置圆形可旋转头像"><a href="#设置侧边栏设置圆形可旋转头像" class="headerlink" title="设置侧边栏设置圆形可旋转头像"></a>设置侧边栏设置圆形可旋转头像</h3><p>D:\hexo\blog\node_modules\hexo-theme-next\source\css_common\outline\sidebar</p>
<p>在D:\hexo\blog\node_modules\hexo-theme-next\source\css_common\components目录下新建一个<strong>sidebar-author.styl</strong>文件，在里面输入以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  -webkit-border-radius: 50%;</span><br><span class="line">  -moz-border-radius: 50%;</span><br><span class="line">  transition: 1.4s all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.site-author-image:hover &#123;</span><br><span class="line">    -webkit-transform: rotate(360deg);</span><br><span class="line">    -moz-transform: rotate(360deg);</span><br><span class="line">    -ms-transform: rotate(360deg);</span><br><span class="line">    -transform: rotate(360deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.site-author-name &#123;</span><br><span class="line">  margin: $site-author-name-margin;</span><br><span class="line">  text-align: $site-author-name-align;</span><br><span class="line">  color: $site-author-name-color;</span><br><span class="line">  font-weight: $site-author-name-weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.site-description &#123;</span><br><span class="line">  margin-top: $site-description-margin-top;</span><br><span class="line">  text-align: $site-description-align;</span><br><span class="line">  font-size: $site-description-font-size;</span><br><span class="line">  color: $site-description-color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="添加动态背景"><a href="#添加动态背景" class="headerlink" title="添加动态背景"></a>添加动态背景</h2><p>先上张图</p>
<p><a href="https://s2.ax1x.com/2020/01/02/lt3FO0.gif"><img src="/2022/02/03/%E5%8D%9A%E5%AE%A2%E8%BF%90%E7%94%A8hexo-next%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AE%BE%E7%BD%AE%E5%8F%8A%E7%BE%8E%E5%8C%96/index/lt3FO0.gif" alt="img"></a></p>
<p>网站动态背景(非常占Cpu不是特别推荐，这个背景直接导致了学长在访问我的博客的时候手机死机了hhh)</p>
<p>打开D:\hexo\blog\node_modules\hexo-theme-next\layout里面的layout .njk文件然后在<body>里面输入如下代码：</body></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.canvas_nest %&#125;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot;</span><br><span class="line">  color=&quot;0,0,255&quot; opacity=&#x27;0.7&#x27; zIndex=&quot;-2&quot; count=&quot;200&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>配置项说明<br>color ：线条颜色, 默认: ‘0,0,0’；三个数字分别为(R,G,B)<br>opacity: 线条透明度（0~1）, 默认: 0.5<br>count: 线条的总数量, 默认: 150<br>zIndex: 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1</p>
<h3 id="标签列表初始化"><a href="#标签列表初始化" class="headerlink" title="标签列表初始化"></a>标签列表初始化</h3><p> 首先打开主题下的配置文件_config.yml，然后搜索menu找到如下配置项，将about、tags、categories前的#号去掉，就开启了关于、标签和分类标签，当然还有其他菜单项也可以开启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copymenu:(注意空格即/之后的空格，标准如about其他像这样改)</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/|| user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure>

<p>重新生成部署后，可以看到新增的菜单项，但是单击后会报如下错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copyCannot GET /about/</span><br><span class="line">Cannot GET /tags/</span><br><span class="line">Cannot GET /categories/</span><br></pre></td></tr></table></figure>

<p>这是因为你还需运行如下命令新建相关页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copyhexo new page &quot;about&quot;</span><br><span class="line">hexo new page &quot;tags&quot;</span><br><span class="line">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure>

<p>运行结果如下，会再source文件下创建about、tags、categories文件夹，每个文件夹下还会创建一个index.md文件表示关于、标签页分类页面，编辑这三个MarkDown文件可以自定义这三个页面的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copyD:\hexo\blog&gt;hexo new page &quot;about&quot;`</span><br><span class="line">`INFO  Created: D:\hexo\blog\source\about\index.md`</span><br><span class="line"></span><br><span class="line">`D:\hexo\blog&gt;hexo new page &quot;tags&quot;`</span><br><span class="line">`INFO  Created: D:\hexo\blog\source\tags\index.md`</span><br><span class="line"></span><br><span class="line">`D:\hexo\blog&gt;hexo new page &quot;categories&quot;`</span><br><span class="line">`INFO  Created: D:\hexo\blog\source\categories\index.md`</span><br></pre></td></tr></table></figure>

<h2 id="添加看板娘"><a href="#添加看板娘" class="headerlink" title="添加看板娘"></a>添加看板娘</h2><p>把这段代码添加到layout.njk文件中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var jsonModel = [</span><br><span class="line">    &quot;https://unpkg.com/live2d-widget-model-miku@1.0.5/assets/miku.model.json&quot;,</span><br><span class="line">    &quot;https://unpkg.com/live2d-widget-model-miku@1.0.5/assets/miku.model.json&quot;,</span><br><span class="line">    &quot;https://unpkg.com/live2d-widget-model-miku@1.0.5/assets/miku.model.json&quot;,</span><br><span class="line">    &quot;https://unpkg.com/live2d-widget-model-miku@1.0.5/assets/miku.model.json&quot;,</span><br><span class="line">    &quot;https://unpkg.com/live2d-widget-model-miku@1.0.5/assets/miku.model.json&quot;,</span><br><span class="line">    ];</span><br><span class="line">    L2Dwidget.init(&#123; </span><br><span class="line">        &quot;model&quot;: &#123; </span><br><span class="line">            &quot;jsonPath&quot;: jsonModel[Math.floor(Math.random()*(jsonModel.length-1))],</span><br><span class="line">            &quot;scale&quot;: 1 </span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;display&quot;: &#123; </span><br><span class="line">            &quot;position&quot;: &quot;right&quot;, // 位置left、right</span><br><span class="line">            &quot;width&quot;: 180, // 宽度</span><br><span class="line">            &quot;height&quot;: 240, // 高度</span><br><span class="line">            &quot;hOffset&quot;: 0, // 横向边距</span><br><span class="line">            &quot;vOffset&quot;: 0 // 众向边距</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;mobile&quot;: &#123; </span><br><span class="line">            &quot;show&quot;: true // 手机是否显示</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="/2022/02/03/%E5%8D%9A%E5%AE%A2%E8%BF%90%E7%94%A8hexo-next%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AE%BE%E7%BD%AE%E5%8F%8A%E7%BE%8E%E5%8C%96/index/image-20220205141336428.png" alt="image-20220205141336428"></p>
<h3 id="部分文章需要密码才能查看"><a href="#部分文章需要密码才能查看" class="headerlink" title="部分文章需要密码才能查看"></a>部分文章需要密码才能查看</h3><p>效果如下：</p>
<p><img src="/2022/02/03/%E5%8D%9A%E5%AE%A2%E8%BF%90%E7%94%A8hexo-next%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AE%BE%E7%BD%AE%E5%8F%8A%E7%BE%8E%E5%8C%96/index/image-20220205191804966.png" alt="image-20220205191804966"></p>
<p><img src="/2022/02/03/%E5%8D%9A%E5%AE%A2%E8%BF%90%E7%94%A8hexo-next%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AE%BE%E7%BD%AE%E5%8F%8A%E7%BE%8E%E5%8C%96/index/image-20220205191650821.png" alt="image-20220205191650821"></p>
<p>安装插件Hexo-Blog-Encrypt</p>
<p>在 hexo 根目录的 package.json 中添加 <code>&quot;hexo-blog-encrypt&quot;: &quot;1.1.*&quot;</code> 依赖。<br>然后执行<code>npm install</code> 命令。<br>该插件会自动安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-blog-encrypt</span><br></pre></td></tr></table></figure>

<p>在站点配置文件中添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Security</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line">encrypt:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>在需要加密的文章头部添加对应字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hello world</span><br><span class="line">date: 2016-03-30 21:18:02</span><br><span class="line">tags:</span><br><span class="line">    - fdsafsdaf</span><br><span class="line">password: Mike</span><br><span class="line">abstract: Welcome to my blog, enter password to read.</span><br><span class="line">message: Welcome to my blog, enter password to read.</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>如下面这篇：</p>
<p><img src="/2022/02/03/%E5%8D%9A%E5%AE%A2%E8%BF%90%E7%94%A8hexo-next%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AE%BE%E7%BD%AE%E5%8F%8A%E7%BE%8E%E5%8C%96/index/image-20220205143635827.png" alt="image-20220205143635827"></p>
<h3 id="结尾添加“本文结束”标记"><a href="#结尾添加“本文结束”标记" class="headerlink" title="结尾添加“本文结束”标记"></a>结尾添加“本文结束”标记</h3><p> 设置方法：<br>在路径<code>themes/next/layout/_macro</code>中新建<code>passage-end-tag.swig</code>文件,并添加以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy&lt;div&gt;    </span><br><span class="line">    &#123;% if not is_index %&#125;        </span><br><span class="line">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;            </span><br><span class="line">        -------------本文结束           </span><br><span class="line">        &lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;           </span><br><span class="line">        感谢您的阅读-------------        </span><br><span class="line">        &lt;/div&gt;   </span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>接着打开<code>themes/next/layout/_macro/post.njk</code>文件，在<code>post-body</code>之后，<code>post-footer</code>之前添加如下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;  </span><br><span class="line">    &#123;% if not is_index %&#125;    </span><br><span class="line">        &#123;% include &#x27;passage-end-tag.swig&#x27; %&#125;  </span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>然后打开主题配置文件<code>_config.yml</code>,在末尾添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:  </span><br><span class="line">    enabled: true</span><br></pre></td></tr></table></figure>

<h3 id="显示丝带："><a href="#显示丝带：" class="headerlink" title="显示丝带："></a>显示丝带：</h3><p><img src="/2022/02/03/%E5%8D%9A%E5%AE%A2%E8%BF%90%E7%94%A8hexo-next%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AE%BE%E7%BD%AE%E5%8F%8A%E7%BE%8E%E5%8C%96/index/image-20220205181914733.png" alt="image-20220205181914733"></p>
<p>在主题配置文件中把相关的信息修改成这个样子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">canvas_ribbon:</span><br><span class="line"></span><br><span class="line"> enable: true </span><br></pre></td></tr></table></figure>

<p>并且是可变的丝带哦</p>
<h3 id="加上结尾的标签"><a href="#加上结尾的标签" class="headerlink" title="加上结尾的标签"></a>加上结尾的标签</h3><p><img src="/2022/02/03/%E5%8D%9A%E5%AE%A2%E8%BF%90%E7%94%A8hexo-next%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AE%BE%E7%BD%AE%E5%8F%8A%E7%BE%8E%E5%8C%96/index/image-20220205182536396.png" alt="image-20220205182536396"></p>
<p>修改D:\hexo\blog\node_modules\hexo-theme-next\layout_macro的post.njk文件，找到这一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;&#123;&#123; tag_indicate &#125;&#125; &#123;&#123; tag.name &#125;&#125;&lt;/i&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;&#123;&#123; tag_indicate &#125;&#125; &#123;&#123; tag.name &#125;&#125;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>就可以了。</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>用hexo+github搭建博客</title>
    <url>/2022/02/03/%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/index.html</url>
    <content><![CDATA[<p>用hexo+github搭个人博客看这篇就够啦</p>
<a id="more"></a>

<p>近些年来很多用户都喜欢使用 GitHub Pages 来搭建 Hexo 静态博客网站，其最吸引人的莫过于完全免费使用，并且非常稳定。</p>
<p>虽然搭建时比较麻烦，有点折腾，但是配置完成后，基本不需要操心维护的事，甚至放了几年都忘记了，打开来看文章依然还在。</p>
<p>本文就详细介绍下如何使用 Hexo + GitHub 搭建免费个人博客网站的教程。</p>
<p>为了照顾小白用户（第一次使用 GitHub 和 Hexo），尽可能详细，包括常见的坑和问题都有提示说明。下面目录中<strong>第 3~5 步为最重要的步骤</strong>，其他内容如果已经会的可以选择性跳过。</p>
<p>看起来有点繁杂，捋顺了倒也简单，认真跟教程走，完整操作一遍大概需要 30 分钟。（事实上本人搭这个博客至少花了一天时间，花的时间多少主要看个人还有您看的教程是否对应最新版本，否则可能出现版本不兼容问题，然后这些问题因为我没有及时记录，所以就没有啦！解决了就行呜呜呜。）</p>
<p>o(￣▽￣)ｄ</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h3 id="GitHub-Pages-是什么？"><a href="#GitHub-Pages-是什么？" class="headerlink" title="GitHub Pages 是什么？"></a><strong>GitHub Pages 是什么？</strong></h3><ul>
<li><a href="https://link.zhihu.com/?target=https://help.github.com/en/articles/what-is-github-pages">What is GitHub Pages? - GitHub Help</a></li>
</ul>
<p>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</p>
<h3 id="Hexo-是什么？"><a href="#Hexo-是什么？" class="headerlink" title="Hexo 是什么？"></a><strong>Hexo 是什么？</strong></h3><ul>
<li>官网：<a href="https://link.zhihu.com/?target=https://hexo.io/zh-cn/">hexo.io</a></li>
</ul>
<p>Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p>
<h3 id="Hexo-GitHub-文章发布原理"><a href="#Hexo-GitHub-文章发布原理" class="headerlink" title="Hexo + GitHub 文章发布原理"></a><strong>Hexo + GitHub 文章发布原理</strong></h3><p>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。</p>
<p>差不多就是下面这张图这样：（hexo g&amp;&amp;hexo d两个命令可以简化成一个命令hexo g -d，但是我建议每次部署之前都要先清理一下缓存，不然可能会出现奇奇怪怪的问题）</p>
<p><img src="/2022/02/03/%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/index/image-20220203093820562.png" alt="image-20220203093820562"></p>
<h3 id="优点和不足"><a href="#优点和不足" class="headerlink" title="优点和不足"></a><strong>优点和不足</strong></h3><p><strong>优点：</strong>完全免费；静态站点，轻量快速；可按需求自由定制改造；托管在 GitHub，安全省心；迁移方便……</p>
<p><strong>不足：</strong>发文不便，依赖于本地环境；更适合个人博客使用；GitHub 在国内访问速度有点慢。</p>
<p>（通俗的说，就是敲hexo g -d敲到手软，每次因为github pages有延迟而只能hexo s 先预览文章）</p>
<p>并且延迟很久，明明把代码删了却好像没删一样，所以本地出现什么效果就是什么效果了。</p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h3><ul>
<li>输入代码时，核对准确，最好切换成英文输入法；</li>
<li>将文中的 “用户名” 和 “邮箱” 替换为自己的 GitHub 账户名和绑定的邮箱；</li>
<li>统一使用 Git Bash 进行操作（支持 Win、Mac）；</li>
<li>小白请严格按步骤进行，不要跳！</li>
</ul>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a><strong>环境搭建</strong></h3><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p>
<ul>
<li>Node.js：<a href="https://link.zhihu.com/?target=https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></li>
<li>Git：<a href="https://link.zhihu.com/?target=https://git-scm.com/downloads">https://git-scm.com/downloads</a></li>
</ul>
<p>下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。</p>
<p>安装完成后，Win+R 输入 cmd 并打开，依次输入 <code>node -v</code>、<code>npm -v</code> 和 <code>git --version</code> 并回车，如下图出现程序版本号即可。</p>
<p><img src="/2022/02/03/%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/index/image-20220203094412675.png"></p>
<h2 id="连接-Github"><a href="#连接-Github" class="headerlink" title="连接 Github"></a>连接 Github</h2><p>使用邮箱注册 <a href="https://link.zhihu.com/?target=https://github.com/">GitHub</a> 账户，选择免费账户（Free），并完成邮件验证。</p>
<p>建一个空的文件夹（建议命名为hexo放在D盘目录下，以后每次都要先进入这个目录然后在地址栏敲cmd把本地文件push到github上去）</p>
<p>右键-&gt;Git bash here,设置用户名和邮箱</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub 用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure>

<p><strong>创建 SSH 密钥</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure>

<p><strong>添加密匙：</strong></p>
<p>进入 [C:\Users\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p>
<p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p>
<p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p>
<p><strong>验证连接：</strong></p>
<p>打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。</p>
<p>显示 “Hi xxx! You’ve successfully……” 即连接成功。</p>
<h2 id="创建-Github-Pages-仓库"><a href="#创建-Github-Pages-仓库" class="headerlink" title="创建 Github Pages 仓库"></a>创建 Github Pages 仓库</h2><p>GitHub 主页右上角加号 -&gt; New repository：</p>
<ul>
<li>Repository name 中输入 <code>用户名.github.io</code></li>
<li>勾选 “Initialize this repository with a README”</li>
<li>Description 选填</li>
</ul>
<p>填好后点击 Create repository 创建。</p>
<p>创建后默认自动启用 HTTPS，博客地址为：<code>https://用户名.github.io</code></p>
<h2 id="本地安装-Hexo-博客程序"><a href="#本地安装-Hexo-博客程序" class="headerlink" title="本地安装 Hexo 博客程序"></a>本地安装 Hexo 博客程序</h2><p>新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。</p>
<p>在这个文件夹地址栏敲cmd回车，进入这个目录下的命令行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli        # npm 安装 hexo</span><br></pre></td></tr></table></figure>

<p><strong>blog</strong> 是 hexo 初始化的文件夹，是<strong>博客根目录</strong>，可以更换成自己喜欢的文件夹名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /d D:\hexo\blog</span><br></pre></td></tr></table></figure>

<h2 id="hexo-生成静态网页文件"><a href="#hexo-生成静态网页文件" class="headerlink" title="hexo 生成静态网页文件"></a>hexo 生成静态网页文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g    </span><br></pre></td></tr></table></figure>

<h2 id="hexo-服务"><a href="#hexo-服务" class="headerlink" title="hexo 服务"></a>hexo 服务</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>开启hexo服务后，即可通过本地访问 blog 页面（默认为**<code>localhost:4000</code>**）预览博客页面。</p>
<p>(因为用网址访问的有延迟，所以localhost有变化那就是更改成功了)</p>
<p>有时遇到端口被占用的情况我们需要更改端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s -p &quot;端口号&quot;    </span><br></pre></td></tr></table></figure>

<p>比如端口号改为4001</p>
<p><img src="/2022/02/03/%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/index/image-20220203100030826.png"></p>
<h2 id="部署-Hexo-到-GitHub-Pages"><a href="#部署-Hexo-到-GitHub-Pages" class="headerlink" title="部署 Hexo 到 GitHub Pages"></a>部署 Hexo 到 GitHub Pages</h2><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p>
<p>首先<strong>安装 hexo-deployer-git</strong>：（默认进入blog根目录进行操作）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后修改blog根目录下的 <strong>_config.yml</strong> 文件末尾的 Deployment 部分，修改成如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line"></span><br><span class="line"> type: git</span><br><span class="line"></span><br><span class="line"> repo: #这一行把ssh密钥的链接复制到这里</span><br></pre></td></tr></table></figure>

<p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p>
<p>访问我们的 GitHub 域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p>
<h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a><strong>发布文章</strong></h3><p>进入博客所在目录，右键打开 Git Bash Here，创建博文：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n &quot;hello&quot; #hello可以自由更改对应生成的文件名</span><br></pre></td></tr></table></figure>

<p>然后在 D:\hexo\blog\source_posts 目录下会出现一个hello.md文件</p>
<p>其他指令：(~/表示博客根目录)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n hello                # 简化指令</span><br><span class="line">hexo n post hello            # 新编博文并立即发布。默认 ~/source/_posts/hello.md</span><br><span class="line">hexo n draft hello            # 新编博文但暂不发布。默认 ~/source/_drafts/hello.md</span><br><span class="line">hexo n page hello            # 新建页面（标签页，分类页等）。默认 ~/source/hello</span><br></pre></td></tr></table></figure>

<p>然后进入 D:\hexo\blog\source_posts 找到 <code>hello.md</code> ，打开文件，内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: hello</span><br><span class="line">date: 1970-1-1 8:00:00</span><br><span class="line">tags: [hello, demo]</span><br></pre></td></tr></table></figure>

<p>这些是格式头 Front-matter 每次写博客都要写这个的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World # 标题</span><br><span class="line">date: 2019/3/26 hh:mm:ss # 时间</span><br><span class="line">categories: # 分类</span><br><span class="line">- Diary</span><br><span class="line">tags: # 标签</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">摘要</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">正文</span><br></pre></td></tr></table></figure>

<p>写完hexo g -d部署到github pages上就可以了</p>
<h3 id="hexo-博文插入图片"><a href="#hexo-博文插入图片" class="headerlink" title="hexo 博文插入图片"></a>hexo 博文插入图片</h3><p>更改hexo配置文件 (D:\hexo\blog\node_modules\hexo-theme-next/_config.yml`) 中的Writing配置项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>

<p>在<strong>博客根目录</strong>下安装**<code>hexo-asset-image</code>**插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<p>如果用Typora写博文的话，可以把偏好设置改一下，具体做法为文件-&gt;偏好设置-&gt;图像:</p>
<p>改成完全和下图一样的就可以了</p>
<p><img src="/2022/02/03/%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/index/image-20220203140416121.png" alt="image-20220203140416121"></p>
<p>这样你在复制粘贴图片时会typora会自动帮你放到_post目录下的同名文件夹</p>
<h3 id="hexo-添加标签页"><a href="#hexo-添加标签页" class="headerlink" title="hexo 添加标签页"></a>hexo 添加标签页</h3><p>在博客根目录下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>

<p>在 Front-matter 中添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type: tags</span><br></pre></td></tr></table></figure>

<p>完成后 hexo 便会自动生成标签页</p>
<blockquote>
<p>记得添加进入方式</p>
</blockquote>
<h3 id="hexo-添加关于页"><a href="#hexo-添加关于页" class="headerlink" title="hexo 添加关于页"></a>hexo 添加关于页</h3><p>在博客根目录下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure>

<p>在 Front-matter 中添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type: about</span><br></pre></td></tr></table></figure>

<p>在正文中输入关于页内容即可</p>
<p>记得添加进入方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: 诗酒趁年华</span><br><span class="line">subtitle: &quot;尚未佩妥剑，转眼即江湖。 &quot;</span><br><span class="line">description: &quot;&quot;</span><br><span class="line">keywords: 生活 技术 life technology</span><br><span class="line">author: jiaxin</span><br><span class="line">language: zh-CN  #选择中文作为语言</span><br><span class="line">timezone: &quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="Hexo-设置显示文章摘要，首页不显示全文"><a href="#Hexo-设置显示文章摘要，首页不显示全文" class="headerlink" title="Hexo 设置显示文章摘要，首页不显示全文"></a><strong>Hexo 设置显示文章摘要，首页不显示全文</strong></h3><p>Hexo 主页文章列表默认会显示文章全文，浏览时很不方便，可以在文章中插入 <code>&lt;!--more--&gt;</code> 进行分段。</p>
<p>该代码前面的内容会作为摘要显示，而后面的内容会替换为 “阅读全文” 隐藏起来。</p>
<p>如下图：</p>
<p><img src="/2022/02/03/%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/index/image-20220203140815732.png" alt="image-20220203140815732"></p>
<h3 id="统计访问数量"><a href="#统计访问数量" class="headerlink" title="统计访问数量"></a>统计访问数量</h3><p>效果如下：</p>
<p><img src="/2022/02/03/%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/index/image-20220203145053979.png" alt="image-20220203145053979"></p>
<p>（不过这个访问量好像有点问题，等我想想啊）</p>
<p>（后面补充：访问量在localhost形式下是有问题的没办法，在yourname\github.io\网址访问下是没有问题的。）</p>
<p>1、先在hexo-theme-next目录下的_config.yml文件的末尾加上下面的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">busuanzi:</span><br><span class="line"> enable: true</span><br></pre></td></tr></table></figure>

<p>2、打开D:\hexo\blog\node_modules\hexo-theme-next\layout\partials的footer.njk文件（这个文件相当于html文件）在最后另起一行加入如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;footer&gt;</span><br><span class="line">        &lt;!-- 不蒜子统计 --&gt;</span><br><span class="line">        &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;</span><br><span class="line">                本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">        &lt;span id=&quot;busuanzi_container_site_uv&quot; style=&#x27;display:none&#x27;&gt;</span><br><span class="line">                本站访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure>

<p>3、打开D:\hexo\blog\node_modules\hexo-theme-next\layout\partials\post的post-footer.njk文件在最后另起一行加入如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable &amp;&amp; !index)&#123; %&gt;</span><br><span class="line">        &lt;!-- 不蒜子统计 --&gt;</span><br><span class="line">        &lt;span id=&quot;busuanzi_container_page_pv&quot; style=&#x27;display:none&#x27; class=&quot;&lt;%= class_name %&gt;&quot;&gt;</span><br><span class="line">              &lt;i class=&quot;icon-smile icon&quot;&gt;&lt;/i&gt; 阅读数：&lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;次</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>

<h3 id="对一些细节"><a href="#对一些细节" class="headerlink" title="对一些细节"></a>对一些细节</h3><p>1、每次对细节修改之后都要在blog根目录下hexo g -d</p>
<p>然后hexo s本地预览一下</p>
<p>2、layout.njk文件相当于是博客的前端html文件</p>
<p>3、对新手小白的建议：</p>
<p>备份！备份！备份！！！！非常重要！</p>
<p>当时就是因为没备份然后再csdn上看了很多乱七八糟的东西，然后就错误地删掉了很多</p>
<p>然后我不得不建了一个hexo副本文件夹再下载了一次这些文件代码然后再复制上去。</p>
<p>乱改没关系，只要记得备份，不然一切都重来。</p>
<p>4、看报错信息！</p>
<p>当出现如图所示的报错信息时说明</p>
<p><img src="/2022/02/03/%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/index/image-20220205145142254.png" alt="image-20220205145142254"></p>
<p><img src="/2022/02/03/%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/index/image-20220205145235139.png" alt="image-20220205145235139"></p>
<p>说明是在这个文件的更改导致的错误</p>
<p>5、看注释，看官方文档，别一不会就百度！</p>
<p><img src="/2022/02/03/%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/index/image-20220205145835846.png" alt="image-20220205145835846"></p>
<p>这个侧边栏头像以及指针的旋转我百度了好久，原来在新版的站点配置文件里面就有！！！啊啊啊啊啊啊！</p>
<p>参考文献：</p>
<p><a href="https://jomeswang.github.io/posts/fd1e545c/#more">https://jomeswang.github.io/posts/fd1e545c/#more</a></p>
<p><a href="https://hasegawaazusa.github.io/hexo-note.html">https://hasegawaazusa.github.io/hexo-note.html</a></p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇先来个碎碎念</title>
    <url>/2022/02/02/hello/index.html</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Welcome to my blog, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      <tags>
        <tag>碎碎念</tag>
      </tags>
  </entry>
</search>
